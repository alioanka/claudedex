{
  "setup.py": {
    "path": "setup.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "read_requirements",
        "qualified_name": "read_requirements",
        "is_async": false,
        "lineno": 14,
        "scope": "module",
        "params": [
          "file"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "exists",
          "open",
          "strip",
          "strip",
          "startswith"
        ]
      }
    ],
    "found_classes": [],
    "class_bases": {},
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "main.py": {
    "path": "main.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "setup_logger",
        "qualified_name": "setup_logger",
        "is_async": false,
        "lineno": 33,
        "scope": "module",
        "params": [
          "name",
          "mode"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "logging.Logger",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "StructuredLogger",
          "getLogger"
        ]
      },
      {
        "name": "test_connection",
        "qualified_name": "test_connection",
        "is_async": true,
        "lineno": 39,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DatabaseManager",
          "connect",
          "disconnect"
        ]
      },
      {
        "name": "test_redis_connection",
        "qualified_name": "test_redis_connection",
        "is_async": true,
        "lineno": 45,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "CacheManager",
          "connect",
          "disconnect"
        ]
      },
      {
        "name": "test_web3_connection",
        "qualified_name": "test_web3_connection",
        "is_async": true,
        "lineno": 52,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "test_web3"
        ]
      },
      {
        "name": "test_api_connection",
        "qualified_name": "test_api_connection",
        "is_async": true,
        "lineno": 57,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "test_api"
        ]
      },
      {
        "name": "verify_models_loaded",
        "qualified_name": "verify_models_loaded",
        "is_async": true,
        "lineno": 62,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "EnsemblePredictor"
        ]
      },
      {
        "name": "check_wallet_balance",
        "qualified_name": "check_wallet_balance",
        "is_async": true,
        "lineno": 68,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "WalletSecurityManager"
        ]
      },
      {
        "name": "close_all_connections",
        "qualified_name": "close_all_connections",
        "is_async": true,
        "lineno": 75,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "__init__",
        "qualified_name": "HealthChecker.__init__",
        "is_async": false,
        "lineno": 82,
        "scope": "class:HealthChecker",
        "params": [
          "self",
          "engine"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "monitor",
        "qualified_name": "HealthChecker.monitor",
        "is_async": true,
        "lineno": 85,
        "scope": "class:HealthChecker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "sleep",
          "print"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "TradingBotApplication.__init__",
        "is_async": false,
        "lineno": 97,
        "scope": "class:TradingBotApplication",
        "params": [
          "self",
          "config_path",
          "mode"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Event",
          "setup_logger",
          "signal",
          "signal"
        ]
      },
      {
        "name": "_signal_handler",
        "qualified_name": "TradingBotApplication._signal_handler",
        "is_async": false,
        "lineno": 116,
        "scope": "class:TradingBotApplication",
        "params": [
          "self",
          "signum",
          "frame"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "warning",
          "set"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "TradingBotApplication.initialize",
        "is_async": true,
        "lineno": 121,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "info",
          "info",
          "info",
          "isoformat",
          "now",
          "info",
          "info",
          "ConfigManager",
          "get_config",
          "_validate_environment",
          "info",
          "EncryptionManager",
          "info",
          "hasattr",
          "get_database_config",
          "DatabaseManager",
          "connect",
          "info",
          "TradingBotEngine",
          "initialize",
          "info",
          "HealthChecker",
          "_perform_system_checks",
          "info",
          "info",
          "error"
        ]
      },
      {
        "name": "_validate_environment",
        "qualified_name": "TradingBotApplication._validate_environment",
        "is_async": false,
        "lineno": 167,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "getenv",
          "ValueError",
          "len",
          "getenv",
          "ValueError"
        ]
      },
      {
        "name": "_perform_system_checks",
        "qualified_name": "TradingBotApplication._perform_system_checks",
        "is_async": true,
        "lineno": 188,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "info",
          "check_func",
          "info",
          "error"
        ]
      },
      {
        "name": "_check_database",
        "qualified_name": "TradingBotApplication._check_database",
        "is_async": true,
        "lineno": 209,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "test_connection"
        ]
      },
      {
        "name": "_check_redis",
        "qualified_name": "TradingBotApplication._check_redis",
        "is_async": true,
        "lineno": 214,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "test_redis_connection"
        ]
      },
      {
        "name": "_check_web3",
        "qualified_name": "TradingBotApplication._check_web3",
        "is_async": true,
        "lineno": 219,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "test_web3_connection"
        ]
      },
      {
        "name": "_check_apis",
        "qualified_name": "TradingBotApplication._check_apis",
        "is_async": true,
        "lineno": 224,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "test_api_connection"
        ]
      },
      {
        "name": "_check_models",
        "qualified_name": "TradingBotApplication._check_models",
        "is_async": true,
        "lineno": 229,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "verify_models_loaded"
        ]
      },
      {
        "name": "_check_wallet",
        "qualified_name": "TradingBotApplication._check_wallet",
        "is_async": true,
        "lineno": 234,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "check_wallet_balance",
          "ValueError"
        ]
      },
      {
        "name": "run",
        "qualified_name": "TradingBotApplication.run",
        "is_async": true,
        "lineno": 242,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "initialize",
          "info",
          "create_task",
          "run",
          "create_task",
          "monitor",
          "create_task",
          "_status_reporter",
          "create_task",
          "_shutdown_monitor",
          "wait",
          "exception",
          "error",
          "exception",
          "cancel",
          "error",
          "shutdown"
        ]
      },
      {
        "name": "_status_reporter",
        "qualified_name": "TradingBotApplication._status_reporter",
        "is_async": true,
        "lineno": 280,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "is_set",
          "get_stats",
          "info",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_shutdown_monitor",
        "qualified_name": "TradingBotApplication._shutdown_monitor",
        "is_async": true,
        "lineno": 294,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "wait",
          "info"
        ]
      },
      {
        "name": "shutdown",
        "qualified_name": "TradingBotApplication.shutdown",
        "is_async": true,
        "lineno": 299,
        "scope": "class:TradingBotApplication",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "info",
          "emergency_close_all_positions",
          "info",
          "save_state",
          "shutdown",
          "close_all_connections",
          "info",
          "error"
        ]
      },
      {
        "name": "parse_arguments",
        "qualified_name": "parse_arguments",
        "is_async": false,
        "lineno": 327,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args"
        ]
      },
      {
        "name": "main",
        "qualified_name": "main",
        "is_async": true,
        "lineno": 372,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "parse_arguments",
          "run_backtest",
          "train_all_models",
          "TradingBotApplication",
          "run",
          "print",
          "print",
          "exit"
        ]
      }
    ],
    "found_classes": [
      "HealthChecker",
      "TradingBotApplication"
    ],
    "class_bases": {
      "HealthChecker": [],
      "TradingBotApplication": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "core/__init__.py": {
    "path": "core\\__init__.py",
    "exists": true,
    "expected": [],
    "found_methods": [],
    "found_classes": [],
    "class_bases": {},
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "core/engine.py": {
    "path": "core\\engine.py",
    "exists": true,
    "expected": [
      {
        "name": "start",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "stop",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_monitor_new_pairs",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_analyze_opportunity",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "pair"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TradingOpportunity",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_execute_opportunity",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_monitor_existing_positions",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_final_safety_checks",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_close_position",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "position",
          "reason"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "score",
        "qualified_name": "TradingOpportunity.score",
        "is_async": false,
        "lineno": 69,
        "scope": "class:TradingOpportunity",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "min"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "TradingBotEngine.__init__",
        "is_async": false,
        "lineno": 81,
        "scope": "class:TradingBotEngine",
        "params": [
          "self",
          "config",
          "mode"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "EventBus",
          "RiskManager",
          "PatternAnalyzer",
          "DecisionMaker",
          "PortfolioManager",
          "DexScreenerCollector",
          "ChainDataCollector",
          "SocialDataCollector",
          "MempoolMonitor",
          "WhaleTracker",
          "EnsemblePredictor",
          "HyperparameterOptimizer",
          "RLOptimizer",
          "StrategyManager",
          "OrderManager",
          "PositionTracker",
          "TradeExecutor",
          "AlertManager",
          "PerformanceTracker",
          "WalletManager",
          "set",
          "set",
          "now"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "TradingBotEngine.initialize",
        "is_async": true,
        "lineno": 145,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_load_blacklists",
          "initialize",
          "initialize",
          "load_models",
          "initialize",
          "initialize",
          "_setup_event_handlers",
          "_load_state",
          "_warmup_collectors",
          "Exception"
        ]
      },
      {
        "name": "_setup_event_handlers",
        "qualified_name": "TradingBotEngine._setup_event_handlers",
        "is_async": false,
        "lineno": 175,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "subscribe",
          "subscribe",
          "subscribe",
          "subscribe",
          "subscribe",
          "subscribe"
        ]
      },
      {
        "name": "run",
        "qualified_name": "TradingBotEngine.run",
        "is_async": true,
        "lineno": 184,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "create_task",
          "_monitor_new_pairs",
          "create_task",
          "_monitor_existing_positions",
          "create_task",
          "_process_opportunities",
          "create_task",
          "_monitor_mempool",
          "create_task",
          "_track_whales",
          "create_task",
          "_optimize_strategies",
          "create_task",
          "_retrain_models",
          "create_task",
          "_update_blacklists",
          "create_task",
          "_monitor_performance",
          "create_task",
          "_health_check",
          "gather",
          "send_critical"
        ]
      },
      {
        "name": "_monitor_new_pairs",
        "qualified_name": "TradingBotEngine._monitor_new_pairs",
        "is_async": true,
        "lineno": 208,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_new_pairs",
          "_is_blacklisted",
          "_analyze_opportunity",
          "append",
          "emit",
          "Event",
          "sleep",
          "send_error",
          "sleep"
        ]
      },
      {
        "name": "_analyze_opportunity",
        "qualified_name": "TradingBotEngine._analyze_opportunity",
        "is_async": true,
        "lineno": 241,
        "scope": "class:TradingBotEngine",
        "params": [
          "self",
          "pair"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[TradingOpportunity]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "analyze_token",
          "analyze_patterns",
          "get_token_info",
          "get_sentiment",
          "_check_developer_reputation",
          "_analyze_liquidity_depth",
          "_check_smart_contract",
          "_analyze_holder_distribution",
          "gather",
          "any",
          "isinstance",
          "_extract_features",
          "predict",
          "make_decision",
          "calculate_position_size",
          "get_available_balance",
          "TradingOpportunity",
          "send_warning"
        ]
      },
      {
        "name": "_process_opportunities",
        "qualified_name": "TradingBotEngine._process_opportunities",
        "is_async": true,
        "lineno": 327,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sleep",
          "sort",
          "can_open_position",
          "_final_safety_checks",
          "_execute_opportunity",
          "remove",
          "sleep",
          "send_error",
          "sleep"
        ]
      },
      {
        "name": "_execute_opportunity",
        "qualified_name": "TradingBotEngine._execute_opportunity",
        "is_async": true,
        "lineno": 356,
        "scope": "class:TradingBotEngine",
        "params": [
          "self",
          "opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "select_strategy",
          "prepare_order",
          "_calculate_slippage",
          "_calculate_gas_multiplier",
          "_apply_mev_protection",
          "execute",
          "open_position",
          "_set_exit_orders",
          "send_trade_alert",
          "emit",
          "Event",
          "send_error"
        ]
      },
      {
        "name": "_monitor_existing_positions",
        "qualified_name": "TradingBotEngine._monitor_existing_positions",
        "is_async": true,
        "lineno": 412,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "list",
          "items",
          "get_token_price",
          "_calculate_pnl",
          "_calculate_pnl_percentage",
          "_check_exit_conditions",
          "_close_position",
          "get",
          "_update_trailing_stop",
          "_should_dca",
          "_execute_dca",
          "sleep",
          "send_error",
          "sleep"
        ]
      },
      {
        "name": "_check_exit_conditions",
        "qualified_name": "TradingBotEngine._check_exit_conditions",
        "is_async": true,
        "lineno": 448,
        "scope": "class:TradingBotEngine",
        "params": [
          "self",
          "position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "tuple[bool, str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "now",
          "_check_ml_exit_signal",
          "_detect_rug_pull_signs",
          "_check_liquidity_crisis"
        ]
      },
      {
        "name": "_close_position",
        "qualified_name": "TradingBotEngine._close_position",
        "is_async": true,
        "lineno": 478,
        "scope": "class:TradingBotEngine",
        "params": [
          "self",
          "position",
          "reason"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "prepare_order",
          "execute",
          "close_position",
          "send_trade_alert",
          "_learn_from_trade",
          "send_critical"
        ]
      },
      {
        "name": "_monitor_mempool",
        "qualified_name": "TradingBotEngine._monitor_mempool",
        "is_async": true,
        "lineno": 529,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_pending_transactions",
          "_analyze_mempool_tx",
          "detect_sandwich_attack",
          "emit",
          "Event",
          "sleep",
          "sleep"
        ]
      },
      {
        "name": "_track_whales",
        "qualified_name": "TradingBotEngine._track_whales",
        "is_async": true,
        "lineno": 553,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_recent_movements",
          "_handle_whale_movement",
          "_analyze_whale_accumulation",
          "sleep",
          "sleep"
        ]
      },
      {
        "name": "_optimize_strategies",
        "qualified_name": "TradingBotEngine._optimize_strategies",
        "is_async": true,
        "lineno": 574,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sleep",
          "get_recent_performance",
          "optimize",
          "get_parameters",
          "_validate_new_parameters",
          "update_parameters",
          "send_info",
          "update_policy",
          "send_warning"
        ]
      },
      {
        "name": "_retrain_models",
        "qualified_name": "TradingBotEngine._retrain_models",
        "is_async": true,
        "lineno": 601,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sleep",
          "_collect_training_data",
          "_should_retrain",
          "retrain",
          "_validate_models",
          "update_models",
          "send_info",
          "send_warning"
        ]
      },
      {
        "name": "_update_blacklists",
        "qualified_name": "TradingBotEngine._update_blacklists",
        "is_async": true,
        "lineno": 624,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sleep",
          "_get_recent_rug_pulls",
          "add",
          "get",
          "add",
          "_save_blacklists",
          "_update_community_blacklists",
          "sleep"
        ]
      },
      {
        "name": "_monitor_performance",
        "qualified_name": "TradingBotEngine._monitor_performance",
        "is_async": true,
        "lineno": 650,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "max",
          "len",
          "total_seconds",
          "now",
          "record_metrics",
          "now",
          "now",
          "_send_daily_report",
          "sleep",
          "sleep"
        ]
      },
      {
        "name": "_health_check",
        "qualified_name": "TradingBotEngine._health_check",
        "is_async": true,
        "lineno": 677,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_check_database_health",
          "_check_web3_health",
          "_check_api_health",
          "_check_memory_usage",
          "_check_cpu_usage",
          "items",
          "send_warning",
          "sleep",
          "sleep"
        ]
      },
      {
        "name": "start",
        "qualified_name": "TradingBotEngine.start",
        "is_async": true,
        "lineno": 703,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "initialize",
          "run",
          "Exception"
        ]
      },
      {
        "name": "stop",
        "qualified_name": "TradingBotEngine.stop",
        "is_async": true,
        "lineno": 713,
        "scope": "class:TradingBotEngine",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "cancel",
          "gather",
          "get",
          "list",
          "values",
          "_close_position",
          "_save_state",
          "send_critical"
        ]
      },
      {
        "name": "_final_safety_checks",
        "qualified_name": "TradingBotEngine._final_safety_checks",
        "is_async": true,
        "lineno": 739,
        "scope": "class:TradingBotEngine",
        "params": [
          "self",
          "opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_liquidity",
          "get_token_price",
          "abs",
          "analyze_token",
          "get_available_balance",
          "check_frontrun_risk",
          "send_warning"
        ]
      }
    ],
    "found_classes": [
      "BotState",
      "TradingOpportunity",
      "TradingBotEngine"
    ],
    "class_bases": {
      "BotState": [
        "Enum"
      ],
      "TradingOpportunity": [],
      "TradingBotEngine": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "core/risk_manager.py": {
    "path": "core\\risk_manager.py",
    "exists": true,
    "expected": [
      {
        "name": "check_position_limit",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_position_size",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "set_stop_loss",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_portfolio_exposure",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_var",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "confidence"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_correlation_limit",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "emergency_stop_check",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_sharpe_ratio",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_sortino_ratio",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "overall_risk",
        "qualified_name": "RiskScore.overall_risk",
        "is_async": false,
        "lineno": 77,
        "scope": "class:RiskScore",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "sum",
          "min",
          "min",
          "min",
          "min"
        ]
      },
      {
        "name": "risk_level",
        "qualified_name": "RiskScore.risk_level",
        "is_async": false,
        "lineno": 117,
        "scope": "class:RiskScore",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "RiskLevel",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "__init__",
        "qualified_name": "RiskManager.__init__",
        "is_async": false,
        "lineno": 172,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "ChainDataCollector",
          "get",
          "HoneypotChecker",
          "WalletManager",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "RiskManager.initialize",
        "is_async": true,
        "lineno": 202,
        "scope": "class:RiskManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "initialize",
          "initialize"
        ]
      },
      {
        "name": "analyze_token",
        "qualified_name": "RiskManager.analyze_token",
        "is_async": true,
        "lineno": 207,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "token_address",
          "force_refresh"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "RiskScore",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "_analyze_liquidity_risk",
          "_analyze_developer_risk",
          "_analyze_contract_risk",
          "_analyze_volume_risk",
          "_analyze_holder_risk",
          "_analyze_social_risk",
          "_analyze_technical_risk",
          "_analyze_market_risk",
          "gather",
          "enumerate",
          "isinstance",
          "RiskScore",
          "isinstance",
          "isinstance",
          "isinstance",
          "isinstance",
          "isinstance",
          "isinstance",
          "isinstance",
          "isinstance",
          "isinstance",
          "items",
          "hasattr",
          "setattr",
          "RiskScore"
        ]
      },
      {
        "name": "_analyze_liquidity_risk",
        "qualified_name": "RiskManager._analyze_liquidity_risk",
        "is_async": true,
        "lineno": 282,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_liquidity_info",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min"
        ]
      },
      {
        "name": "_analyze_developer_risk",
        "qualified_name": "RiskManager._analyze_developer_risk",
        "is_async": true,
        "lineno": 343,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_developer_info",
          "get",
          "get",
          "len",
          "sum",
          "get",
          "sum",
          "get",
          "len",
          "len",
          "get",
          "get",
          "get",
          "max",
          "min"
        ]
      },
      {
        "name": "_analyze_contract_risk",
        "qualified_name": "RiskManager._analyze_contract_risk",
        "is_async": true,
        "lineno": 399,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "check",
          "get",
          "analyze_contract",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min",
          "len",
          "min"
        ]
      },
      {
        "name": "_analyze_volume_risk",
        "qualified_name": "RiskManager._analyze_volume_risk",
        "is_async": true,
        "lineno": 465,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_volume_analysis",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "mean",
          "min"
        ]
      },
      {
        "name": "_analyze_holder_risk",
        "qualified_name": "RiskManager._analyze_holder_risk",
        "is_async": true,
        "lineno": 520,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_holder_analysis",
          "get",
          "sum",
          "get",
          "get",
          "len",
          "get",
          "get",
          "len",
          "get",
          "get",
          "get",
          "len",
          "min"
        ]
      },
      {
        "name": "_analyze_social_risk",
        "qualified_name": "RiskManager._analyze_social_risk",
        "is_async": true,
        "lineno": 585,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_analyze_technical_risk",
        "qualified_name": "RiskManager._analyze_technical_risk",
        "is_async": true,
        "lineno": 595,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_technical_indicators",
          "get",
          "get",
          "len",
          "max",
          "max",
          "min"
        ]
      },
      {
        "name": "_analyze_market_risk",
        "qualified_name": "RiskManager._analyze_market_risk",
        "is_async": true,
        "lineno": 631,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_market_conditions",
          "get",
          "get",
          "get",
          "get",
          "max",
          "abs",
          "abs",
          "min"
        ]
      },
      {
        "name": "calculate_position_size",
        "qualified_name": "RiskManager.calculate_position_size",
        "is_async": true,
        "lineno": 668,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_available_balance",
          "Decimal",
          "max",
          "min",
          "min",
          "float",
          "Decimal",
          "Decimal",
          "str",
          "round",
          "print",
          "Decimal"
        ]
      },
      {
        "name": "calculate_stop_loss",
        "qualified_name": "RiskManager.calculate_stop_loss",
        "is_async": false,
        "lineno": 744,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "risk_score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "calculate_take_profit",
        "qualified_name": "RiskManager.calculate_take_profit",
        "is_async": false,
        "lineno": 777,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "risk_score",
          "market_conditions"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "copy",
          "get",
          "get"
        ]
      },
      {
        "name": "validate_trade",
        "qualified_name": "RiskManager.validate_trade",
        "is_async": true,
        "lineno": 811,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "token_address",
          "amount"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[bool, str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "analyze_token",
          "get_available_balance",
          "str"
        ]
      },
      {
        "name": "check_position_limit",
        "qualified_name": "RiskManager.check_position_limit",
        "is_async": true,
        "lineno": 856,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "print"
        ]
      },
      {
        "name": "set_stop_loss",
        "qualified_name": "RiskManager.set_stop_loss",
        "is_async": true,
        "lineno": 874,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "analyze_token",
          "calculate_stop_loss",
          "Decimal",
          "str",
          "float",
          "print",
          "Decimal",
          "str"
        ]
      },
      {
        "name": "check_portfolio_exposure",
        "qualified_name": "RiskManager.check_portfolio_exposure",
        "is_async": true,
        "lineno": 893,
        "scope": "class:RiskManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "sum",
          "values",
          "len",
          "len",
          "_calculate_portfolio_risk_level",
          "values",
          "print",
          "str"
        ]
      },
      {
        "name": "calculate_var",
        "qualified_name": "RiskManager.calculate_var",
        "is_async": true,
        "lineno": 924,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "confidence"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "values",
          "get_price_history",
          "range",
          "len",
          "append",
          "Decimal",
          "sorted",
          "int",
          "len",
          "abs",
          "sum",
          "values",
          "Decimal",
          "str",
          "print",
          "Decimal"
        ]
      },
      {
        "name": "check_correlation_limit",
        "qualified_name": "RiskManager.check_correlation_limit",
        "is_async": true,
        "lineno": 958,
        "scope": "class:RiskManager",
        "params": [
          "self",
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_price_history",
          "_calculate_returns",
          "values",
          "get_price_history",
          "_calculate_returns",
          "len",
          "len",
          "corrcoef",
          "abs",
          "len",
          "print"
        ]
      },
      {
        "name": "emergency_stop_check",
        "qualified_name": "RiskManager.emergency_stop_check",
        "is_async": true,
        "lineno": 991,
        "scope": "class:RiskManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "sum",
          "values",
          "_calculate_daily_loss",
          "_check_system_health",
          "print"
        ]
      },
      {
        "name": "calculate_sharpe_ratio",
        "qualified_name": "RiskManager.calculate_sharpe_ratio",
        "is_async": true,
        "lineno": 1021,
        "scope": "class:RiskManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "Decimal",
          "array",
          "mean",
          "std",
          "Decimal",
          "sqrt",
          "Decimal",
          "str",
          "print",
          "Decimal"
        ]
      },
      {
        "name": "calculate_sortino_ratio",
        "qualified_name": "RiskManager.calculate_sortino_ratio",
        "is_async": true,
        "lineno": 1045,
        "scope": "class:RiskManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "Decimal",
          "array",
          "mean",
          "len",
          "Decimal",
          "std",
          "Decimal",
          "sqrt",
          "Decimal",
          "str",
          "print",
          "Decimal"
        ]
      }
    ],
    "found_classes": [
      "RiskLevel",
      "RiskScore",
      "TradingOpportunity",
      "Position",
      "RiskManager"
    ],
    "class_bases": {
      "RiskLevel": [
        "Enum"
      ],
      "RiskScore": [],
      "TradingOpportunity": [],
      "Position": [],
      "RiskManager": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "core/pattern_analyzer.py": {
    "path": "core\\pattern_analyzer.py",
    "exists": true,
    "expected": [
      {
        "name": "analyze_patterns",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "price_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "detect_chart_patterns",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "detect_candlestick_patterns",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "ohlc_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_support_resistance",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "identify_trend",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "PatternAnalyzer.__init__",
        "is_async": false,
        "lineno": 73,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get"
        ]
      },
      {
        "name": "analyze_patterns",
        "qualified_name": "PatternAnalyzer.analyze_patterns",
        "is_async": true,
        "lineno": 103,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "price_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_prepare_dataframe",
          "len",
          "_detect_chart_patterns",
          "_analyze_trend",
          "_find_support_resistance",
          "_calculate_indicators",
          "_analyze_volume_profile",
          "_detect_candlestick_patterns",
          "_analyze_momentum",
          "_detect_breakouts",
          "gather",
          "isinstance",
          "extend",
          "extend",
          "extend",
          "_calculate_pattern_score",
          "_generate_signal",
          "_calculate_risk_reward",
          "now",
          "print",
          "str"
        ]
      },
      {
        "name": "_detect_chart_patterns",
        "qualified_name": "PatternAnalyzer._detect_chart_patterns",
        "is_async": true,
        "lineno": 190,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "df"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Pattern]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "extend",
          "_detect_triangles",
          "extend",
          "_detect_double_patterns",
          "extend",
          "_detect_head_shoulders",
          "extend",
          "_detect_flags",
          "extend",
          "_detect_cup_handle",
          "print"
        ]
      },
      {
        "name": "_detect_triangles",
        "qualified_name": "PatternAnalyzer._detect_triangles",
        "is_async": true,
        "lineno": 217,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "closes",
          "highs",
          "lows"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Pattern]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "find_peaks",
          "find_peaks",
          "len",
          "len",
          "polyfit",
          "polyfit",
          "abs",
          "append",
          "Pattern",
          "now",
          "timedelta",
          "len",
          "now",
          "abs",
          "append",
          "Pattern",
          "now",
          "timedelta",
          "len",
          "now",
          "print"
        ]
      },
      {
        "name": "_detect_double_patterns",
        "qualified_name": "PatternAnalyzer._detect_double_patterns",
        "is_async": true,
        "lineno": 260,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "closes",
          "highs",
          "lows"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Pattern]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "find_peaks",
          "std",
          "len",
          "range",
          "len",
          "abs",
          "append",
          "Pattern",
          "now",
          "timedelta",
          "now",
          "find_peaks",
          "std",
          "len",
          "range",
          "len",
          "abs",
          "append",
          "Pattern",
          "now",
          "timedelta",
          "now",
          "print"
        ]
      },
      {
        "name": "_analyze_trend",
        "qualified_name": "PatternAnalyzer._analyze_trend",
        "is_async": true,
        "lineno": 307,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "df"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[TrendInfo]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "arange",
          "len",
          "polyfit",
          "poly1d",
          "p",
          "mean",
          "sum",
          "sum",
          "min",
          "abs",
          "_calculate_trend_duration",
          "TrendInfo",
          "print"
        ]
      },
      {
        "name": "_find_support_resistance",
        "qualified_name": "PatternAnalyzer._find_support_resistance",
        "is_async": true,
        "lineno": 351,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "df"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[SupportResistance]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "find_peaks",
          "find_peaks",
          "append",
          "get",
          "append",
          "get",
          "_cluster_levels",
          "max",
          "keys",
          "SupportResistance",
          "sorted",
          "sorted",
          "print"
        ]
      },
      {
        "name": "_calculate_indicators",
        "qualified_name": "PatternAnalyzer._calculate_indicators",
        "is_async": true,
        "lineno": 400,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "df"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "SMA",
          "SMA",
          "EMA",
          "EMA",
          "RSI",
          "MACD",
          "BBANDS",
          "ATR",
          "OBV",
          "SMA",
          "ADX",
          "CCI",
          "STOCH",
          "WILLR",
          "MFI",
          "print"
        ]
      },
      {
        "name": "detect_chart_patterns",
        "qualified_name": "PatternAnalyzer.detect_chart_patterns",
        "is_async": false,
        "lineno": 460,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DataFrame",
          "len",
          "get_event_loop",
          "run_until_complete",
          "_detect_chart_patterns",
          "print"
        ]
      },
      {
        "name": "detect_candlestick_patterns",
        "qualified_name": "PatternAnalyzer.detect_candlestick_patterns",
        "is_async": false,
        "lineno": 477,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "ohlc_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DataFrame",
          "get_event_loop",
          "run_until_complete",
          "_detect_candlestick_patterns",
          "print"
        ]
      },
      {
        "name": "calculate_support_resistance",
        "qualified_name": "PatternAnalyzer.calculate_support_resistance",
        "is_async": false,
        "lineno": 494,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DataFrame",
          "get_event_loop",
          "run_until_complete",
          "_find_support_resistance",
          "print"
        ]
      },
      {
        "name": "identify_trend",
        "qualified_name": "PatternAnalyzer.identify_trend",
        "is_async": false,
        "lineno": 517,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DataFrame",
          "get_event_loop",
          "run_until_complete",
          "_analyze_trend",
          "print"
        ]
      },
      {
        "name": "_prepare_dataframe",
        "qualified_name": "PatternAnalyzer._prepare_dataframe",
        "is_async": false,
        "lineno": 535,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[pd.DataFrame]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "isinstance",
          "DataFrame",
          "all",
          "all",
          "isinstance",
          "DataFrame",
          "len",
          "DataFrame",
          "to_numeric",
          "dropna",
          "print"
        ]
      },
      {
        "name": "_calculate_trend_duration",
        "qualified_name": "PatternAnalyzer._calculate_trend_duration",
        "is_async": false,
        "lineno": 575,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "closes",
          "direction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "range",
          "len",
          "range",
          "len",
          "mean",
          "std",
          "range",
          "len",
          "abs",
          "print"
        ]
      },
      {
        "name": "_cluster_levels",
        "qualified_name": "PatternAnalyzer._cluster_levels",
        "is_async": false,
        "lineno": 608,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "levels",
          "tolerance"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sorted",
          "abs",
          "append",
          "append",
          "mean",
          "append",
          "mean",
          "print"
        ]
      },
      {
        "name": "_detect_head_shoulders",
        "qualified_name": "PatternAnalyzer._detect_head_shoulders",
        "is_async": true,
        "lineno": 636,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "closes",
          "highs",
          "lows"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Pattern]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "find_peaks",
          "std",
          "len",
          "range",
          "len",
          "abs",
          "append",
          "Pattern",
          "now",
          "timedelta",
          "now",
          "find_peaks",
          "std",
          "len",
          "range",
          "len",
          "abs",
          "append",
          "Pattern",
          "now",
          "timedelta",
          "now",
          "print"
        ]
      },
      {
        "name": "_detect_flags",
        "qualified_name": "PatternAnalyzer._detect_flags",
        "is_async": true,
        "lineno": 694,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "closes",
          "volumes"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Pattern]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "range",
          "len",
          "std",
          "mean",
          "append",
          "Pattern",
          "now",
          "timedelta",
          "now",
          "min",
          "append",
          "Pattern",
          "now",
          "timedelta",
          "now",
          "max",
          "print"
        ]
      },
      {
        "name": "_detect_cup_handle",
        "qualified_name": "PatternAnalyzer._detect_cup_handle",
        "is_async": true,
        "lineno": 739,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "closes",
          "volumes"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Pattern]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "argmin",
          "abs",
          "min",
          "append",
          "Pattern",
          "now",
          "timedelta",
          "now",
          "print"
        ]
      },
      {
        "name": "_analyze_volume_profile",
        "qualified_name": "PatternAnalyzer._analyze_volume_profile",
        "is_async": true,
        "lineno": 778,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "df"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sum",
          "sum",
          "sum",
          "linspace",
          "min",
          "max",
          "range",
          "len",
          "sum",
          "max",
          "len",
          "len",
          "mean",
          "print"
        ]
      },
      {
        "name": "_detect_candlestick_patterns",
        "qualified_name": "PatternAnalyzer._detect_candlestick_patterns",
        "is_async": true,
        "lineno": 810,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "df"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Pattern]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "CDLHAMMER",
          "append",
          "Pattern",
          "now",
          "now",
          "CDLSHOOTINGSTAR",
          "append",
          "Pattern",
          "now",
          "now",
          "print"
        ]
      },
      {
        "name": "_analyze_momentum",
        "qualified_name": "PatternAnalyzer._analyze_momentum",
        "is_async": true,
        "lineno": 850,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "df"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "ones",
          "len",
          "len",
          "len",
          "len",
          "mean",
          "mean",
          "abs",
          "print"
        ]
      },
      {
        "name": "_detect_breakouts",
        "qualified_name": "PatternAnalyzer._detect_breakouts",
        "is_async": true,
        "lineno": 898,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "df"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Pattern]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "ones",
          "len",
          "len",
          "max",
          "mean",
          "append",
          "Pattern",
          "now",
          "now",
          "len",
          "min",
          "mean",
          "append",
          "Pattern",
          "now",
          "now",
          "print"
        ]
      },
      {
        "name": "_calculate_pattern_score",
        "qualified_name": "PatternAnalyzer._calculate_pattern_score",
        "is_async": false,
        "lineno": 951,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "patterns",
          "trend",
          "indicators",
          "momentum"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "mean",
          "get",
          "get",
          "get",
          "get",
          "min",
          "print"
        ]
      },
      {
        "name": "_generate_signal",
        "qualified_name": "PatternAnalyzer._generate_signal",
        "is_async": false,
        "lineno": 992,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "patterns",
          "trend",
          "indicators"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "lower",
          "lower",
          "lower",
          "lower",
          "get",
          "get",
          "get",
          "get",
          "print"
        ]
      },
      {
        "name": "_calculate_risk_reward",
        "qualified_name": "PatternAnalyzer._calculate_risk_reward",
        "is_async": false,
        "lineno": 1041,
        "scope": "class:PatternAnalyzer",
        "params": [
          "self",
          "df",
          "sr_levels"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "print"
        ]
      }
    ],
    "found_classes": [
      "PatternType",
      "Pattern",
      "TrendInfo",
      "SupportResistance",
      "PatternAnalyzer"
    ],
    "class_bases": {
      "PatternType": [
        "Enum"
      ],
      "Pattern": [],
      "TrendInfo": [],
      "SupportResistance": [],
      "PatternAnalyzer": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "core/decision_maker.py": {
    "path": "core\\decision_maker.py",
    "exists": true,
    "expected": [
      {
        "name": "make_decision",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TradingDecision",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "evaluate_opportunity",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_confidence_score",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "signals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "determine_action",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "scores"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "validate_decision",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "decision"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__post_init__",
        "qualified_name": "RiskScore.__post_init__",
        "is_async": false,
        "lineno": 40,
        "scope": "class:RiskScore",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "__init__",
        "qualified_name": "DecisionMaker.__init__",
        "is_async": false,
        "lineno": 75,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "make_decision",
        "qualified_name": "DecisionMaker.make_decision",
        "is_async": true,
        "lineno": 112,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TradingDecision",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "_classify_market_conditions",
          "_evaluate_strategies",
          "_select_best_strategy",
          "_calculate_confidence",
          "_should_trade",
          "TradingDecision",
          "_calculate_position_parameters",
          "_generate_reasoning",
          "TradingDecision",
          "append",
          "print",
          "TradingDecision"
        ]
      },
      {
        "name": "_evaluate_strategies",
        "qualified_name": "DecisionMaker._evaluate_strategies",
        "is_async": true,
        "lineno": 215,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "analysis_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[StrategyType, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_evaluate_scalping",
          "_evaluate_momentum",
          "_evaluate_mean_reversion",
          "_evaluate_breakout",
          "_evaluate_swing",
          "_evaluate_ai_hybrid",
          "gather",
          "zip",
          "isinstance"
        ]
      },
      {
        "name": "_evaluate_scalping",
        "qualified_name": "DecisionMaker._evaluate_scalping",
        "is_async": true,
        "lineno": 248,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min",
          "get",
          "min",
          "print"
        ]
      },
      {
        "name": "_evaluate_momentum",
        "qualified_name": "DecisionMaker._evaluate_momentum",
        "is_async": true,
        "lineno": 290,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "lower",
          "get",
          "get",
          "min",
          "print"
        ]
      },
      {
        "name": "_evaluate_mean_reversion",
        "qualified_name": "DecisionMaker._evaluate_mean_reversion",
        "is_async": true,
        "lineno": 331,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "abs",
          "min",
          "print"
        ]
      },
      {
        "name": "_evaluate_breakout",
        "qualified_name": "DecisionMaker._evaluate_breakout",
        "is_async": true,
        "lineno": 377,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "lower",
          "max",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "lower",
          "min",
          "print"
        ]
      },
      {
        "name": "_evaluate_swing",
        "qualified_name": "DecisionMaker._evaluate_swing",
        "is_async": true,
        "lineno": 424,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "len",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "abs",
          "get",
          "min",
          "print"
        ]
      },
      {
        "name": "_evaluate_ai_hybrid",
        "qualified_name": "DecisionMaker._evaluate_ai_hybrid",
        "is_async": true,
        "lineno": 471,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "len",
          "min",
          "print"
        ]
      },
      {
        "name": "_select_best_strategy",
        "qualified_name": "DecisionMaker._select_best_strategy",
        "is_async": false,
        "lineno": 523,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "scores"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "StrategyType",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "get",
          "uniform",
          "max",
          "items"
        ]
      },
      {
        "name": "_calculate_confidence",
        "qualified_name": "DecisionMaker._calculate_confidence",
        "is_async": true,
        "lineno": 536,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "risk_score",
          "ml_predictions",
          "patterns",
          "sentiment"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "mean",
          "get",
          "min",
          "max",
          "print"
        ]
      },
      {
        "name": "_should_trade",
        "qualified_name": "DecisionMaker._should_trade",
        "is_async": true,
        "lineno": 580,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "confidence",
          "risk_score",
          "ml_predictions",
          "liquidity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "print"
        ]
      },
      {
        "name": "_calculate_position_parameters",
        "qualified_name": "DecisionMaker._calculate_position_parameters",
        "is_async": true,
        "lineno": 609,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "data",
          "strategy",
          "confidence"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "_kelly_criterion",
          "get",
          "get",
          "abs",
          "get",
          "lower",
          "get",
          "get",
          "mean",
          "range",
          "print"
        ]
      },
      {
        "name": "_kelly_criterion",
        "qualified_name": "DecisionMaker._kelly_criterion",
        "is_async": false,
        "lineno": 695,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "confidence",
          "risk_score",
          "balance"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "min",
          "get",
          "max",
          "print"
        ]
      },
      {
        "name": "_generate_reasoning",
        "qualified_name": "DecisionMaker._generate_reasoning",
        "is_async": false,
        "lineno": 730,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "data",
          "strategy",
          "confidence"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "append",
          "get",
          "get",
          "get",
          "append",
          "get",
          "append",
          "append",
          "append",
          "get",
          "append",
          "join",
          "get",
          "append",
          "get",
          "get",
          "get",
          "append",
          "append",
          "append",
          "append",
          "print"
        ]
      },
      {
        "name": "_classify_market_conditions",
        "qualified_name": "DecisionMaker._classify_market_conditions",
        "is_async": true,
        "lineno": 789,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "print"
        ]
      },
      {
        "name": "update_performance",
        "qualified_name": "DecisionMaker.update_performance",
        "is_async": true,
        "lineno": 815,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "decision_id",
          "outcome"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "update",
          "now",
          "get",
          "get",
          "_adjust_strategy_weights",
          "print"
        ]
      },
      {
        "name": "_adjust_strategy_weights",
        "qualified_name": "DecisionMaker._adjust_strategy_weights",
        "is_async": true,
        "lineno": 834,
        "scope": "class:DecisionMaker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "upper",
          "print"
        ]
      },
      {
        "name": "evaluate_opportunity",
        "qualified_name": "DecisionMaker.evaluate_opportunity",
        "is_async": true,
        "lineno": 857,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "print"
        ]
      },
      {
        "name": "calculate_confidence_score",
        "qualified_name": "DecisionMaker.calculate_confidence_score",
        "is_async": false,
        "lineno": 887,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "signals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "get",
          "min",
          "print"
        ]
      },
      {
        "name": "determine_action",
        "qualified_name": "DecisionMaker.determine_action",
        "is_async": false,
        "lineno": 910,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "scores"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "print"
        ]
      },
      {
        "name": "validate_decision",
        "qualified_name": "DecisionMaker.validate_decision",
        "is_async": true,
        "lineno": 936,
        "scope": "class:DecisionMaker",
        "params": [
          "self",
          "decision"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "print"
        ]
      }
    ],
    "found_classes": [
      "TradingDecision",
      "RiskScore",
      "TradingOpportunity",
      "StrategyType",
      "DecisionMaker"
    ],
    "class_bases": {
      "TradingDecision": [],
      "RiskScore": [],
      "TradingOpportunity": [],
      "StrategyType": [
        "Enum"
      ],
      "DecisionMaker": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "core/portfolio_manager.py": {
    "path": "core\\portfolio_manager.py",
    "exists": true,
    "expected": [
      {
        "name": "update_portfolio",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_portfolio_value",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "rebalance_portfolio",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_allocation",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_portfolio_metrics",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_diversification",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "unrealized_pnl",
        "qualified_name": "Position.unrealized_pnl",
        "is_async": false,
        "lineno": 39,
        "scope": "class:Position",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "value",
        "qualified_name": "Position.value",
        "is_async": false,
        "lineno": 44,
        "scope": "class:Position",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "age",
        "qualified_name": "Position.age",
        "is_async": false,
        "lineno": 49,
        "scope": "class:Position",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "timedelta",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "PortfolioManager.__init__",
        "is_async": false,
        "lineno": 83,
        "scope": "class:PortfolioManager",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "upper",
          "get",
          "get",
          "get",
          "get",
          "DataFrame",
          "get",
          "get",
          "now"
        ]
      },
      {
        "name": "can_open_position",
        "qualified_name": "PortfolioManager.can_open_position",
        "is_async": false,
        "lineno": 128,
        "scope": "class:PortfolioManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "get_available_balance",
          "_check_daily_loss_limit",
          "_calculate_total_risk",
          "print"
        ]
      },
      {
        "name": "get_available_balance",
        "qualified_name": "PortfolioManager.get_available_balance",
        "is_async": false,
        "lineno": 157,
        "scope": "class:PortfolioManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "sum",
          "values",
          "max",
          "print"
        ]
      },
      {
        "name": "allocate_capital",
        "qualified_name": "PortfolioManager.allocate_capital",
        "is_async": true,
        "lineno": 175,
        "scope": "class:PortfolioManager",
        "params": [
          "self",
          "opportunities"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_available_balance",
          "_equal_weight_allocation",
          "_risk_parity_allocation",
          "_kelly_allocation",
          "_markowitz_allocation",
          "_dynamic_allocation",
          "print"
        ]
      },
      {
        "name": "_equal_weight_allocation",
        "qualified_name": "PortfolioManager._equal_weight_allocation",
        "is_async": false,
        "lineno": 210,
        "scope": "class:PortfolioManager",
        "params": [
          "self",
          "opportunities",
          "available"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "min",
          "len",
          "len",
          "min",
          "print"
        ]
      },
      {
        "name": "_risk_parity_allocation",
        "qualified_name": "PortfolioManager._risk_parity_allocation",
        "is_async": true,
        "lineno": 238,
        "scope": "class:PortfolioManager",
        "params": [
          "self",
          "opportunities",
          "available"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "append",
          "array",
          "sum",
          "enumerate",
          "min",
          "print"
        ]
      },
      {
        "name": "update_portfolio",
        "qualified_name": "PortfolioManager.update_portfolio",
        "is_async": true,
        "lineno": 279,
        "scope": "class:PortfolioManager",
        "params": [
          "self",
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Position",
          "get",
          "str",
          "uuid4",
          "get",
          "get",
          "now",
          "now",
          "get",
          "get",
          "len",
          "get",
          "get",
          "append",
          "_update_performance_metrics",
          "print"
        ]
      },
      {
        "name": "get_portfolio_value",
        "qualified_name": "PortfolioManager.get_portfolio_value",
        "is_async": true,
        "lineno": 338,
        "scope": "class:PortfolioManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "sum",
          "values",
          "Decimal",
          "str",
          "print",
          "Decimal"
        ]
      },
      {
        "name": "rebalance_portfolio",
        "qualified_name": "PortfolioManager.rebalance_portfolio",
        "is_async": true,
        "lineno": 349,
        "scope": "class:PortfolioManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "float",
          "get_portfolio_value",
          "items",
          "len",
          "get",
          "get",
          "abs",
          "append",
          "abs",
          "now",
          "print"
        ]
      },
      {
        "name": "calculate_allocation",
        "qualified_name": "PortfolioManager.calculate_allocation",
        "is_async": true,
        "lineno": 394,
        "scope": "class:PortfolioManager",
        "params": [
          "self",
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_portfolio_value",
          "Decimal",
          "Decimal",
          "str",
          "Decimal",
          "print",
          "Decimal"
        ]
      },
      {
        "name": "get_portfolio_metrics",
        "qualified_name": "PortfolioManager.get_portfolio_metrics",
        "is_async": false,
        "lineno": 413,
        "scope": "class:PortfolioManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "sum",
          "values",
          "sum",
          "values",
          "sum",
          "values",
          "sum",
          "get",
          "get",
          "sum",
          "get",
          "get",
          "sum",
          "get",
          "PortfolioMetrics",
          "float",
          "float",
          "float",
          "float",
          "float",
          "float",
          "_calculate_avg_win",
          "_calculate_avg_loss",
          "_calculate_profit_factor",
          "float",
          "len",
          "_calculate_risk_exposure",
          "_calculate_diversification_score",
          "print"
        ]
      },
      {
        "name": "check_diversification",
        "qualified_name": "PortfolioManager.check_diversification",
        "is_async": true,
        "lineno": 462,
        "scope": "class:PortfolioManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "get_portfolio_value",
          "values",
          "float",
          "max",
          "set",
          "values",
          "len",
          "print"
        ]
      }
    ],
    "found_classes": [
      "Position",
      "PortfolioMetrics",
      "AllocationStrategy",
      "PortfolioManager"
    ],
    "class_bases": {
      "Position": [],
      "PortfolioMetrics": [],
      "AllocationStrategy": [
        "Enum"
      ],
      "PortfolioManager": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "core/event_bus.py": {
    "path": "core\\event_bus.py",
    "exists": true,
    "expected": [
      {
        "name": "publish",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "event_type",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "subscribe",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "event_type",
          "handler"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "unsubscribe",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "event_type",
          "handler"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "process_events",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "Event.__init__",
        "is_async": false,
        "lineno": 70,
        "scope": "class:Event",
        "params": [
          "self",
          "event_type",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": true,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "isinstance",
          "get",
          "get",
          "get",
          "now",
          "get",
          "str",
          "uuid4",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "to_dict",
        "qualified_name": "Event.to_dict",
        "is_async": false,
        "lineno": 96,
        "scope": "class:Event",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isoformat"
        ]
      },
      {
        "name": "to_json",
        "qualified_name": "Event.to_json",
        "is_async": false,
        "lineno": 108,
        "scope": "class:Event",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "dumps",
          "to_dict"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "EventBus.__init__",
        "is_async": false,
        "lineno": 125,
        "scope": "class:EventBus",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "defaultdict",
          "Queue",
          "get",
          "defaultdict"
        ]
      },
      {
        "name": "start",
        "qualified_name": "EventBus.start",
        "is_async": true,
        "lineno": 162,
        "scope": "class:EventBus",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "create_task",
          "_process_events",
          "emit",
          "Event",
          "now"
        ]
      },
      {
        "name": "stop",
        "qualified_name": "EventBus.stop",
        "is_async": true,
        "lineno": 175,
        "scope": "class:EventBus",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "emit",
          "Event",
          "now",
          "join",
          "cancel"
        ]
      },
      {
        "name": "emit",
        "qualified_name": "EventBus.emit",
        "is_async": true,
        "lineno": 198,
        "scope": "class:EventBus",
        "params": [
          "self",
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_apply_filters",
          "put",
          "_add_to_history",
          "print"
        ]
      },
      {
        "name": "subscribe_sync",
        "qualified_name": "EventBus.subscribe_sync",
        "is_async": false,
        "lineno": 224,
        "scope": "class:EventBus",
        "params": [
          "self",
          "event_type",
          "callback",
          "subscriber_id",
          "filters",
          "priority"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "str",
          "uuid4",
          "EventSubscription",
          "iscoroutinefunction",
          "append",
          "sort",
          "print"
        ]
      },
      {
        "name": "unsubscribe_sync",
        "qualified_name": "EventBus.unsubscribe_sync",
        "is_async": false,
        "lineno": 263,
        "scope": "class:EventBus",
        "params": [
          "self",
          "subscriber_id",
          "event_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "print"
        ]
      },
      {
        "name": "_process_events",
        "qualified_name": "EventBus._process_events",
        "is_async": true,
        "lineno": 289,
        "scope": "class:EventBus",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "wait_for",
          "get",
          "_handle_event",
          "task_done",
          "print"
        ]
      },
      {
        "name": "_handle_event",
        "qualified_name": "EventBus._handle_event",
        "is_async": true,
        "lineno": 314,
        "scope": "class:EventBus",
        "params": [
          "self",
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "_apply_filters",
          "callback",
          "callback",
          "print",
          "append",
          "emit",
          "Event",
          "to_dict",
          "str",
          "print"
        ]
      },
      {
        "name": "_apply_filters",
        "qualified_name": "EventBus._apply_filters",
        "is_async": false,
        "lineno": 359,
        "scope": "class:EventBus",
        "params": [
          "self",
          "event",
          "filters"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "isinstance",
          "items",
          "hasattr",
          "getattr",
          "callable",
          "filters",
          "print"
        ]
      },
      {
        "name": "_add_to_history",
        "qualified_name": "EventBus._add_to_history",
        "is_async": false,
        "lineno": 394,
        "scope": "class:EventBus",
        "params": [
          "self",
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "len",
          "print"
        ]
      },
      {
        "name": "get_history",
        "qualified_name": "EventBus.get_history",
        "is_async": false,
        "lineno": 406,
        "scope": "class:EventBus",
        "params": [
          "self",
          "event_type",
          "limit"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Event]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "print"
        ]
      },
      {
        "name": "get_statistics",
        "qualified_name": "EventBus.get_statistics",
        "is_async": false,
        "lineno": 430,
        "scope": "class:EventBus",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "dict",
          "qsize",
          "sum",
          "len",
          "values",
          "len",
          "len"
        ]
      },
      {
        "name": "wait_for",
        "qualified_name": "EventBus.wait_for",
        "is_async": true,
        "lineno": 444,
        "scope": "class:EventBus",
        "params": [
          "self",
          "event_type",
          "timeout",
          "filters"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Event]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Future",
          "done",
          "set_result",
          "subscribe_sync",
          "wait_for",
          "unsubscribe_sync",
          "print"
        ]
      },
      {
        "name": "callback",
        "qualified_name": "EventBus.callback",
        "is_async": false,
        "lineno": 460,
        "scope": "class:EventBus",
        "params": [
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "done",
          "set_result"
        ]
      },
      {
        "name": "clear_dead_letter_queue",
        "qualified_name": "EventBus.clear_dead_letter_queue",
        "is_async": false,
        "lineno": 487,
        "scope": "class:EventBus",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Tuple[Event, Exception]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "copy",
          "clear"
        ]
      },
      {
        "name": "add_global_filter",
        "qualified_name": "EventBus.add_global_filter",
        "is_async": false,
        "lineno": 498,
        "scope": "class:EventBus",
        "params": [
          "self",
          "filter_func"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append"
        ]
      },
      {
        "name": "remove_global_filter",
        "qualified_name": "EventBus.remove_global_filter",
        "is_async": false,
        "lineno": 507,
        "scope": "class:EventBus",
        "params": [
          "self",
          "filter_func"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "remove"
        ]
      },
      {
        "name": "replay_events",
        "qualified_name": "EventBus.replay_events",
        "is_async": true,
        "lineno": 517,
        "scope": "class:EventBus",
        "params": [
          "self",
          "events"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "emit",
          "sleep",
          "print"
        ]
      },
      {
        "name": "create_event_stream",
        "qualified_name": "EventBus.create_event_stream",
        "is_async": false,
        "lineno": 539,
        "scope": "class:EventBus",
        "params": [
          "self",
          "event_types"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "asyncio.Queue",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Queue",
          "put",
          "subscribe_sync",
          "print",
          "Queue"
        ]
      },
      {
        "name": "stream_handler",
        "qualified_name": "EventBus.stream_handler",
        "is_async": true,
        "lineno": 552,
        "scope": "class:EventBus",
        "params": [
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "put"
        ]
      },
      {
        "name": "publish",
        "qualified_name": "EventBus.publish",
        "is_async": true,
        "lineno": 570,
        "scope": "class:EventBus",
        "params": [
          "self",
          "event_type",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "hasattr",
          "upper",
          "getattr",
          "upper",
          "print",
          "Event",
          "emit",
          "print"
        ]
      },
      {
        "name": "subscribe",
        "qualified_name": "EventBus.subscribe",
        "is_async": true,
        "lineno": 605,
        "scope": "class:EventBus",
        "params": [
          "self",
          "event_type",
          "handler"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "hasattr",
          "upper",
          "getattr",
          "upper",
          "print",
          "str",
          "uuid4",
          "EventSubscription",
          "iscoroutinefunction",
          "append",
          "sort",
          "hasattr",
          "print"
        ]
      },
      {
        "name": "unsubscribe",
        "qualified_name": "EventBus.unsubscribe",
        "is_async": true,
        "lineno": 652,
        "scope": "class:EventBus",
        "params": [
          "self",
          "event_type",
          "handler"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "hasattr",
          "upper",
          "getattr",
          "upper",
          "print",
          "hasattr",
          "print"
        ]
      },
      {
        "name": "process_events",
        "qualified_name": "EventBus.process_events",
        "is_async": true,
        "lineno": 689,
        "scope": "class:EventBus",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_process_events"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "EventLogger.__init__",
        "is_async": false,
        "lineno": 698,
        "scope": "class:EventLogger",
        "params": [
          "self",
          "log_file"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "log_event",
        "qualified_name": "EventLogger.log_event",
        "is_async": true,
        "lineno": 707,
        "scope": "class:EventLogger",
        "params": [
          "self",
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "open",
          "write",
          "to_json",
          "print"
        ]
      },
      {
        "name": "read_events",
        "qualified_name": "EventLogger.read_events",
        "is_async": false,
        "lineno": 716,
        "scope": "class:EventLogger",
        "params": [
          "self",
          "limit"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Event]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "open",
          "readlines",
          "loads",
          "strip",
          "Event",
          "EventType",
          "fromisoformat",
          "get",
          "get",
          "get",
          "append",
          "print",
          "print"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "EventAggregator.__init__",
        "is_async": false,
        "lineno": 754,
        "scope": "class:EventAggregator",
        "params": [
          "self",
          "batch_size",
          "timeout"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "now",
          "Lock"
        ]
      },
      {
        "name": "add_event",
        "qualified_name": "EventAggregator.add_event",
        "is_async": true,
        "lineno": 768,
        "scope": "class:EventAggregator",
        "params": [
          "self",
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[List[Event]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append",
          "len",
          "flush",
          "total_seconds",
          "now",
          "flush"
        ]
      },
      {
        "name": "flush",
        "qualified_name": "EventAggregator.flush",
        "is_async": true,
        "lineno": 791,
        "scope": "class:EventAggregator",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Event]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "copy",
          "clear",
          "now"
        ]
      }
    ],
    "found_classes": [
      "EventType",
      "Event",
      "EventSubscription",
      "EventBus",
      "EventLogger",
      "EventAggregator"
    ],
    "class_bases": {
      "EventType": [
        "Enum"
      ],
      "Event": [],
      "EventSubscription": [],
      "EventBus": [],
      "EventLogger": [],
      "EventAggregator": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/collectors/dexscreener.py": {
    "path": "data\\collectors\\dexscreener.py",
    "exists": true,
    "expected": [
      {
        "name": "get_new_pairs",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_token_info",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_price_history",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain",
          "interval"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "monitor_pair",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "AsyncGenerator",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_trending_tokens",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_gainers_losers",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "chain",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "age_hours",
        "qualified_name": "TokenPair.age_hours",
        "is_async": false,
        "lineno": 42,
        "scope": "class:TokenPair",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "total_seconds",
          "now"
        ]
      },
      {
        "name": "buy_sell_ratio",
        "qualified_name": "TokenPair.buy_sell_ratio",
        "is_async": false,
        "lineno": 47,
        "scope": "class:TokenPair",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "__init__",
        "qualified_name": "DexScreenerCollector.__init__",
        "is_async": false,
        "lineno": 57,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "deque",
          "get",
          "set",
          "Queue",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "DexScreenerCollector.initialize",
        "is_async": true,
        "lineno": 98,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ClientTimeout",
          "ClientSession"
        ]
      },
      {
        "name": "close",
        "qualified_name": "DexScreenerCollector.close",
        "is_async": true,
        "lineno": 104,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "close"
        ]
      },
      {
        "name": "_rate_limit",
        "qualified_name": "DexScreenerCollector._rate_limit",
        "is_async": true,
        "lineno": 109,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "time",
          "popleft",
          "len",
          "sleep",
          "append"
        ]
      },
      {
        "name": "_make_request",
        "qualified_name": "DexScreenerCollector._make_request",
        "is_async": true,
        "lineno": 125,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "endpoint",
          "params"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_rate_limit",
          "get",
          "json",
          "print",
          "print",
          "print"
        ]
      },
      {
        "name": "get_new_pairs",
        "qualified_name": "DexScreenerCollector.get_new_pairs",
        "is_async": true,
        "lineno": 168,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "time",
          "_make_request",
          "_parse_pair",
          "_filter_pair",
          "append",
          "_pair_to_dict",
          "sort",
          "time",
          "add",
          "put"
        ]
      },
      {
        "name": "get_token_price",
        "qualified_name": "DexScreenerCollector.get_token_price",
        "is_async": true,
        "lineno": 216,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "time",
          "_make_request",
          "len",
          "sorted",
          "get",
          "get",
          "get",
          "float",
          "time"
        ]
      },
      {
        "name": "get_pair_data",
        "qualified_name": "DexScreenerCollector.get_pair_data",
        "is_async": true,
        "lineno": 249,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "pair_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "time",
          "_make_request",
          "_parse_pair",
          "_pair_to_dict",
          "time"
        ]
      },
      {
        "name": "get_token_pairs",
        "qualified_name": "DexScreenerCollector.get_token_pairs",
        "is_async": true,
        "lineno": 279,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_make_request",
          "_parse_pair",
          "append",
          "_pair_to_dict"
        ]
      },
      {
        "name": "search_pairs",
        "qualified_name": "DexScreenerCollector.search_pairs",
        "is_async": true,
        "lineno": 301,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "query"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_make_request",
          "_parse_pair",
          "_filter_pair",
          "append",
          "_pair_to_dict"
        ]
      },
      {
        "name": "get_trending_pairs",
        "qualified_name": "DexScreenerCollector.get_trending_pairs",
        "is_async": true,
        "lineno": 324,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_make_request",
          "_parse_pair",
          "_filter_pair",
          "append",
          "_pair_to_dict",
          "sort"
        ]
      },
      {
        "name": "get_boosts",
        "qualified_name": "DexScreenerCollector.get_boosts",
        "is_async": true,
        "lineno": 348,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_make_request",
          "_parse_pair",
          "_pair_to_dict",
          "get",
          "append"
        ]
      },
      {
        "name": "monitor_pair",
        "qualified_name": "DexScreenerCollector.monitor_pair",
        "is_async": true,
        "lineno": 373,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "AsyncGenerator",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_token_pairs",
          "get",
          "add",
          "get_pair_data",
          "_detect_changes",
          "time",
          "time",
          "sleep",
          "str",
          "time",
          "sleep",
          "discard"
        ]
      },
      {
        "name": "monitor_pair_with_callback",
        "qualified_name": "DexScreenerCollector.monitor_pair_with_callback",
        "is_async": true,
        "lineno": 445,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "pair_address",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "add",
          "get_pair_data",
          "_detect_changes",
          "callback",
          "sleep",
          "print",
          "sleep"
        ]
      },
      {
        "name": "stop_monitoring",
        "qualified_name": "DexScreenerCollector.stop_monitoring",
        "is_async": false,
        "lineno": 477,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "pair_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "discard"
        ]
      },
      {
        "name": "_parse_pair",
        "qualified_name": "DexScreenerCollector._parse_pair",
        "is_async": false,
        "lineno": 481,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[TokenPair]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "get",
          "float",
          "get",
          "get",
          "get",
          "get",
          "TokenPair",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "fromtimestamp",
          "get",
          "now",
          "get",
          "print"
        ]
      },
      {
        "name": "_pair_to_dict",
        "qualified_name": "DexScreenerCollector._pair_to_dict",
        "is_async": false,
        "lineno": 552,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "pair"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "_filter_pair",
        "qualified_name": "DexScreenerCollector._filter_pair",
        "is_async": false,
        "lineno": 579,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "pair"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_detect_changes",
        "qualified_name": "DexScreenerCollector._detect_changes",
        "is_async": false,
        "lineno": 611,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "previous",
          "current"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "abs",
          "get",
          "get",
          "abs",
          "get",
          "get",
          "abs",
          "get",
          "get",
          "abs"
        ]
      },
      {
        "name": "get_price_history",
        "qualified_name": "DexScreenerCollector.get_price_history",
        "is_async": true,
        "lineno": 674,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "address",
          "chain",
          "interval"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_token_price",
          "int",
          "time"
        ]
      },
      {
        "name": "calculate_metrics",
        "qualified_name": "DexScreenerCollector.calculate_metrics",
        "is_async": true,
        "lineno": 707,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "pair_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_pair_data",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "append",
          "append",
          "append",
          "append",
          "min",
          "sum"
        ]
      },
      {
        "name": "get_stats",
        "qualified_name": "DexScreenerCollector.get_stats",
        "is_async": false,
        "lineno": 770,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "copy"
        ]
      },
      {
        "name": "get_token_info",
        "qualified_name": "DexScreenerCollector.get_token_info",
        "is_async": true,
        "lineno": 779,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_token_price",
          "get_token_pairs",
          "len",
          "get",
          "get",
          "get",
          "get",
          "get",
          "len",
          "get",
          "get"
        ]
      },
      {
        "name": "get_trending_tokens",
        "qualified_name": "DexScreenerCollector.get_trending_tokens",
        "is_async": true,
        "lineno": 828,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_trending_pairs",
          "set",
          "get",
          "add",
          "append",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "sort",
          "get"
        ]
      },
      {
        "name": "get_gainers_losers",
        "qualified_name": "DexScreenerCollector.get_gainers_losers",
        "is_async": true,
        "lineno": 872,
        "scope": "class:DexScreenerCollector",
        "params": [
          "self",
          "chain",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_make_request",
          "_parse_pair",
          "_pair_to_dict",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "append",
          "append",
          "sort",
          "sort",
          "time"
        ]
      },
      {
        "name": "test_api_connection",
        "qualified_name": "test_api_connection",
        "is_async": true,
        "lineno": 933,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DexScreenerCollector",
          "initialize",
          "get_new_pairs",
          "print",
          "print",
          "print",
          "close"
        ]
      }
    ],
    "found_classes": [
      "TokenPair",
      "DexScreenerCollector"
    ],
    "class_bases": {
      "TokenPair": [],
      "DexScreenerCollector": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/collectors/chain_data.py": {
    "path": "data\\collectors\\chain_data.py",
    "exists": true,
    "expected": [
      {
        "name": "get_block_number",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_gas_price",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_transaction",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "tx_hash",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_token_balance",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "monitor_mempool",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "AsyncGenerator",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "ChainDataCollector.__init__",
        "is_async": false,
        "lineno": 87,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_setup_connections"
        ]
      },
      {
        "name": "_setup_connections",
        "qualified_name": "ChainDataCollector._setup_connections",
        "is_async": false,
        "lineno": 141,
        "scope": "class:ChainDataCollector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Web3",
          "HTTPProvider",
          "is_connected",
          "Web3",
          "HTTPProvider",
          "inject",
          "is_connected",
          "Web3",
          "HTTPProvider",
          "inject",
          "is_connected",
          "Web3",
          "HTTPProvider",
          "is_connected",
          "print"
        ]
      },
      {
        "name": "get_web3",
        "qualified_name": "ChainDataCollector.get_web3",
        "is_async": false,
        "lineno": 173,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Web3]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "get_token_info",
        "qualified_name": "ChainDataCollector.get_token_info",
        "is_async": true,
        "lineno": 177,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[TokenInfo]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_web3",
          "to_checksum_address",
          "contract",
          "_safe_call",
          "name",
          "_safe_call",
          "symbol",
          "_safe_call",
          "decimals",
          "_safe_call",
          "totalSupply",
          "hasattr",
          "_safe_call",
          "owner",
          "get_code",
          "_check_function_in_code",
          "_check_function_in_code",
          "_check_function_in_code",
          "_check_function_in_code",
          "_get_contract_creation",
          "TokenInfo",
          "get",
          "get",
          "print"
        ]
      },
      {
        "name": "analyze_contract",
        "qualified_name": "ChainDataCollector.analyze_contract",
        "is_async": true,
        "lineno": 237,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "contract_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[ContractInfo]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_web3",
          "to_checksum_address",
          "get_code",
          "hex",
          "lower",
          "lower",
          "append",
          "lower",
          "lower",
          "_check_renounced_ownership",
          "lower",
          "ContractInfo",
          "lower",
          "lower",
          "lower",
          "print"
        ]
      },
      {
        "name": "get_liquidity_info",
        "qualified_name": "ChainDataCollector.get_liquidity_info",
        "is_async": true,
        "lineno": 296,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "pair_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[LiquidityInfo]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_web3",
          "to_checksum_address",
          "contract",
          "_safe_call",
          "getReserves",
          "_safe_call",
          "token0",
          "_safe_call",
          "token1",
          "_check_liquidity_lock",
          "LiquidityInfo",
          "get",
          "get",
          "get",
          "print"
        ]
      },
      {
        "name": "get_holder_distribution",
        "qualified_name": "ChainDataCollector.get_holder_distribution",
        "is_async": true,
        "lineno": 342,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "print"
        ]
      },
      {
        "name": "get_recent_transactions",
        "qualified_name": "ChainDataCollector.get_recent_transactions",
        "is_async": true,
        "lineno": 369,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "address",
          "chain",
          "limit"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[TransactionInfo]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_web3",
          "min",
          "range",
          "len",
          "get_block",
          "append",
          "TransactionInfo",
          "hex",
          "fromtimestamp",
          "len",
          "print"
        ]
      },
      {
        "name": "check_honeypot_onchain",
        "qualified_name": "ChainDataCollector.check_honeypot_onchain",
        "is_async": true,
        "lineno": 424,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_web3",
          "get_code",
          "hex",
          "lower",
          "lower",
          "lower",
          "lower",
          "lower",
          "lower",
          "lower",
          "lower",
          "lower",
          "lower",
          "sum",
          "values",
          "items",
          "min",
          "print",
          "str"
        ]
      },
      {
        "name": "get_gas_price",
        "qualified_name": "ChainDataCollector.get_gas_price",
        "is_async": true,
        "lineno": 474,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_web3",
          "int",
          "int",
          "get",
          "get_block",
          "print"
        ]
      },
      {
        "name": "estimate_transaction_cost",
        "qualified_name": "ChainDataCollector.estimate_transaction_cost",
        "is_async": true,
        "lineno": 494,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "from_addr",
          "to_addr",
          "value",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_web3",
          "estimate_gas",
          "from_wei",
          "print"
        ]
      },
      {
        "name": "_safe_call",
        "qualified_name": "ChainDataCollector._safe_call",
        "is_async": true,
        "lineno": 522,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "func"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "call"
        ]
      },
      {
        "name": "_check_function_in_code",
        "qualified_name": "ChainDataCollector._check_function_in_code",
        "is_async": false,
        "lineno": 529,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "code",
          "function_name"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "lower",
          "lower",
          "hex"
        ]
      },
      {
        "name": "_get_contract_creation",
        "qualified_name": "ChainDataCollector._get_contract_creation",
        "is_async": true,
        "lineno": 537,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_check_renounced_ownership",
        "qualified_name": "ChainDataCollector._check_renounced_ownership",
        "is_async": true,
        "lineno": 546,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_web3",
          "contract",
          "to_checksum_address",
          "call",
          "owner"
        ]
      },
      {
        "name": "_check_liquidity_lock",
        "qualified_name": "ChainDataCollector._check_liquidity_lock",
        "is_async": true,
        "lineno": 567,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "pair_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "get_block_number",
        "qualified_name": "ChainDataCollector.get_block_number",
        "is_async": true,
        "lineno": 581,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_web3",
          "print"
        ]
      },
      {
        "name": "get_transaction",
        "qualified_name": "ChainDataCollector.get_transaction",
        "is_async": true,
        "lineno": 602,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "tx_hash",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_web3",
          "get_transaction",
          "get_transaction_receipt",
          "hex",
          "get",
          "get",
          "get",
          "hex",
          "get",
          "print"
        ]
      },
      {
        "name": "get_token_balance",
        "qualified_name": "ChainDataCollector.get_token_balance",
        "is_async": true,
        "lineno": 640,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "address",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_web3",
          "Decimal",
          "to_checksum_address",
          "to_checksum_address",
          "contract",
          "_safe_call",
          "balanceOf",
          "_safe_call",
          "decimals",
          "Decimal",
          "Decimal",
          "Decimal",
          "print",
          "Decimal"
        ]
      },
      {
        "name": "monitor_mempool",
        "qualified_name": "ChainDataCollector.monitor_mempool",
        "is_async": true,
        "lineno": 682,
        "scope": "class:ChainDataCollector",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_web3",
          "filter",
          "get_new_entries",
          "get_transaction",
          "hex",
          "get",
          "now",
          "sleep",
          "print",
          "sleep",
          "print"
        ]
      }
    ],
    "found_classes": [
      "TokenInfo",
      "ContractInfo",
      "LiquidityInfo",
      "TransactionInfo",
      "ChainDataCollector"
    ],
    "class_bases": {
      "TokenInfo": [],
      "ContractInfo": [],
      "LiquidityInfo": [],
      "TransactionInfo": [],
      "ChainDataCollector": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/collectors/honeypot_checker.py": {
    "path": "data\\collectors\\honeypot_checker.py",
    "exists": true,
    "expected": [
      {
        "name": "check_token",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_multiple_apis",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "analyze_contract_code",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_liquidity_locks",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "batch_check",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "tokens"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_risk_score",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "check_result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "monitor_token",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain",
          "interval"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "update_blacklist",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "address",
          "reason"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "HoneypotChecker.__init__",
        "is_async": false,
        "lineno": 26,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "HoneypotChecker.initialize",
        "is_async": true,
        "lineno": 39,
        "scope": "class:HoneypotChecker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ClientSession",
          "_setup_web3_connections",
          "info"
        ]
      },
      {
        "name": "_setup_web3_connections",
        "qualified_name": "HoneypotChecker._setup_web3_connections",
        "is_async": true,
        "lineno": 45,
        "scope": "class:HoneypotChecker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Web3",
          "HTTPProvider"
        ]
      },
      {
        "name": "close",
        "qualified_name": "HoneypotChecker.close",
        "is_async": true,
        "lineno": 53,
        "scope": "class:HoneypotChecker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "close"
        ]
      },
      {
        "name": "check_token",
        "qualified_name": "HoneypotChecker.check_token",
        "is_async": true,
        "lineno": 58,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "is_valid_address",
          "_is_blacklisted",
          "time",
          "get_event_loop",
          "check_multiple_apis",
          "analyze_contract_code",
          "check_liquidity_locks",
          "_calculate_verdict",
          "time",
          "get_event_loop"
        ]
      },
      {
        "name": "check_multiple_apis",
        "qualified_name": "HoneypotChecker.check_multiple_apis",
        "is_async": true,
        "lineno": 106,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "append",
          "_check_honeypot_is",
          "get",
          "append",
          "_check_tokensniffer",
          "get",
          "append",
          "_check_goplus",
          "append",
          "_check_dextools",
          "append",
          "_check_contract_verification",
          "gather",
          "enumerate",
          "len",
          "isinstance",
          "error",
          "str"
        ]
      },
      {
        "name": "_check_honeypot_is",
        "qualified_name": "HoneypotChecker._check_honeypot_is",
        "is_async": true,
        "lineno": 140,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_chain_id",
          "get",
          "json",
          "get",
          "get",
          "float",
          "get",
          "get",
          "float",
          "get",
          "get",
          "float",
          "get",
          "get",
          "float",
          "get",
          "get",
          "get",
          "get",
          "error"
        ]
      },
      {
        "name": "_check_tokensniffer",
        "qualified_name": "HoneypotChecker._check_tokensniffer",
        "is_async": true,
        "lineno": 169,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_chain_id",
          "get",
          "json",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "error"
        ]
      },
      {
        "name": "_check_goplus",
        "qualified_name": "HoneypotChecker._check_goplus",
        "is_async": true,
        "lineno": 197,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_chain_id",
          "get",
          "json",
          "get",
          "get",
          "lower",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "float",
          "get",
          "float",
          "get",
          "int",
          "get",
          "get",
          "error"
        ]
      },
      {
        "name": "_check_dextools",
        "qualified_name": "HoneypotChecker._check_dextools",
        "is_async": true,
        "lineno": 228,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "error"
        ]
      },
      {
        "name": "_check_contract_verification",
        "qualified_name": "HoneypotChecker._check_contract_verification",
        "is_async": true,
        "lineno": 242,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "error"
        ]
      },
      {
        "name": "analyze_contract_code",
        "qualified_name": "HoneypotChecker.analyze_contract_code",
        "is_async": true,
        "lineno": 255,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_chain_id",
          "get_code",
          "hex",
          "lower",
          "append",
          "_check_erc20_interface",
          "len",
          "len",
          "min",
          "len",
          "error",
          "str"
        ]
      },
      {
        "name": "_check_erc20_interface",
        "qualified_name": "HoneypotChecker._check_erc20_interface",
        "is_async": false,
        "lineno": 300,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "w3",
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "contract",
          "call",
          "totalSupply"
        ]
      },
      {
        "name": "check_liquidity_locks",
        "qualified_name": "HoneypotChecker.check_liquidity_locks",
        "is_async": true,
        "lineno": 319,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "error",
          "str"
        ]
      },
      {
        "name": "_is_blacklisted",
        "qualified_name": "HoneypotChecker._is_blacklisted",
        "is_async": false,
        "lineno": 338,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "lower"
        ]
      },
      {
        "name": "_get_chain_id",
        "qualified_name": "HoneypotChecker._get_chain_id",
        "is_async": false,
        "lineno": 346,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "lower"
        ]
      },
      {
        "name": "_calculate_verdict",
        "qualified_name": "HoneypotChecker._calculate_verdict",
        "is_async": false,
        "lineno": 361,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "checks"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "isinstance",
          "get",
          "append",
          "append",
          "append",
          "get",
          "get",
          "float",
          "append",
          "append",
          "append",
          "float",
          "append",
          "append",
          "append",
          "get",
          "float",
          "append",
          "append",
          "append",
          "get",
          "get",
          "append",
          "append",
          "append",
          "get",
          "append",
          "append",
          "append",
          "get",
          "append",
          "append",
          "append",
          "get",
          "append",
          "append",
          "append",
          "get",
          "append",
          "append",
          "append",
          "get",
          "get",
          "append",
          "append",
          "append",
          "get",
          "append",
          "append",
          "append",
          "get",
          "append",
          "append",
          "append",
          "get",
          "get",
          "append",
          "append",
          "append",
          "get",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "len",
          "len",
          "len",
          "join"
        ]
      },
      {
        "name": "batch_check",
        "qualified_name": "HoneypotChecker.batch_check",
        "is_async": true,
        "lineno": 500,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "tokens"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append",
          "check_token",
          "gather",
          "enumerate",
          "isinstance",
          "error",
          "append",
          "str",
          "append"
        ]
      },
      {
        "name": "get_risk_score",
        "qualified_name": "HoneypotChecker.get_risk_score",
        "is_async": false,
        "lineno": 523,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "check_result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "len",
          "min"
        ]
      },
      {
        "name": "monitor_token",
        "qualified_name": "HoneypotChecker.monitor_token",
        "is_async": true,
        "lineno": 540,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address",
          "chain",
          "interval"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "check_token",
          "get",
          "warning",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "update_blacklist",
        "qualified_name": "HoneypotChecker.update_blacklist",
        "is_async": false,
        "lineno": 557,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address",
          "reason"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "lower",
          "add",
          "info"
        ]
      },
      {
        "name": "remove_from_blacklist",
        "qualified_name": "HoneypotChecker.remove_from_blacklist",
        "is_async": false,
        "lineno": 563,
        "scope": "class:HoneypotChecker",
        "params": [
          "self",
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "lower",
          "discard",
          "info"
        ]
      },
      {
        "name": "get_statistics",
        "qualified_name": "HoneypotChecker.get_statistics",
        "is_async": false,
        "lineno": 569,
        "scope": "class:HoneypotChecker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "len",
          "len",
          "len",
          "sum",
          "values"
        ]
      }
    ],
    "found_classes": [
      "HoneypotChecker"
    ],
    "class_bases": {
      "HoneypotChecker": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/collectors/whale_tracker.py": {
    "path": "data\\collectors\\whale_tracker.py",
    "exists": true,
    "expected": [
      {
        "name": "track_whale_movements",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "identify_whale_wallets",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "analyze_whale_behavior",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "wallet",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_whale_impact_score",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "movements"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "monitor_whale_alerts",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token",
          "chain",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "WhaleTracker.__init__",
        "is_async": false,
        "lineno": 29,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "TTLCache",
          "set"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "WhaleTracker.initialize",
        "is_async": true,
        "lineno": 54,
        "scope": "class:WhaleTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ClientSession",
          "_setup_web3_connections",
          "_load_known_whales",
          "info"
        ]
      },
      {
        "name": "_setup_web3_connections",
        "qualified_name": "WhaleTracker._setup_web3_connections",
        "is_async": true,
        "lineno": 61,
        "scope": "class:WhaleTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Web3",
          "HTTPProvider"
        ]
      },
      {
        "name": "_load_known_whales",
        "qualified_name": "WhaleTracker._load_known_whales",
        "is_async": true,
        "lineno": 69,
        "scope": "class:WhaleTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "update"
        ]
      },
      {
        "name": "close",
        "qualified_name": "WhaleTracker.close",
        "is_async": true,
        "lineno": 83,
        "scope": "class:WhaleTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "close"
        ]
      },
      {
        "name": "track_whale_movements",
        "qualified_name": "WhaleTracker.track_whale_movements",
        "is_async": true,
        "lineno": 88,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "is_valid_address",
          "_get_chain_id",
          "identify_whale_wallets",
          "_track_recent_transfers",
          "analyze_whale_behavior",
          "get_whale_impact_score",
          "len",
          "_calculate_risk_level",
          "_generate_recommendation"
        ]
      },
      {
        "name": "identify_whale_wallets",
        "qualified_name": "WhaleTracker.identify_whale_wallets",
        "is_async": true,
        "lineno": 126,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_chain_id",
          "_get_top_holders",
          "get",
          "get",
          "append",
          "add",
          "error"
        ]
      },
      {
        "name": "_get_top_holders",
        "qualified_name": "WhaleTracker._get_top_holders",
        "is_async": true,
        "lineno": 152,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "token",
          "chain_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_erc20_abi",
          "contract",
          "get_block_number",
          "max",
          "get_logs",
          "get",
          "get",
          "_get_token_price",
          "_get_token_decimals",
          "items",
          "format_token_amount",
          "float",
          "append",
          "float",
          "sort",
          "error"
        ]
      },
      {
        "name": "_track_recent_transfers",
        "qualified_name": "WhaleTracker._track_recent_transfers",
        "is_async": true,
        "lineno": 216,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "token",
          "whale_wallets",
          "chain_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_erc20_abi",
          "contract",
          "get_block_number",
          "max",
          "get_logs",
          "get_logs",
          "get_block",
          "append",
          "get",
          "hex",
          "get_block",
          "append",
          "get",
          "hex",
          "sort",
          "error"
        ]
      },
      {
        "name": "analyze_whale_behavior",
        "qualified_name": "WhaleTracker.analyze_whale_behavior",
        "is_async": true,
        "lineno": 283,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "wallet",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_chain_id",
          "_get_wallet_history",
          "get",
          "len",
          "set",
          "sum",
          "get",
          "sum",
          "get",
          "max",
          "len",
          "max",
          "len",
          "error",
          "str"
        ]
      },
      {
        "name": "_get_wallet_history",
        "qualified_name": "WhaleTracker._get_wallet_history",
        "is_async": true,
        "lineno": 339,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "wallet",
          "chain_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "error"
        ]
      },
      {
        "name": "get_whale_impact_score",
        "qualified_name": "WhaleTracker.get_whale_impact_score",
        "is_async": false,
        "lineno": 350,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "movements"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "timestamp",
          "now",
          "get",
          "sum",
          "get",
          "sum",
          "get",
          "get",
          "sum",
          "get",
          "get",
          "len",
          "len",
          "set",
          "get",
          "max",
          "min"
        ]
      },
      {
        "name": "_calculate_risk_level",
        "qualified_name": "WhaleTracker._calculate_risk_level",
        "is_async": false,
        "lineno": 409,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "impact_score",
          "movements"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_generate_recommendation",
        "qualified_name": "WhaleTracker._generate_recommendation",
        "is_async": false,
        "lineno": 420,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "impact_score",
          "movements"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_chain_id",
        "qualified_name": "WhaleTracker._get_chain_id",
        "is_async": false,
        "lineno": 431,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "lower"
        ]
      },
      {
        "name": "_get_erc20_abi",
        "qualified_name": "WhaleTracker._get_erc20_abi",
        "is_async": false,
        "lineno": 446,
        "scope": "class:WhaleTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_token_decimals",
        "qualified_name": "WhaleTracker._get_token_decimals",
        "is_async": true,
        "lineno": 482,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "contract"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "call",
          "decimals"
        ]
      },
      {
        "name": "_get_token_price",
        "qualified_name": "WhaleTracker._get_token_price",
        "is_async": true,
        "lineno": 489,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "token",
          "chain_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "monitor_whale_alerts",
        "qualified_name": "WhaleTracker.monitor_whale_alerts",
        "is_async": true,
        "lineno": 498,
        "scope": "class:WhaleTracker",
        "params": [
          "self",
          "token",
          "chain",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "track_whale_movements",
          "get",
          "callback",
          "now",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "get_statistics",
        "qualified_name": "WhaleTracker.get_statistics",
        "is_async": false,
        "lineno": 519,
        "scope": "class:WhaleTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "len",
          "len",
          "sum",
          "len",
          "values",
          "sum",
          "values"
        ]
      }
    ],
    "found_classes": [
      "WhaleTracker"
    ],
    "class_bases": {
      "WhaleTracker": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/collectors/mempool_monitor.py": {
    "path": "data\\collectors\\mempool_monitor.py",
    "exists": true,
    "expected": [
      {
        "name": "monitor_mempool",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "AsyncGenerator",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "detect_frontrun_risk",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "analyze_pending_tx",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "tx_hash"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_mempool_stats",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "MempoolMonitor.__init__",
        "is_async": false,
        "lineno": 57,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_setup_connections",
          "set",
          "get",
          "get",
          "_load_mev_bots"
        ]
      },
      {
        "name": "_setup_connections",
        "qualified_name": "MempoolMonitor._setup_connections",
        "is_async": false,
        "lineno": 103,
        "scope": "class:MempoolMonitor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Web3",
          "WebsocketProvider",
          "is_connected",
          "Web3",
          "WebsocketProvider",
          "is_connected",
          "print"
        ]
      },
      {
        "name": "_load_mev_bots",
        "qualified_name": "MempoolMonitor._load_mev_bots",
        "is_async": false,
        "lineno": 121,
        "scope": "class:MempoolMonitor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Set[str]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "start_monitoring",
        "qualified_name": "MempoolMonitor.start_monitoring",
        "is_async": true,
        "lineno": 130,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "print",
          "subscribe",
          "_process_pending_tx",
          "print"
        ]
      },
      {
        "name": "stop_monitoring",
        "qualified_name": "MempoolMonitor.stop_monitoring",
        "is_async": true,
        "lineno": 149,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "unsubscribe",
          "print"
        ]
      },
      {
        "name": "_process_pending_tx",
        "qualified_name": "MempoolMonitor._process_pending_tx",
        "is_async": true,
        "lineno": 160,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "tx_hash",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_transaction",
          "PendingTransaction",
          "hex",
          "_decode_swap",
          "get",
          "get",
          "get",
          "hex",
          "lower",
          "check_sandwich_risk",
          "hex",
          "append",
          "hex",
          "now",
          "_cleanup_old_txs",
          "print"
        ]
      },
      {
        "name": "check_sandwich_risk",
        "qualified_name": "MempoolMonitor.check_sandwich_risk",
        "is_async": true,
        "lineno": 212,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "tx_hash"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "SandwichRisk",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "SandwichRisk",
          "items",
          "append",
          "append",
          "abs",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "len",
          "append",
          "len",
          "any",
          "values",
          "append",
          "SandwichRisk",
          "min",
          "join",
          "print",
          "SandwichRisk"
        ]
      },
      {
        "name": "detect_mev_opportunities",
        "qualified_name": "MempoolMonitor.detect_mev_opportunities",
        "is_async": true,
        "lineno": 314,
        "scope": "class:MempoolMonitor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[MEVOpportunity]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_detect_arbitrage",
          "extend",
          "_detect_liquidations",
          "extend",
          "sort",
          "print"
        ]
      },
      {
        "name": "_detect_arbitrage",
        "qualified_name": "MempoolMonitor._detect_arbitrage",
        "is_async": true,
        "lineno": 336,
        "scope": "class:MempoolMonitor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[MEVOpportunity]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "defaultdict",
          "items",
          "append",
          "items",
          "len",
          "append",
          "max",
          "min",
          "max",
          "min",
          "append",
          "MEVOpportunity",
          "print"
        ]
      },
      {
        "name": "_detect_liquidations",
        "qualified_name": "MempoolMonitor._detect_liquidations",
        "is_async": true,
        "lineno": 381,
        "scope": "class:MempoolMonitor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[MEVOpportunity]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_decode_swap",
        "qualified_name": "MempoolMonitor._decode_swap",
        "is_async": false,
        "lineno": 387,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "input_data",
          "router_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "get",
          "len",
          "len",
          "print"
        ]
      },
      {
        "name": "_cleanup_old_txs",
        "qualified_name": "MempoolMonitor._cleanup_old_txs",
        "is_async": false,
        "lineno": 420,
        "scope": "class:MempoolMonitor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "now",
          "timedelta",
          "items",
          "print"
        ]
      },
      {
        "name": "get_gas_prices",
        "qualified_name": "MempoolMonitor.get_gas_prices",
        "is_async": true,
        "lineno": 436,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "values",
          "sort",
          "int",
          "len",
          "int",
          "len",
          "int",
          "len",
          "int",
          "len",
          "int",
          "len",
          "int",
          "int",
          "int",
          "int",
          "print"
        ]
      },
      {
        "name": "monitor_token_mempool",
        "qualified_name": "MempoolMonitor.monitor_token_mempool",
        "is_async": true,
        "lineno": 474,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "add",
          "values",
          "sum",
          "lower",
          "sum",
          "lower",
          "sum",
          "lower",
          "str",
          "sum",
          "lower",
          "str",
          "any",
          "len",
          "len",
          "any",
          "values",
          "now",
          "print"
        ]
      },
      {
        "name": "add_mev_bot",
        "qualified_name": "MempoolMonitor.add_mev_bot",
        "is_async": false,
        "lineno": 512,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "add",
          "lower"
        ]
      },
      {
        "name": "get_mempool_stats",
        "qualified_name": "MempoolMonitor.get_mempool_stats",
        "is_async": false,
        "lineno": 519,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "len",
          "len",
          "len",
          "min",
          "values",
          "max",
          "values",
          "print",
          "str"
        ]
      },
      {
        "name": "monitor_mempool",
        "qualified_name": "MempoolMonitor.monitor_mempool",
        "is_async": true,
        "lineno": 566,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "create_task",
          "start_monitoring",
          "list",
          "items",
          "sleep",
          "cancel",
          "stop_monitoring"
        ]
      },
      {
        "name": "detect_frontrun_risk",
        "qualified_name": "MempoolMonitor.detect_frontrun_risk",
        "is_async": true,
        "lineno": 606,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "check_sandwich_risk",
          "get",
          "get_gas_prices",
          "get",
          "get"
        ]
      },
      {
        "name": "analyze_pending_tx",
        "qualified_name": "MempoolMonitor.analyze_pending_tx",
        "is_async": true,
        "lineno": 640,
        "scope": "class:MempoolMonitor",
        "params": [
          "self",
          "tx_hash"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "check_sandwich_risk",
          "detect_frontrun_risk",
          "items",
          "get_transaction",
          "_process_pending_tx",
          "analyze_pending_tx"
        ]
      }
    ],
    "found_classes": [
      "PendingTransaction",
      "SandwichRisk",
      "MEVOpportunity",
      "MempoolMonitor"
    ],
    "class_bases": {
      "PendingTransaction": [],
      "SandwichRisk": [],
      "MEVOpportunity": [],
      "MempoolMonitor": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/collectors/social_data.py": {
    "path": "data\\collectors\\social_data.py",
    "exists": true,
    "expected": [
      {
        "name": "collect_social_metrics",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_address",
          "symbol",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "SocialMetrics",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "monitor_trending",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "AsyncGenerator",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_influencer_mentions",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_symbol",
          "hours"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "analyze_social_velocity",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_address",
          "symbol"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_social_score",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "SocialDataCollector.__init__",
        "is_async": false,
        "lineno": 80,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "TTLCache",
          "TTLCache"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "SocialDataCollector.initialize",
        "is_async": true,
        "lineno": 123,
        "scope": "class:SocialDataCollector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "_load_influencers",
          "_test_connections",
          "info"
        ]
      },
      {
        "name": "collect_social_metrics",
        "qualified_name": "SocialDataCollector.collect_social_metrics",
        "is_async": true,
        "lineno": 137,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "token_address",
          "symbol",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "SocialMetrics",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "_collect_twitter_data",
          "_collect_reddit_data",
          "_collect_telegram_data",
          "get",
          "get",
          "get",
          "_calculate_overall_sentiment",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "len",
          "set",
          "get",
          "get",
          "get",
          "_count_influential_mentions",
          "_calculate_fomo_index",
          "_calculate_fear_index",
          "_count_negative_keywords",
          "get",
          "get",
          "_calculate_trending_score",
          "_get_previous_metrics",
          "get",
          "SocialMetrics",
          "_classify_sentiment",
          "set",
          "_store_metrics",
          "error"
        ]
      },
      {
        "name": "_collect_twitter_data",
        "qualified_name": "SocialDataCollector._collect_twitter_data",
        "is_async": true,
        "lineno": 266,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "symbol"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "ClientSession",
          "get",
          "json",
          "get",
          "append",
          "get",
          "append",
          "get",
          "get",
          "get",
          "get",
          "get",
          "len",
          "error"
        ]
      },
      {
        "name": "_collect_reddit_data",
        "qualified_name": "SocialDataCollector._collect_reddit_data",
        "is_async": true,
        "lineno": 319,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "symbol"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "BasicAuth",
          "ClientSession",
          "post",
          "json",
          "get",
          "json",
          "get",
          "get",
          "get",
          "append",
          "append",
          "append",
          "get",
          "get",
          "len",
          "error"
        ]
      },
      {
        "name": "_collect_telegram_data",
        "qualified_name": "SocialDataCollector._collect_telegram_data",
        "is_async": true,
        "lineno": 394,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "symbol"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_overall_sentiment",
        "qualified_name": "SocialDataCollector._calculate_overall_sentiment",
        "is_async": true,
        "lineno": 400,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "messages"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "TextBlob",
          "lower",
          "max",
          "min",
          "append",
          "mean"
        ]
      },
      {
        "name": "_classify_sentiment",
        "qualified_name": "SocialDataCollector._classify_sentiment",
        "is_async": false,
        "lineno": 434,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "SentimentLevel",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_count_influential_mentions",
        "qualified_name": "SocialDataCollector._count_influential_mentions",
        "is_async": true,
        "lineno": 447,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "twitter_data",
          "reddit_data",
          "telegram_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_fomo_index",
        "qualified_name": "SocialDataCollector._calculate_fomo_index",
        "is_async": false,
        "lineno": 462,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "mentions",
          "sentiment",
          "engagement"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "min",
          "min"
        ]
      },
      {
        "name": "_calculate_fear_index",
        "qualified_name": "SocialDataCollector._calculate_fear_index",
        "is_async": false,
        "lineno": 482,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "sentiment",
          "negative_count"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "max",
          "min",
          "min"
        ]
      },
      {
        "name": "_calculate_trending_score",
        "qualified_name": "SocialDataCollector._calculate_trending_score",
        "is_async": false,
        "lineno": 498,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "mentions",
          "engagement",
          "unique_users"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "min",
          "min",
          "min"
        ]
      },
      {
        "name": "_count_negative_keywords",
        "qualified_name": "SocialDataCollector._count_negative_keywords",
        "is_async": false,
        "lineno": 517,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "messages"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "lower"
        ]
      },
      {
        "name": "_get_previous_metrics",
        "qualified_name": "SocialDataCollector._get_previous_metrics",
        "is_async": true,
        "lineno": 527,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict[str, Any]]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_store_metrics",
        "qualified_name": "SocialDataCollector._store_metrics",
        "is_async": true,
        "lineno": 536,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_load_influencers",
        "qualified_name": "SocialDataCollector._load_influencers",
        "is_async": true,
        "lineno": 541,
        "scope": "class:SocialDataCollector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_test_connections",
        "qualified_name": "SocialDataCollector._test_connections",
        "is_async": true,
        "lineno": 551,
        "scope": "class:SocialDataCollector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "ClientSession",
          "get",
          "info",
          "warning",
          "error"
        ]
      },
      {
        "name": "monitor_trending",
        "qualified_name": "SocialDataCollector.monitor_trending",
        "is_async": true,
        "lineno": 568,
        "scope": "class:SocialDataCollector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "AsyncGenerator[List[str], None]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_trending_tokens",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_get_trending_tokens",
        "qualified_name": "SocialDataCollector._get_trending_tokens",
        "is_async": true,
        "lineno": 585,
        "scope": "class:SocialDataCollector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "get_influencer_mentions",
        "qualified_name": "SocialDataCollector.get_influencer_mentions",
        "is_async": true,
        "lineno": 594,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "token_symbol",
          "hours"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[InfluencerMention]",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "analyze_social_velocity",
        "qualified_name": "SocialDataCollector.analyze_social_velocity",
        "is_async": true,
        "lineno": 607,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "token_address",
          "symbol"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "total_seconds",
          "len"
        ]
      },
      {
        "name": "calculate_social_score",
        "qualified_name": "SocialDataCollector.calculate_social_score",
        "is_async": false,
        "lineno": 657,
        "scope": "class:SocialDataCollector",
        "params": [
          "self",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "min",
          "max",
          "min"
        ]
      }
    ],
    "found_classes": [
      "SentimentLevel",
      "SocialPlatform",
      "SocialMetrics",
      "InfluencerMention",
      "SocialDataCollector"
    ],
    "class_bases": {
      "SentimentLevel": [
        "Enum"
      ],
      "SocialPlatform": [
        "Enum"
      ],
      "SocialMetrics": [],
      "InfluencerMention": [],
      "SocialDataCollector": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/collectors/volume_analyzer.py": {
    "path": "data\\collectors\\volume_analyzer.py",
    "exists": true,
    "expected": [
      {
        "name": "analyze_volume",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_address",
          "chain",
          "time_window"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "VolumeProfile",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_detect_wash_trading",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_identify_patterns",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_find_trade_clusters",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "monitor_volume_health",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_address",
          "chain",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "VolumeAnalyzer.__init__",
        "is_async": false,
        "lineno": 74,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "defaultdict",
          "deque",
          "defaultdict",
          "set",
          "set",
          "info"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "VolumeAnalyzer.initialize",
        "is_async": true,
        "lineno": 99,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_load_known_wash_traders",
          "_load_bot_addresses",
          "info"
        ]
      },
      {
        "name": "analyze_volume",
        "qualified_name": "VolumeAnalyzer.analyze_volume",
        "is_async": true,
        "lineno": 107,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "token_address",
          "chain",
          "time_window"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "VolumeProfile",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "_fetch_trades",
          "_empty_profile",
          "_detect_wash_trading",
          "_identify_patterns",
          "_find_trade_clusters",
          "_separate_volume",
          "len",
          "set",
          "set",
          "_analyze_dex_distribution",
          "_analyze_time_distribution",
          "_analyze_trader_types",
          "_analyze_smart_money",
          "append",
          "append",
          "append",
          "len",
          "append",
          "_calculate_confidence",
          "len",
          "_calculate_time_coverage",
          "VolumeProfile",
          "sum",
          "Decimal",
          "str",
          "_calculate_avg_trade_size",
          "_calculate_velocity",
          "warning",
          "error",
          "_empty_profile"
        ]
      },
      {
        "name": "_detect_wash_trading",
        "qualified_name": "VolumeAnalyzer._detect_wash_trading",
        "is_async": true,
        "lineno": 201,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "_detect_circular_trades",
          "append",
          "_analyze_trade_timing",
          "append",
          "_analyze_trade_sizes",
          "append",
          "_analyze_address_patterns",
          "append",
          "_analyze_price_impact",
          "append",
          "min",
          "sum"
        ]
      },
      {
        "name": "_detect_circular_trades",
        "qualified_name": "VolumeAnalyzer._detect_circular_trades",
        "is_async": true,
        "lineno": 235,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "defaultdict",
          "defaultdict"
        ]
      },
      {
        "name": "_analyze_trade_timing",
        "qualified_name": "VolumeAnalyzer._analyze_trade_timing",
        "is_async": false,
        "lineno": 258,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "sorted",
          "range",
          "len",
          "mean",
          "len",
          "stdev"
        ]
      },
      {
        "name": "_analyze_trade_sizes",
        "qualified_name": "VolumeAnalyzer._analyze_trade_sizes",
        "is_async": false,
        "lineno": 287,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "len",
          "abs",
          "Decimal",
          "append",
          "append",
          "max",
          "len",
          "len",
          "min"
        ]
      },
      {
        "name": "_analyze_address_patterns",
        "qualified_name": "VolumeAnalyzer._analyze_address_patterns",
        "is_async": false,
        "lineno": 311,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "append",
          "len",
          "len",
          "set",
          "sum",
          "min"
        ]
      },
      {
        "name": "_analyze_price_impact",
        "qualified_name": "VolumeAnalyzer._analyze_price_impact",
        "is_async": true,
        "lineno": 332,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "range",
          "len",
          "abs",
          "append",
          "mean",
          "sum",
          "Decimal",
          "str",
          "float"
        ]
      },
      {
        "name": "_identify_patterns",
        "qualified_name": "VolumeAnalyzer._identify_patterns",
        "is_async": true,
        "lineno": 360,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[VolumePattern]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_detect_wash_trading",
          "append",
          "_detect_bot_trading",
          "append",
          "_detect_pump_pattern",
          "append",
          "_detect_accumulation_distribution",
          "append",
          "_detect_breakout",
          "append",
          "append"
        ]
      },
      {
        "name": "_detect_bot_trading",
        "qualified_name": "VolumeAnalyzer._detect_bot_trading",
        "is_async": false,
        "lineno": 392,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sum",
          "len",
          "range",
          "len",
          "append",
          "len",
          "len",
          "str",
          "sum",
          "endswith",
          "len"
        ]
      },
      {
        "name": "_detect_pump_pattern",
        "qualified_name": "VolumeAnalyzer._detect_pump_pattern",
        "is_async": false,
        "lineno": 419,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "sorted",
          "len",
          "len",
          "sum",
          "Decimal",
          "str",
          "sum",
          "Decimal",
          "str"
        ]
      },
      {
        "name": "_detect_accumulation_distribution",
        "qualified_name": "VolumeAnalyzer._detect_accumulation_distribution",
        "is_async": false,
        "lineno": 442,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[VolumePattern]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "sum",
          "Decimal",
          "str",
          "get",
          "sum",
          "Decimal",
          "str",
          "get"
        ]
      },
      {
        "name": "_detect_breakout",
        "qualified_name": "VolumeAnalyzer._detect_breakout",
        "is_async": false,
        "lineno": 463,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "Decimal",
          "str",
          "mean",
          "mean"
        ]
      },
      {
        "name": "_find_trade_clusters",
        "qualified_name": "VolumeAnalyzer._find_trade_clusters",
        "is_async": true,
        "lineno": 474,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[TradeCluster]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "set",
          "enumerate",
          "add",
          "enumerate",
          "_calculate_trade_similarity",
          "append",
          "update",
          "add",
          "len",
          "TradeCluster",
          "sum",
          "Decimal",
          "str",
          "timedelta",
          "max",
          "min",
          "append"
        ]
      },
      {
        "name": "_calculate_trade_similarity",
        "qualified_name": "VolumeAnalyzer._calculate_trade_similarity",
        "is_async": false,
        "lineno": 512,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trade1",
          "trade2"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "abs",
          "max",
          "append",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "abs",
          "max",
          "max",
          "Decimal",
          "append",
          "float",
          "len",
          "append",
          "sum"
        ]
      },
      {
        "name": "_separate_volume",
        "qualified_name": "VolumeAnalyzer._separate_volume",
        "is_async": true,
        "lineno": 537,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades",
          "clusters"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[Decimal, Decimal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "set",
          "enumerate",
          "add",
          "Decimal",
          "Decimal",
          "enumerate",
          "Decimal",
          "str"
        ]
      },
      {
        "name": "_analyze_dex_distribution",
        "qualified_name": "VolumeAnalyzer._analyze_dex_distribution",
        "is_async": true,
        "lineno": 567,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Decimal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "defaultdict",
          "get",
          "Decimal",
          "str",
          "dict"
        ]
      },
      {
        "name": "_analyze_time_distribution",
        "qualified_name": "VolumeAnalyzer._analyze_time_distribution",
        "is_async": false,
        "lineno": 578,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[int, Decimal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "defaultdict",
          "fromtimestamp",
          "Decimal",
          "str",
          "dict"
        ]
      },
      {
        "name": "_analyze_trader_types",
        "qualified_name": "VolumeAnalyzer._analyze_trader_types",
        "is_async": true,
        "lineno": 589,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[float, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "str",
          "float",
          "float"
        ]
      },
      {
        "name": "_analyze_smart_money",
        "qualified_name": "VolumeAnalyzer._analyze_smart_money",
        "is_async": true,
        "lineno": 612,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "Decimal",
          "sum",
          "Decimal",
          "str",
          "get",
          "sum",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "_calculate_avg_trade_size",
        "qualified_name": "VolumeAnalyzer._calculate_avg_trade_size",
        "is_async": false,
        "lineno": 639,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "sum",
          "Decimal",
          "str",
          "len"
        ]
      },
      {
        "name": "_calculate_velocity",
        "qualified_name": "VolumeAnalyzer._calculate_velocity",
        "is_async": false,
        "lineno": 647,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "defaultdict",
          "Decimal",
          "str",
          "len",
          "sorted",
          "keys",
          "range",
          "len",
          "float",
          "append",
          "mean"
        ]
      },
      {
        "name": "_calculate_time_coverage",
        "qualified_name": "VolumeAnalyzer._calculate_time_coverage",
        "is_async": false,
        "lineno": 674,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades",
          "expected_hours"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "set",
          "add",
          "len",
          "min"
        ]
      },
      {
        "name": "_calculate_confidence",
        "qualified_name": "VolumeAnalyzer._calculate_confidence",
        "is_async": false,
        "lineno": 688,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "trades_count",
          "unique_traders",
          "time_coverage"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "mean"
        ]
      },
      {
        "name": "_fetch_trades",
        "qualified_name": "VolumeAnalyzer._fetch_trades",
        "is_async": true,
        "lineno": 722,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "token_address",
          "chain",
          "hours"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_load_known_wash_traders",
        "qualified_name": "VolumeAnalyzer._load_known_wash_traders",
        "is_async": true,
        "lineno": 733,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_load_bot_addresses",
        "qualified_name": "VolumeAnalyzer._load_bot_addresses",
        "is_async": true,
        "lineno": 738,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_empty_profile",
        "qualified_name": "VolumeAnalyzer._empty_profile",
        "is_async": false,
        "lineno": 743,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "VolumeProfile",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "VolumeProfile",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "monitor_volume_health",
        "qualified_name": "VolumeAnalyzer.monitor_volume_health",
        "is_async": true,
        "lineno": 765,
        "scope": "class:VolumeAnalyzer",
        "params": [
          "self",
          "token_address",
          "chain",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "analyze_volume",
          "callback",
          "sleep",
          "error",
          "sleep"
        ]
      }
    ],
    "found_classes": [
      "VolumePattern",
      "VolumeProfile",
      "TradeCluster",
      "VolumeAnalyzer"
    ],
    "class_bases": {
      "VolumePattern": [
        "Enum"
      ],
      "VolumeProfile": [],
      "TradeCluster": [],
      "VolumeAnalyzer": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/collectors/token_sniffer.py": {
    "path": "data\\collectors\\token_sniffer.py",
    "exists": true,
    "expected": [
      {
        "name": "analyze_token",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_address",
          "chain",
          "deep_scan"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TokenAnalysis",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_check_token_sniffer",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_check_goplus",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_check_honeypot",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_check_dextools",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "batch_analyze",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "tokens",
          "deep_scan"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "monitor_token",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_address",
          "chain",
          "interval",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "TokenSniffer.__init__",
        "is_async": false,
        "lineno": 96,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "set",
          "set",
          "info"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "TokenSniffer.initialize",
        "is_async": true,
        "lineno": 127,
        "scope": "class:TokenSniffer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ClientSession",
          "_load_known_scams",
          "_load_lists",
          "info"
        ]
      },
      {
        "name": "cleanup",
        "qualified_name": "TokenSniffer.cleanup",
        "is_async": true,
        "lineno": 134,
        "scope": "class:TokenSniffer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "close"
        ]
      },
      {
        "name": "analyze_token",
        "qualified_name": "TokenSniffer.analyze_token",
        "is_async": true,
        "lineno": 141,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "token_address",
          "chain",
          "deep_scan"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TokenAnalysis",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "lower",
          "_create_blacklisted_result",
          "lower",
          "info",
          "_check_token_sniffer",
          "append",
          "_check_goplus",
          "append",
          "_check_honeypot",
          "append",
          "_check_dextools",
          "append",
          "_analyze_onchain",
          "append",
          "_combine_analysis_data",
          "_calculate_risk",
          "_find_similar_scams",
          "get",
          "get",
          "_generate_recommendations",
          "TokenAnalysis",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "_calculate_confidence",
          "add",
          "lower",
          "warning",
          "error",
          "_create_error_result",
          "str"
        ]
      },
      {
        "name": "_check_token_sniffer",
        "qualified_name": "TokenSniffer._check_token_sniffer",
        "is_async": true,
        "lineno": 256,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "json",
          "_parse_token_sniffer_response",
          "error"
        ]
      },
      {
        "name": "_check_goplus",
        "qualified_name": "TokenSniffer._check_goplus",
        "is_async": true,
        "lineno": 275,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_chain_id",
          "get",
          "json",
          "_parse_goplus_response",
          "error"
        ]
      },
      {
        "name": "_check_honeypot",
        "qualified_name": "TokenSniffer._check_honeypot",
        "is_async": true,
        "lineno": 292,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "json",
          "_parse_honeypot_response",
          "error"
        ]
      },
      {
        "name": "_check_dextools",
        "qualified_name": "TokenSniffer._check_dextools",
        "is_async": true,
        "lineno": 307,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_dextools_chain",
          "get",
          "json",
          "_parse_dextools_response",
          "error"
        ]
      },
      {
        "name": "_analyze_onchain",
        "qualified_name": "TokenSniffer._analyze_onchain",
        "is_async": true,
        "lineno": 327,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_parse_token_sniffer_response",
        "qualified_name": "TokenSniffer._parse_token_sniffer_response",
        "is_async": false,
        "lineno": 339,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_parse_goplus_response",
        "qualified_name": "TokenSniffer._parse_goplus_response",
        "is_async": false,
        "lineno": 351,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "data",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "lower",
          "get",
          "float",
          "get",
          "float",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "int",
          "get",
          "get"
        ]
      },
      {
        "name": "_parse_honeypot_response",
        "qualified_name": "TokenSniffer._parse_honeypot_response",
        "is_async": false,
        "lineno": 368,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_parse_dextools_response",
        "qualified_name": "TokenSniffer._parse_dextools_response",
        "is_async": false,
        "lineno": 382,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_combine_analysis_data",
        "qualified_name": "TokenSniffer._combine_analysis_data",
        "is_async": false,
        "lineno": 395,
        "scope": "class:TokenSniffer",
        "params": [
          "self"
        ],
        "has_varargs": true,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "max",
          "get",
          "extend"
        ]
      },
      {
        "name": "_calculate_risk",
        "qualified_name": "TokenSniffer._calculate_risk",
        "is_async": false,
        "lineno": 447,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[float, TokenRisk, List[TokenFlag]]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "append",
          "get",
          "get",
          "append",
          "get",
          "append",
          "get",
          "get",
          "append",
          "get",
          "get",
          "append",
          "get",
          "get",
          "append",
          "get",
          "get",
          "append",
          "get",
          "get",
          "append"
        ]
      },
      {
        "name": "_find_similar_scams",
        "qualified_name": "TokenSniffer._find_similar_scams",
        "is_async": true,
        "lineno": 509,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "name",
          "symbol"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "get",
          "lower",
          "lower",
          "lower",
          "lower",
          "lower",
          "lower",
          "get",
          "lower",
          "lower",
          "lower",
          "lower",
          "append",
          "get",
          "get",
          "get",
          "sorted"
        ]
      },
      {
        "name": "_generate_recommendations",
        "qualified_name": "TokenSniffer._generate_recommendations",
        "is_async": false,
        "lineno": 544,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "risk_level",
          "flags"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append"
        ]
      },
      {
        "name": "_calculate_confidence",
        "qualified_name": "TokenSniffer._calculate_confidence",
        "is_async": false,
        "lineno": 579,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "sources_checked"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len"
        ]
      },
      {
        "name": "_get_chain_id",
        "qualified_name": "TokenSniffer._get_chain_id",
        "is_async": false,
        "lineno": 584,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "_get_dextools_chain",
        "qualified_name": "TokenSniffer._get_dextools_chain",
        "is_async": false,
        "lineno": 595,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "_load_known_scams",
        "qualified_name": "TokenSniffer._load_known_scams",
        "is_async": true,
        "lineno": 606,
        "scope": "class:TokenSniffer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_load_lists",
        "qualified_name": "TokenSniffer._load_lists",
        "is_async": true,
        "lineno": 612,
        "scope": "class:TokenSniffer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_create_blacklisted_result",
        "qualified_name": "TokenSniffer._create_blacklisted_result",
        "is_async": false,
        "lineno": 618,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TokenAnalysis",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "TokenAnalysis"
        ]
      },
      {
        "name": "_create_error_result",
        "qualified_name": "TokenSniffer._create_error_result",
        "is_async": false,
        "lineno": 639,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "token_address",
          "chain",
          "error"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TokenAnalysis",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "TokenAnalysis"
        ]
      },
      {
        "name": "batch_analyze",
        "qualified_name": "TokenSniffer.batch_analyze",
        "is_async": true,
        "lineno": 660,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "tokens",
          "deep_scan"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[TokenAnalysis]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "analyze_token",
          "append",
          "gather",
          "enumerate",
          "isinstance",
          "error",
          "append",
          "_create_error_result",
          "str",
          "append"
        ]
      },
      {
        "name": "monitor_token",
        "qualified_name": "TokenSniffer.monitor_token",
        "is_async": true,
        "lineno": 695,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "token_address",
          "chain",
          "interval",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "analyze_token",
          "info",
          "callback",
          "warning",
          "add",
          "lower",
          "sleep",
          "info",
          "error",
          "sleep"
        ]
      },
      {
        "name": "get_risk_summary",
        "qualified_name": "TokenSniffer.get_risk_summary",
        "is_async": false,
        "lineno": 749,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "upper",
          "join"
        ]
      },
      {
        "name": "export_analysis",
        "qualified_name": "TokenSniffer.export_analysis",
        "is_async": true,
        "lineno": 773,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "analysis",
          "format"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "dumps",
          "isoformat",
          "len",
          "isoformat",
          "get_risk_summary"
        ]
      },
      {
        "name": "update_blacklist",
        "qualified_name": "TokenSniffer.update_blacklist",
        "is_async": false,
        "lineno": 813,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "token_address",
          "reason"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "add",
          "lower",
          "warning"
        ]
      },
      {
        "name": "update_whitelist",
        "qualified_name": "TokenSniffer.update_whitelist",
        "is_async": false,
        "lineno": 824,
        "scope": "class:TokenSniffer",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "add",
          "lower",
          "discard",
          "lower",
          "info"
        ]
      },
      {
        "name": "clear_cache",
        "qualified_name": "TokenSniffer.clear_cache",
        "is_async": false,
        "lineno": 836,
        "scope": "class:TokenSniffer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "clear",
          "info"
        ]
      },
      {
        "name": "get_cache_stats",
        "qualified_name": "TokenSniffer.get_cache_stats",
        "is_async": false,
        "lineno": 841,
        "scope": "class:TokenSniffer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "len",
          "len",
          "len"
        ]
      }
    ],
    "found_classes": [
      "TokenRisk",
      "TokenFlag",
      "TokenAnalysis",
      "TokenMetrics",
      "TokenSniffer"
    ],
    "class_bases": {
      "TokenRisk": [
        "Enum"
      ],
      "TokenFlag": [
        "Enum"
      ],
      "TokenAnalysis": [],
      "TokenMetrics": [],
      "TokenSniffer": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/processors/normalizer.py": {
    "path": "data\\processors\\normalizer.py",
    "exists": true,
    "expected": [
      {
        "name": "normalize_batch",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "normalize_record",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "record",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "normalize_value",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "value",
          "data_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Any",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "normalize_price",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "normalize_volume",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "volume"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "normalize_timestamp",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "timestamp"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "datetime",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "normalize_address",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "normalize_dataframe",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "df",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "pd.DataFrame",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "DataNormalizer.__init__",
        "is_async": false,
        "lineno": 49,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_default_config",
          "info"
        ]
      },
      {
        "name": "_default_config",
        "qualified_name": "DataNormalizer._default_config",
        "is_async": false,
        "lineno": 96,
        "scope": "class:DataNormalizer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "NormalizationConfig",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "NormalizationConfig"
        ]
      },
      {
        "name": "normalize_batch",
        "qualified_name": "DataNormalizer.normalize_batch",
        "is_async": false,
        "lineno": 107,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "data",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "normalize_record",
          "append"
        ]
      },
      {
        "name": "normalize_record",
        "qualified_name": "DataNormalizer.normalize_record",
        "is_async": false,
        "lineno": 126,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "record",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "normalize_value"
        ]
      },
      {
        "name": "normalize_value",
        "qualified_name": "DataNormalizer.normalize_value",
        "is_async": false,
        "lineno": 150,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "value",
          "data_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Any",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "normalize_price",
          "normalize_volume",
          "normalize_market_cap",
          "normalize_percentage",
          "normalize_timestamp",
          "normalize_address",
          "normalize_symbol",
          "normalize_chain",
          "normalize_dex",
          "normalize_transaction",
          "error"
        ]
      },
      {
        "name": "normalize_price",
        "qualified_name": "DataNormalizer.normalize_price",
        "is_async": false,
        "lineno": 192,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "strip",
          "sub",
          "Decimal",
          "str",
          "get",
          "quantize",
          "Decimal"
        ]
      },
      {
        "name": "normalize_volume",
        "qualified_name": "DataNormalizer.normalize_volume",
        "is_async": false,
        "lineno": 204,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "volume"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "strip",
          "upper",
          "endswith",
          "endswith",
          "endswith",
          "strip",
          "sub",
          "float",
          "Decimal",
          "str",
          "get",
          "quantize",
          "Decimal"
        ]
      },
      {
        "name": "normalize_market_cap",
        "qualified_name": "DataNormalizer.normalize_market_cap",
        "is_async": false,
        "lineno": 231,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "market_cap"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "normalize_volume"
        ]
      },
      {
        "name": "normalize_percentage",
        "qualified_name": "DataNormalizer.normalize_percentage",
        "is_async": false,
        "lineno": 235,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "percentage"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "strip",
          "replace",
          "float",
          "get",
          "round"
        ]
      },
      {
        "name": "normalize_timestamp",
        "qualified_name": "DataNormalizer.normalize_timestamp",
        "is_async": false,
        "lineno": 251,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "timestamp"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "datetime",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "replace",
          "astimezone",
          "isinstance",
          "fromisoformat",
          "replace",
          "float",
          "isinstance",
          "fromtimestamp",
          "ValueError"
        ]
      },
      {
        "name": "normalize_address",
        "qualified_name": "DataNormalizer.normalize_address",
        "is_async": false,
        "lineno": 279,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "strip",
          "str",
          "strip",
          "startswith",
          "startswith",
          "lower",
          "len",
          "warning",
          "all",
          "warning"
        ]
      },
      {
        "name": "normalize_symbol",
        "qualified_name": "DataNormalizer.normalize_symbol",
        "is_async": false,
        "lineno": 307,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "symbol"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "strip",
          "str",
          "strip",
          "sub",
          "lower",
          "upper"
        ]
      },
      {
        "name": "normalize_chain",
        "qualified_name": "DataNormalizer.normalize_chain",
        "is_async": false,
        "lineno": 330,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "lower",
          "strip",
          "str"
        ]
      },
      {
        "name": "normalize_dex",
        "qualified_name": "DataNormalizer.normalize_dex",
        "is_async": false,
        "lineno": 343,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "dex"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "lower",
          "strip",
          "str",
          "sub"
        ]
      },
      {
        "name": "normalize_transaction",
        "qualified_name": "DataNormalizer.normalize_transaction",
        "is_async": false,
        "lineno": 359,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "tx"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "normalize_address",
          "normalize_address",
          "normalize_address",
          "normalize_price",
          "int",
          "normalize_price",
          "normalize_price",
          "normalize_timestamp",
          "int",
          "int",
          "items"
        ]
      },
      {
        "name": "normalize_dataframe",
        "qualified_name": "DataNormalizer.normalize_dataframe",
        "is_async": false,
        "lineno": 399,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "df",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "pd.DataFrame",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "copy",
          "items",
          "apply",
          "normalize_value"
        ]
      },
      {
        "name": "validate_normalized_data",
        "qualified_name": "DataNormalizer.validate_normalized_data",
        "is_async": false,
        "lineno": 420,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "data",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[bool, List[str]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "append",
          "isinstance",
          "append",
          "type",
          "isinstance",
          "append",
          "type",
          "isinstance",
          "append",
          "type",
          "isinstance",
          "append",
          "type",
          "isinstance",
          "append",
          "type",
          "len"
        ]
      },
      {
        "name": "merge_normalized_data",
        "qualified_name": "DataNormalizer.merge_normalized_data",
        "is_async": false,
        "lineno": 454,
        "scope": "class:DataNormalizer",
        "params": [
          "self"
        ],
        "has_varargs": true,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "set",
          "_create_record_key",
          "add",
          "append"
        ]
      },
      {
        "name": "_create_record_key",
        "qualified_name": "DataNormalizer._create_record_key",
        "is_async": false,
        "lineno": 478,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "record"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "str",
          "append",
          "str",
          "append",
          "str",
          "append",
          "str",
          "join"
        ]
      },
      {
        "name": "export_schema",
        "qualified_name": "DataNormalizer.export_schema",
        "is_async": false,
        "lineno": 494,
        "scope": "class:DataNormalizer",
        "params": [
          "self",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items"
        ]
      }
    ],
    "found_classes": [
      "DataType",
      "NormalizationConfig",
      "DataNormalizer"
    ],
    "class_bases": {
      "DataType": [
        "Enum"
      ],
      "NormalizationConfig": [],
      "DataNormalizer": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/processors/feature_extractor.py": {
    "path": "data\\processors\\feature_extractor.py",
    "exists": true,
    "expected": [
      {
        "name": "extract_all_features",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "extract_price_features",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "extract_volume_features",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "extract_technical_indicators",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "extract_pattern_features",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "extract_market_features",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "extract_social_features",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "extract_chain_features",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "extract_risk_features",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "create_feature_vector",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "features",
          "feature_list"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "FeatureExtractor.__init__",
        "is_async": false,
        "lineno": 23,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "StandardScaler",
          "StandardScaler",
          "MinMaxScaler",
          "info"
        ]
      },
      {
        "name": "extract_all_features",
        "qualified_name": "FeatureExtractor.extract_all_features",
        "is_async": false,
        "lineno": 51,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "update",
          "extract_price_features",
          "update",
          "extract_volume_features",
          "update",
          "extract_technical_indicators",
          "update",
          "extract_pattern_features",
          "update",
          "extract_market_features",
          "update",
          "extract_social_features",
          "update",
          "extract_chain_features",
          "update",
          "extract_risk_features",
          "update",
          "extract_interaction_features",
          "update",
          "extract_derived_features"
        ]
      },
      {
        "name": "extract_price_features",
        "qualified_name": "FeatureExtractor.extract_price_features",
        "is_async": false,
        "lineno": 81,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "array",
          "float",
          "len",
          "mean",
          "std",
          "min",
          "max",
          "len",
          "std",
          "mean",
          "len",
          "len",
          "len",
          "log",
          "mean",
          "std",
          "skew",
          "kurtosis",
          "len",
          "abs",
          "sum",
          "abs",
          "range"
        ]
      },
      {
        "name": "extract_volume_features",
        "qualified_name": "FeatureExtractor.extract_volume_features",
        "is_async": false,
        "lineno": 138,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "array",
          "float",
          "len",
          "mean",
          "std",
          "sum",
          "len",
          "mean",
          "std",
          "len",
          "polyfit",
          "range",
          "len",
          "len",
          "skew",
          "kurtosis",
          "len",
          "sum",
          "sum",
          "sum",
          "len",
          "mean",
          "std",
          "len",
          "len",
          "array",
          "float",
          "zeros",
          "len",
          "range",
          "len",
          "len",
          "polyfit",
          "range",
          "len"
        ]
      },
      {
        "name": "extract_technical_indicators",
        "qualified_name": "FeatureExtractor.extract_technical_indicators",
        "is_async": false,
        "lineno": 205,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "len",
          "array",
          "float",
          "array",
          "get",
          "array",
          "get",
          "array",
          "float",
          "get",
          "len",
          "len",
          "RSI",
          "isnan",
          "len",
          "MACD",
          "isnan",
          "len",
          "BBANDS",
          "isnan",
          "len",
          "SMA",
          "EMA",
          "isnan",
          "isnan",
          "len",
          "len",
          "STOCH",
          "isnan",
          "len",
          "len",
          "ADX",
          "isnan",
          "len",
          "len",
          "ATR",
          "isnan",
          "len",
          "len",
          "CCI",
          "isnan",
          "len",
          "len",
          "len",
          "MFI",
          "isnan",
          "len",
          "len",
          "WILLR",
          "isnan",
          "len",
          "ROC",
          "isnan"
        ]
      },
      {
        "name": "extract_pattern_features",
        "qualified_name": "FeatureExtractor.extract_pattern_features",
        "is_async": false,
        "lineno": 313,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "len",
          "array",
          "float",
          "len",
          "polyfit",
          "range",
          "len",
          "polyval",
          "mean",
          "range",
          "len",
          "sum",
          "sum",
          "mean",
          "len",
          "argrelextrema",
          "argrelextrema",
          "len",
          "min",
          "len",
          "len",
          "max",
          "len",
          "_detect_double_top",
          "_detect_double_bottom",
          "_detect_head_shoulders",
          "_detect_triangle",
          "_detect_flag",
          "all",
          "_detect_doji",
          "_detect_hammer",
          "_detect_engulfing"
        ]
      },
      {
        "name": "extract_market_features",
        "qualified_name": "FeatureExtractor.extract_market_features",
        "is_async": false,
        "lineno": 369,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "float",
          "get",
          "float",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "float",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "extract_social_features",
        "qualified_name": "FeatureExtractor.extract_social_features",
        "is_async": false,
        "lineno": 405,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "extract_chain_features",
        "qualified_name": "FeatureExtractor.extract_chain_features",
        "is_async": false,
        "lineno": 436,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "float",
          "get",
          "float",
          "get",
          "get",
          "float",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "extract_risk_features",
        "qualified_name": "FeatureExtractor.extract_risk_features",
        "is_async": false,
        "lineno": 470,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "extract_interaction_features",
        "qualified_name": "FeatureExtractor.extract_interaction_features",
        "is_async": false,
        "lineno": 503,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "features"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "abs",
          "get",
          "get"
        ]
      },
      {
        "name": "extract_derived_features",
        "qualified_name": "FeatureExtractor.extract_derived_features",
        "is_async": false,
        "lineno": 531,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "features"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "sum",
          "get",
          "len",
          "sum",
          "get",
          "sum",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min",
          "get"
        ]
      },
      {
        "name": "_detect_double_top",
        "qualified_name": "FeatureExtractor._detect_double_top",
        "is_async": false,
        "lineno": 574,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "find_peaks",
          "len",
          "abs"
        ]
      },
      {
        "name": "_detect_double_bottom",
        "qualified_name": "FeatureExtractor._detect_double_bottom",
        "is_async": false,
        "lineno": 590,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "find_peaks",
          "len",
          "abs"
        ]
      },
      {
        "name": "_detect_head_shoulders",
        "qualified_name": "FeatureExtractor._detect_head_shoulders",
        "is_async": false,
        "lineno": 605,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "find_peaks",
          "len",
          "abs"
        ]
      },
      {
        "name": "_detect_triangle",
        "qualified_name": "FeatureExtractor._detect_triangle",
        "is_async": false,
        "lineno": 624,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "max",
          "len",
          "min",
          "len",
          "max",
          "len",
          "min",
          "len"
        ]
      },
      {
        "name": "_detect_flag",
        "qualified_name": "FeatureExtractor._detect_flag",
        "is_async": false,
        "lineno": 637,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "len",
          "len",
          "abs",
          "max",
          "min",
          "mean"
        ]
      },
      {
        "name": "_detect_doji",
        "qualified_name": "FeatureExtractor._detect_doji",
        "is_async": false,
        "lineno": 653,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "abs"
        ]
      },
      {
        "name": "_detect_hammer",
        "qualified_name": "FeatureExtractor._detect_hammer",
        "is_async": false,
        "lineno": 667,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "abs",
          "min",
          "max"
        ]
      },
      {
        "name": "_detect_engulfing",
        "qualified_name": "FeatureExtractor._detect_engulfing",
        "is_async": false,
        "lineno": 682,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "all",
          "len"
        ]
      },
      {
        "name": "create_feature_vector",
        "qualified_name": "FeatureExtractor.create_feature_vector",
        "is_async": false,
        "lineno": 706,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "features",
          "feature_list"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "isinstance",
          "float",
          "isinstance",
          "append",
          "array"
        ]
      },
      {
        "name": "get_feature_importance",
        "qualified_name": "FeatureExtractor.get_feature_importance",
        "is_async": false,
        "lineno": 729,
        "scope": "class:FeatureExtractor",
        "params": [
          "self",
          "model",
          "feature_list"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "hasattr",
          "zip"
        ]
      }
    ],
    "found_classes": [
      "FeatureExtractor"
    ],
    "class_bases": {
      "FeatureExtractor": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/processors/aggregator.py": {
    "path": "data\\processors\\aggregator.py",
    "exists": true,
    "expected": [
      {
        "name": "aggregate_token_data",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_address",
          "chain",
          "data_sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_aggregate_prices",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_aggregate_volumes",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_aggregate_liquidity",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_aggregate_holder_metrics",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "aggregate_market_data",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "chain",
          "data_sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "merge_time_series",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "series_list",
          "method"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "pd.DataFrame",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "update_source_reliability",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "source",
          "accuracy_score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "DataAggregator.__init__",
        "is_async": false,
        "lineno": 23,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "defaultdict",
          "get",
          "deque",
          "info"
        ]
      },
      {
        "name": "aggregate_token_data",
        "qualified_name": "DataAggregator.aggregate_token_data",
        "is_async": true,
        "lineno": 63,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "token_address",
          "chain",
          "data_sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "items",
          "_clean_source_data",
          "_validate_source_data",
          "warning",
          "error",
          "now",
          "len",
          "list",
          "keys",
          "_aggregate_prices",
          "update",
          "_aggregate_volumes",
          "update",
          "_aggregate_liquidity",
          "update",
          "_aggregate_holder_metrics",
          "update",
          "_aggregate_social_metrics",
          "update",
          "_aggregate_technical_indicators",
          "update",
          "_calculate_quality_score",
          "_detect_anomalies",
          "now",
          "error"
        ]
      },
      {
        "name": "_clean_source_data",
        "qualified_name": "DataAggregator._clean_source_data",
        "is_async": false,
        "lineno": 150,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "float",
          "endswith",
          "endswith",
          "float",
          "int"
        ]
      },
      {
        "name": "_validate_source_data",
        "qualified_name": "DataAggregator._validate_source_data",
        "is_async": false,
        "lineno": 190,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_aggregate_prices",
        "qualified_name": "DataAggregator._aggregate_prices",
        "is_async": false,
        "lineno": 208,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "get",
          "append",
          "append",
          "sorted",
          "zip",
          "cumsum",
          "searchsorted",
          "min",
          "max",
          "len",
          "stdev",
          "len",
          "_record_conflict"
        ]
      },
      {
        "name": "_aggregate_volumes",
        "qualified_name": "DataAggregator._aggregate_volumes",
        "is_async": false,
        "lineno": 243,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "get",
          "get",
          "append",
          "sum",
          "len",
          "len"
        ]
      },
      {
        "name": "_aggregate_liquidity",
        "qualified_name": "DataAggregator._aggregate_liquidity",
        "is_async": false,
        "lineno": 264,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "append",
          "get",
          "get",
          "append",
          "max",
          "min",
          "len",
          "mean"
        ]
      },
      {
        "name": "_aggregate_holder_metrics",
        "qualified_name": "DataAggregator._aggregate_holder_metrics",
        "is_async": false,
        "lineno": 291,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "append",
          "get",
          "get",
          "append",
          "max",
          "min",
          "len",
          "mean"
        ]
      },
      {
        "name": "_aggregate_social_metrics",
        "qualified_name": "DataAggregator._aggregate_social_metrics",
        "is_async": false,
        "lineno": 318,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "append",
          "get",
          "get",
          "append",
          "mean",
          "mean"
        ]
      },
      {
        "name": "_aggregate_technical_indicators",
        "qualified_name": "DataAggregator._aggregate_technical_indicators",
        "is_async": false,
        "lineno": 341,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "defaultdict",
          "items",
          "append",
          "items",
          "mean"
        ]
      },
      {
        "name": "_calculate_quality_score",
        "qualified_name": "DataAggregator._calculate_quality_score",
        "is_async": false,
        "lineno": 360,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "min",
          "len",
          "append",
          "items",
          "sum",
          "len",
          "append",
          "mean",
          "append",
          "get",
          "values",
          "len",
          "stdev",
          "mean",
          "max",
          "append",
          "sum"
        ]
      },
      {
        "name": "_detect_anomalies",
        "qualified_name": "DataAggregator._detect_anomalies",
        "is_async": false,
        "lineno": 391,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "aggregated",
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "append",
          "append",
          "append",
          "len",
          "append"
        ]
      },
      {
        "name": "_record_conflict",
        "qualified_name": "DataAggregator._record_conflict",
        "is_async": false,
        "lineno": 421,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "field",
          "sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "now",
          "get",
          "items",
          "append"
        ]
      },
      {
        "name": "aggregate_market_data",
        "qualified_name": "DataAggregator.aggregate_market_data",
        "is_async": true,
        "lineno": 430,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "chain",
          "data_sources"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "list",
          "keys",
          "items",
          "append",
          "append",
          "append",
          "sum",
          "sum",
          "max"
        ]
      },
      {
        "name": "merge_time_series",
        "qualified_name": "DataAggregator.merge_time_series",
        "is_async": false,
        "lineno": 466,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "series_list",
          "method"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "pd.DataFrame",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DataFrame",
          "concat",
          "mean",
          "median",
          "max",
          "min",
          "mean",
          "DataFrame"
        ]
      },
      {
        "name": "update_source_reliability",
        "qualified_name": "DataAggregator.update_source_reliability",
        "is_async": false,
        "lineno": 501,
        "scope": "class:DataAggregator",
        "params": [
          "self",
          "source",
          "accuracy_score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "get_reliability_report",
        "qualified_name": "DataAggregator.get_reliability_report",
        "is_async": false,
        "lineno": 519,
        "scope": "class:DataAggregator",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "dict"
        ]
      },
      {
        "name": "get_conflict_report",
        "qualified_name": "DataAggregator.get_conflict_report",
        "is_async": false,
        "lineno": 523,
        "scope": "class:DataAggregator",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "defaultdict",
          "append",
          "dict",
          "len",
          "list",
          "keys"
        ]
      }
    ],
    "found_classes": [
      "DataAggregator"
    ],
    "class_bases": {
      "DataAggregator": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/processors/validator.py": {
    "path": "data\\processors\\validator.py",
    "exists": true,
    "expected": [
      {
        "name": "validate",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ValidationResult",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "validate_batch",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data_list",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_apply_rule",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "rule",
          "field",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_validate_schema",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_check_consistency",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "_calculate_quality_score",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "errors",
          "warnings",
          "info"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "register_custom_validator",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "name",
          "validator_func"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "add_rule",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "rule"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "DataValidator.__init__",
        "is_async": false,
        "lineno": 65,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_initialize_rules",
          "info"
        ]
      },
      {
        "name": "_initialize_rules",
        "qualified_name": "DataValidator._initialize_rules",
        "is_async": false,
        "lineno": 95,
        "scope": "class:DataValidator",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[ValidationRule]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "ValidationRule",
          "ValidationRule",
          "ValidationRule",
          "ValidationRule",
          "ValidationRule",
          "ValidationRule",
          "ValidationRule"
        ]
      },
      {
        "name": "validate",
        "qualified_name": "DataValidator.validate",
        "is_async": false,
        "lineno": 164,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "data",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ValidationResult",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "copy",
          "replace",
          "keys",
          "match",
          "_apply_rule",
          "get",
          "append",
          "append",
          "append",
          "_validate_schema",
          "extend",
          "items",
          "_determine_field_type",
          "append",
          "_check_consistency",
          "extend",
          "_check_required_fields",
          "extend",
          "_calculate_quality_score",
          "_generate_suggestions",
          "len",
          "get",
          "get",
          "ValidationResult"
        ]
      },
      {
        "name": "_apply_rule",
        "qualified_name": "DataValidator._apply_rule",
        "is_async": false,
        "lineno": 248,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "rule",
          "field",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "float",
          "get",
          "match",
          "str",
          "get",
          "isinstance",
          "type",
          "get",
          "debug"
        ]
      },
      {
        "name": "_validate_schema",
        "qualified_name": "DataValidator._validate_schema",
        "is_async": false,
        "lineno": 312,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "data",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "get",
          "append",
          "get",
          "isinstance",
          "append",
          "append"
        ]
      },
      {
        "name": "_check_consistency",
        "qualified_name": "DataValidator._check_consistency",
        "is_async": false,
        "lineno": 350,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "all",
          "abs",
          "append",
          "all",
          "append",
          "all",
          "append"
        ]
      },
      {
        "name": "_check_required_fields",
        "qualified_name": "DataValidator._check_required_fields",
        "is_async": false,
        "lineno": 388,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append"
        ]
      },
      {
        "name": "_determine_field_type",
        "qualified_name": "DataValidator._determine_field_type",
        "is_async": false,
        "lineno": 403,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "field"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[DataField]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "lower"
        ]
      },
      {
        "name": "_validate_price",
        "qualified_name": "DataValidator._validate_price",
        "is_async": false,
        "lineno": 424,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "float",
          "len",
          "split",
          "str"
        ]
      },
      {
        "name": "_validate_volume",
        "qualified_name": "DataValidator._validate_volume",
        "is_async": false,
        "lineno": 444,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "float"
        ]
      },
      {
        "name": "_validate_liquidity",
        "qualified_name": "DataValidator._validate_liquidity",
        "is_async": false,
        "lineno": 460,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "float"
        ]
      },
      {
        "name": "_validate_address",
        "qualified_name": "DataValidator._validate_address",
        "is_async": false,
        "lineno": 476,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "isinstance",
          "startswith",
          "len",
          "all"
        ]
      },
      {
        "name": "_validate_symbol",
        "qualified_name": "DataValidator._validate_symbol",
        "is_async": false,
        "lineno": 491,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "isinstance",
          "len",
          "isalnum",
          "replace",
          "replace"
        ]
      },
      {
        "name": "_validate_timestamp",
        "qualified_name": "DataValidator._validate_timestamp",
        "is_async": false,
        "lineno": 504,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "isinstance",
          "timestamp",
          "now",
          "isinstance",
          "fromisoformat",
          "isinstance"
        ]
      },
      {
        "name": "_validate_percentage",
        "qualified_name": "DataValidator._validate_percentage",
        "is_async": false,
        "lineno": 532,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "float"
        ]
      },
      {
        "name": "_calculate_quality_score",
        "qualified_name": "DataValidator._calculate_quality_score",
        "is_async": false,
        "lineno": 548,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "errors",
          "warnings",
          "info"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "len",
          "len",
          "max",
          "min"
        ]
      },
      {
        "name": "_generate_suggestions",
        "qualified_name": "DataValidator._generate_suggestions",
        "is_async": false,
        "lineno": 570,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "errors",
          "warnings"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "set",
          "get",
          "set",
          "get",
          "append",
          "append",
          "append",
          "append",
          "len",
          "append",
          "len",
          "append"
        ]
      },
      {
        "name": "validate_batch",
        "qualified_name": "DataValidator.validate_batch",
        "is_async": false,
        "lineno": 603,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "data_list",
          "schema"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[List[ValidationResult], Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "validate",
          "append",
          "len",
          "sum",
          "sum",
          "sum",
          "len",
          "_summarize_errors",
          "_summarize_warnings"
        ]
      },
      {
        "name": "_summarize_errors",
        "qualified_name": "DataValidator._summarize_errors",
        "is_async": false,
        "lineno": 636,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "results"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, int]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get"
        ]
      },
      {
        "name": "_summarize_warnings",
        "qualified_name": "DataValidator._summarize_warnings",
        "is_async": false,
        "lineno": 647,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "results"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, int]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get"
        ]
      },
      {
        "name": "register_custom_validator",
        "qualified_name": "DataValidator.register_custom_validator",
        "is_async": false,
        "lineno": 658,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "name",
          "validator_func"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info"
        ]
      },
      {
        "name": "add_rule",
        "qualified_name": "DataValidator.add_rule",
        "is_async": false,
        "lineno": 673,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "rule"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append",
          "info"
        ]
      },
      {
        "name": "remove_rule",
        "qualified_name": "DataValidator.remove_rule",
        "is_async": false,
        "lineno": 678,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "field",
          "rule_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info"
        ]
      },
      {
        "name": "get_validation_stats",
        "qualified_name": "DataValidator.get_validation_stats",
        "is_async": false,
        "lineno": 686,
        "scope": "class:DataValidator",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "max",
          "dict",
          "sorted",
          "items"
        ]
      },
      {
        "name": "reset_stats",
        "qualified_name": "DataValidator.reset_stats",
        "is_async": false,
        "lineno": 700,
        "scope": "class:DataValidator",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info"
        ]
      },
      {
        "name": "export_rules",
        "qualified_name": "DataValidator.export_rules",
        "is_async": false,
        "lineno": 710,
        "scope": "class:DataValidator",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "import_rules",
        "qualified_name": "DataValidator.import_rules",
        "is_async": false,
        "lineno": 723,
        "scope": "class:DataValidator",
        "params": [
          "self",
          "rules_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ValidationRule",
          "ValidationLevel",
          "add_rule",
          "info",
          "len"
        ]
      }
    ],
    "found_classes": [
      "ValidationLevel",
      "DataField",
      "ValidationResult",
      "ValidationRule",
      "DataValidator"
    ],
    "class_bases": {
      "ValidationLevel": [
        "Enum"
      ],
      "DataField": [
        "Enum"
      ],
      "ValidationResult": [],
      "ValidationRule": [],
      "DataValidator": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/storage/database.py": {
    "path": "data\\storage\\database.py",
    "exists": true,
    "expected": [
      {
        "name": "connect",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "disconnect",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "save_trade",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "update_trade",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "trade_id",
          "updates"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "save_position",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "update_position",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "position_id",
          "updates"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "save_market_data",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_historical_data",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token",
          "timeframe"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_active_positions",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "cleanup_old_data",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "days"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "DatabaseManager.__init__",
        "is_async": false,
        "lineno": 23,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "connect",
        "qualified_name": "DatabaseManager.connect",
        "is_async": true,
        "lineno": 28,
        "scope": "class:DatabaseManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "create_pool",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "_initialize_timescaledb",
          "_create_tables",
          "info",
          "error"
        ]
      },
      {
        "name": "disconnect",
        "qualified_name": "DatabaseManager.disconnect",
        "is_async": true,
        "lineno": 57,
        "scope": "class:DatabaseManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "close",
          "info"
        ]
      },
      {
        "name": "acquire",
        "qualified_name": "DatabaseManager.acquire",
        "is_async": true,
        "lineno": 65,
        "scope": "class:DatabaseManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire"
        ]
      },
      {
        "name": "_initialize_timescaledb",
        "qualified_name": "DatabaseManager._initialize_timescaledb",
        "is_async": true,
        "lineno": 70,
        "scope": "class:DatabaseManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "acquire",
          "execute",
          "execute",
          "info"
        ]
      },
      {
        "name": "_create_tables",
        "qualified_name": "DatabaseManager._create_tables",
        "is_async": true,
        "lineno": 81,
        "scope": "class:DatabaseManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "acquire",
          "execute",
          "execute",
          "execute",
          "execute",
          "str",
          "warning",
          "execute",
          "execute",
          "execute",
          "info"
        ]
      },
      {
        "name": "save_trade",
        "qualified_name": "DatabaseManager.save_trade",
        "is_async": true,
        "lineno": 266,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "fetchrow",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "decode",
          "dumps",
          "get",
          "info"
        ]
      },
      {
        "name": "update_trade",
        "qualified_name": "DatabaseManager.update_trade",
        "is_async": true,
        "lineno": 292,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "trade_id",
          "updates"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "enumerate",
          "items",
          "append",
          "append",
          "decode",
          "dumps",
          "append",
          "append",
          "append",
          "join",
          "len",
          "execute"
        ]
      },
      {
        "name": "save_position",
        "qualified_name": "DatabaseManager.save_position",
        "is_async": true,
        "lineno": 316,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "fetchrow",
          "get",
          "get",
          "decode",
          "dumps",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "decode",
          "dumps",
          "get",
          "info"
        ]
      },
      {
        "name": "update_position",
        "qualified_name": "DatabaseManager.update_position",
        "is_async": true,
        "lineno": 342,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "position_id",
          "updates"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "enumerate",
          "items",
          "append",
          "append",
          "decode",
          "dumps",
          "append",
          "append",
          "append",
          "join",
          "len",
          "execute"
        ]
      },
      {
        "name": "save_market_data",
        "qualified_name": "DatabaseManager.save_market_data",
        "is_async": true,
        "lineno": 366,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "execute",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "decode",
          "dumps",
          "get"
        ]
      },
      {
        "name": "save_market_data_batch",
        "qualified_name": "DatabaseManager.save_market_data_batch",
        "is_async": true,
        "lineno": 402,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "data_points"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "decode",
          "dumps",
          "get",
          "copy_records_to_table",
          "debug",
          "len"
        ]
      },
      {
        "name": "get_historical_data",
        "qualified_name": "DatabaseManager.get_historical_data",
        "is_async": true,
        "lineno": 436,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "token",
          "timeframe"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "get",
          "fetch",
          "dict"
        ]
      },
      {
        "name": "get_historical_data_extended",
        "qualified_name": "DatabaseManager.get_historical_data_extended",
        "is_async": true,
        "lineno": 492,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "token_address",
          "timeframe",
          "limit",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "get",
          "fetch",
          "dict"
        ]
      },
      {
        "name": "get_active_positions",
        "qualified_name": "DatabaseManager.get_active_positions",
        "is_async": true,
        "lineno": 547,
        "scope": "class:DatabaseManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "fetch",
          "dict"
        ]
      },
      {
        "name": "get_recent_trades",
        "qualified_name": "DatabaseManager.get_recent_trades",
        "is_async": true,
        "lineno": 558,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "limit",
          "status"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "fetch",
          "fetch",
          "dict"
        ]
      },
      {
        "name": "save_token_analysis",
        "qualified_name": "DatabaseManager.save_token_analysis",
        "is_async": true,
        "lineno": 581,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "execute",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "decode",
          "dumps",
          "get"
        ]
      },
      {
        "name": "get_token_analysis",
        "qualified_name": "DatabaseManager.get_token_analysis",
        "is_async": true,
        "lineno": 616,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "token_address",
          "chain",
          "hours_back"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "fetch",
          "dict"
        ]
      },
      {
        "name": "save_performance_metrics",
        "qualified_name": "DatabaseManager.save_performance_metrics",
        "is_async": true,
        "lineno": 633,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "execute",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "decode",
          "dumps",
          "get"
        ]
      },
      {
        "name": "cleanup_old_data",
        "qualified_name": "DatabaseManager.cleanup_old_data",
        "is_async": true,
        "lineno": 659,
        "scope": "class:DatabaseManager",
        "params": [
          "self",
          "days"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "execute",
          "execute",
          "info"
        ]
      },
      {
        "name": "get_statistics",
        "qualified_name": "DatabaseManager.get_statistics",
        "is_async": true,
        "lineno": 682,
        "scope": "class:DatabaseManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "fetchrow",
          "fetchrow",
          "fetchrow",
          "fetchrow"
        ]
      }
    ],
    "found_classes": [
      "DatabaseManager"
    ],
    "class_bases": {
      "DatabaseManager": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/storage/cache.py": {
    "path": "data\\storage\\cache.py",
    "exists": true,
    "expected": [
      {
        "name": "get",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Any",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "set",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "key",
          "value",
          "ttl",
          "cache_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "delete",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "clear",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "exists",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_stats",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "CacheManager.__init__",
        "is_async": false,
        "lineno": 23,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "connect",
        "qualified_name": "CacheManager.connect",
        "is_async": true,
        "lineno": 51,
        "scope": "class:CacheManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "from_url",
          "get",
          "get",
          "get",
          "get",
          "get",
          "ping",
          "_setup_keyspace_notifications",
          "info",
          "error"
        ]
      },
      {
        "name": "disconnect",
        "qualified_name": "CacheManager.disconnect",
        "is_async": true,
        "lineno": 84,
        "scope": "class:CacheManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "close",
          "info"
        ]
      },
      {
        "name": "_setup_keyspace_notifications",
        "qualified_name": "CacheManager._setup_keyspace_notifications",
        "is_async": true,
        "lineno": 91,
        "scope": "class:CacheManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "config_set",
          "warning"
        ]
      },
      {
        "name": "get",
        "qualified_name": "CacheManager.get",
        "is_async": true,
        "lineno": 101,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "loads",
          "loads",
          "isinstance",
          "decode",
          "error"
        ]
      },
      {
        "name": "get_with_options",
        "qualified_name": "CacheManager.get_with_options",
        "is_async": true,
        "lineno": 134,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key",
          "default",
          "decode_json"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "loads",
          "loads",
          "isinstance",
          "decode",
          "error"
        ]
      },
      {
        "name": "set",
        "qualified_name": "CacheManager.set",
        "is_async": true,
        "lineno": 176,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key",
          "value",
          "ttl",
          "cache_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "isinstance",
          "dumps",
          "isinstance",
          "encode",
          "str",
          "dumps",
          "setex",
          "set",
          "error"
        ]
      },
      {
        "name": "delete",
        "qualified_name": "CacheManager.delete",
        "is_async": true,
        "lineno": 219,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "delete",
          "delete",
          "error"
        ]
      },
      {
        "name": "exists",
        "qualified_name": "CacheManager.exists",
        "is_async": true,
        "lineno": 230,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "bool",
          "exists",
          "error"
        ]
      },
      {
        "name": "invalidate",
        "qualified_name": "CacheManager.invalidate",
        "is_async": true,
        "lineno": 238,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "pattern"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "scan_iter",
          "append",
          "delete",
          "error"
        ]
      },
      {
        "name": "get_many",
        "qualified_name": "CacheManager.get_many",
        "is_async": true,
        "lineno": 253,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "keys"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "mget",
          "zip",
          "loads",
          "isinstance",
          "decode",
          "error"
        ]
      },
      {
        "name": "set_many",
        "qualified_name": "CacheManager.set_many",
        "is_async": true,
        "lineno": 272,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "mapping",
          "ttl"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "isinstance",
          "dumps",
          "encode",
          "str",
          "pipeline",
          "items",
          "setex",
          "set",
          "execute",
          "error"
        ]
      },
      {
        "name": "hget",
        "qualified_name": "CacheManager.hget",
        "is_async": true,
        "lineno": 299,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "name",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "hget",
          "loads",
          "isinstance",
          "decode",
          "error"
        ]
      },
      {
        "name": "hset",
        "qualified_name": "CacheManager.hset",
        "is_async": true,
        "lineno": 313,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "name",
          "key",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "dumps",
          "encode",
          "str",
          "hset",
          "error"
        ]
      },
      {
        "name": "hgetall",
        "qualified_name": "CacheManager.hgetall",
        "is_async": true,
        "lineno": 327,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "name"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "hgetall",
          "items",
          "isinstance",
          "decode",
          "loads",
          "isinstance",
          "decode",
          "error"
        ]
      },
      {
        "name": "lpush",
        "qualified_name": "CacheManager.lpush",
        "is_async": true,
        "lineno": 346,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "dumps",
          "str",
          "lpush",
          "error"
        ]
      },
      {
        "name": "rpop",
        "qualified_name": "CacheManager.rpop",
        "is_async": true,
        "lineno": 355,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "rpop",
          "loads",
          "isinstance",
          "decode",
          "error"
        ]
      },
      {
        "name": "lrange",
        "qualified_name": "CacheManager.lrange",
        "is_async": true,
        "lineno": 369,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key",
          "start",
          "stop"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "lrange",
          "append",
          "loads",
          "append",
          "isinstance",
          "decode",
          "error"
        ]
      },
      {
        "name": "zadd",
        "qualified_name": "CacheManager.zadd",
        "is_async": true,
        "lineno": 387,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key",
          "mapping"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "zadd",
          "error"
        ]
      },
      {
        "name": "zrange",
        "qualified_name": "CacheManager.zrange",
        "is_async": true,
        "lineno": 395,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key",
          "start",
          "stop",
          "withscores"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "zrange",
          "error"
        ]
      },
      {
        "name": "publish",
        "qualified_name": "CacheManager.publish",
        "is_async": true,
        "lineno": 410,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "channel",
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "isinstance",
          "dumps",
          "str",
          "publish",
          "error"
        ]
      },
      {
        "name": "subscribe",
        "qualified_name": "CacheManager.subscribe",
        "is_async": true,
        "lineno": 420,
        "scope": "class:CacheManager",
        "params": [
          "self"
        ],
        "has_varargs": true,
        "has_varkw": false,
        "returns": "'PubSub'",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "pubsub",
          "get",
          "subscribe"
        ]
      },
      {
        "name": "incr",
        "qualified_name": "CacheManager.incr",
        "is_async": true,
        "lineno": 428,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key",
          "amount"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "incrby",
          "error"
        ]
      },
      {
        "name": "decr",
        "qualified_name": "CacheManager.decr",
        "is_async": true,
        "lineno": 436,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key",
          "amount"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "decrby",
          "error"
        ]
      },
      {
        "name": "expire",
        "qualified_name": "CacheManager.expire",
        "is_async": true,
        "lineno": 445,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key",
          "seconds"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "expire",
          "error"
        ]
      },
      {
        "name": "ttl",
        "qualified_name": "CacheManager.ttl",
        "is_async": true,
        "lineno": 453,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ttl",
          "error"
        ]
      },
      {
        "name": "warm_cache",
        "qualified_name": "CacheManager.warm_cache",
        "is_async": true,
        "lineno": 462,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "data_type",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "set",
          "set",
          "set",
          "info",
          "error"
        ]
      },
      {
        "name": "get_stats",
        "qualified_name": "CacheManager.get_stats",
        "is_async": true,
        "lineno": 486,
        "scope": "class:CacheManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "max",
          "get",
          "get",
          "get",
          "get",
          "error"
        ]
      },
      {
        "name": "acquire_lock",
        "qualified_name": "CacheManager.acquire_lock",
        "is_async": true,
        "lineno": 509,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "resource",
          "timeout",
          "blocking"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional['Lock']",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "lock",
          "acquire",
          "error"
        ]
      },
      {
        "name": "release_lock",
        "qualified_name": "CacheManager.release_lock",
        "is_async": true,
        "lineno": 529,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "lock"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "release",
          "error"
        ]
      },
      {
        "name": "clear",
        "qualified_name": "CacheManager.clear",
        "is_async": true,
        "lineno": 540,
        "scope": "class:CacheManager",
        "params": [
          "self",
          "pattern"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "scan_iter",
          "append",
          "delete",
          "info",
          "info",
          "error"
        ]
      }
    ],
    "found_classes": [
      "CacheManager"
    ],
    "class_bases": {
      "CacheManager": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "data/storage/models.py": {
    "path": "data\\storage\\models.py",
    "exists": true,
    "expected": [
      {
        "name": "Trade",
        "kind": "class",
        "is_async": null,
        "visibility": null,
        "params": null,
        "has_varargs": null,
        "has_varkw": null,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "Position",
        "kind": "class",
        "is_async": null,
        "visibility": null,
        "params": null,
        "has_varargs": null,
        "has_varkw": null,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "MarketData",
        "kind": "class",
        "is_async": null,
        "visibility": null,
        "params": null,
        "has_varargs": null,
        "has_varkw": null,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "Alert",
        "kind": "class",
        "is_async": null,
        "visibility": null,
        "params": null,
        "has_varargs": null,
        "has_varkw": null,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "Performance",
        "kind": "class",
        "is_async": null,
        "visibility": null,
        "params": null,
        "has_varargs": null,
        "has_varkw": null,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "validate_side",
        "qualified_name": "Trade.validate_side",
        "is_async": false,
        "lineno": 116,
        "scope": "class:Trade",
        "params": [
          "self",
          "key",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ValueError"
        ]
      },
      {
        "name": "validate_status",
        "qualified_name": "Trade.validate_status",
        "is_async": false,
        "lineno": 122,
        "scope": "class:Trade",
        "params": [
          "self",
          "key",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ValueError"
        ]
      },
      {
        "name": "to_dict",
        "qualified_name": "Trade.to_dict",
        "is_async": false,
        "lineno": 128,
        "scope": "class:Trade",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "float",
          "float",
          "float",
          "float",
          "float",
          "float",
          "isoformat",
          "isoformat"
        ]
      },
      {
        "name": "to_dict",
        "qualified_name": "Position.to_dict",
        "is_async": false,
        "lineno": 216,
        "scope": "class:Position",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "float",
          "float",
          "float",
          "float",
          "float",
          "float",
          "isoformat"
        ]
      },
      {
        "name": "to_dict",
        "qualified_name": "Alert.to_dict",
        "is_async": false,
        "lineno": 342,
        "scope": "class:Alert",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isoformat"
        ]
      },
      {
        "name": "to_dict",
        "qualified_name": "TokenAnalysis.to_dict",
        "is_async": false,
        "lineno": 428,
        "scope": "class:TokenAnalysis",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isoformat",
          "float",
          "float",
          "float",
          "float",
          "float",
          "float",
          "float"
        ]
      },
      {
        "name": "to_dict",
        "qualified_name": "PerformanceMetrics.to_dict",
        "is_async": false,
        "lineno": 520,
        "scope": "class:PerformanceMetrics",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isoformat",
          "isoformat",
          "float",
          "float",
          "float",
          "float"
        ]
      },
      {
        "name": "create_all_tables",
        "qualified_name": "create_all_tables",
        "is_async": false,
        "lineno": 655,
        "scope": "module",
        "params": [
          "engine"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "create_all"
        ]
      },
      {
        "name": "drop_all_tables",
        "qualified_name": "drop_all_tables",
        "is_async": false,
        "lineno": 660,
        "scope": "module",
        "params": [
          "engine"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "drop_all"
        ]
      }
    ],
    "found_classes": [
      "TradeSide",
      "TradeStatus",
      "PositionStatus",
      "AlertPriority",
      "Trade",
      "Position",
      "MarketData",
      "Alert",
      "TokenAnalysis",
      "PerformanceMetrics",
      "WhaleWallet",
      "MEVTransaction",
      "SystemLog"
    ],
    "class_bases": {
      "TradeSide": [
        "Enum"
      ],
      "TradeStatus": [
        "Enum"
      ],
      "PositionStatus": [
        "Enum"
      ],
      "AlertPriority": [
        "Enum"
      ],
      "Trade": [
        "Base"
      ],
      "Position": [
        "Base"
      ],
      "MarketData": [
        "Base"
      ],
      "Alert": [
        "Base"
      ],
      "TokenAnalysis": [
        "Base"
      ],
      "PerformanceMetrics": [
        "Base"
      ],
      "WhaleWallet": [
        "Base"
      ],
      "MEVTransaction": [
        "Base"
      ],
      "SystemLog": [
        "Base"
      ]
    },
    "missing": [
      "class Performance (closest: PerformanceMetrics)"
    ],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "analysis/rug_detector.py": {
    "path": "analysis\\rug_detector.py",
    "exists": true,
    "expected": [
      {
        "name": "analyze_token",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_liquidity_removal_risk",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "liquidity_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_ownership_concentration",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "holder_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_contract_vulnerabilities",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "contract_code"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_rug_score",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "factors"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "RugDetector.__init__",
        "is_async": false,
        "lineno": 22,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_initialize_web3"
        ]
      },
      {
        "name": "_initialize_web3",
        "qualified_name": "RugDetector._initialize_web3",
        "is_async": false,
        "lineno": 51,
        "scope": "class:RugDetector",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "items",
          "Web3",
          "HTTPProvider",
          "info"
        ]
      },
      {
        "name": "analyze_contract",
        "qualified_name": "RugDetector.analyze_contract",
        "is_async": true,
        "lineno": 66,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "isoformat",
          "now",
          "is_address",
          "get_code",
          "len",
          "_check_risky_functions",
          "update",
          "_check_ownership",
          "update",
          "_check_proxy_pattern",
          "_check_verification",
          "_calculate_contract_risk_score",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "append"
        ]
      },
      {
        "name": "_check_risky_functions",
        "qualified_name": "RugDetector._check_risky_functions",
        "is_async": true,
        "lineno": 139,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "address",
          "chain",
          "code"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, bool]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hex",
          "items"
        ]
      },
      {
        "name": "_check_ownership",
        "qualified_name": "RugDetector._check_ownership",
        "is_async": true,
        "lineno": 193,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "contract",
          "to_checksum_address",
          "call",
          "owner",
          "get_code",
          "len",
          "get_balance",
          "debug"
        ]
      },
      {
        "name": "_check_proxy_pattern",
        "qualified_name": "RugDetector._check_proxy_pattern",
        "is_async": true,
        "lineno": 245,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_storage_at",
          "get_storage_at",
          "debug"
        ]
      },
      {
        "name": "_check_verification",
        "qualified_name": "RugDetector._check_verification",
        "is_async": true,
        "lineno": 275,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "upper",
          "ClientSession",
          "get",
          "json",
          "get",
          "error"
        ]
      },
      {
        "name": "check_liquidity_lock",
        "qualified_name": "RugDetector.check_liquidity_lock",
        "is_async": true,
        "lineno": 318,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_check_lock_provider",
          "update",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append"
        ]
      },
      {
        "name": "_check_lock_provider",
        "qualified_name": "RugDetector._check_lock_provider",
        "is_async": true,
        "lineno": 370,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "token",
          "chain",
          "provider"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "analyze_holder_distribution",
        "qualified_name": "RugDetector.analyze_holder_distribution",
        "is_async": true,
        "lineno": 388,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_token_holders",
          "len",
          "sum",
          "sorted",
          "sum",
          "sorted",
          "sum",
          "len",
          "append",
          "get",
          "get",
          "len",
          "append",
          "len",
          "append",
          "append",
          "len",
          "_calculate_holder_risk_score"
        ]
      },
      {
        "name": "_get_token_holders",
        "qualified_name": "RugDetector._get_token_holders",
        "is_async": true,
        "lineno": 460,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_contract_risk_score",
        "qualified_name": "RugDetector._calculate_contract_risk_score",
        "is_async": false,
        "lineno": 475,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "checks"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min"
        ]
      },
      {
        "name": "_calculate_holder_risk_score",
        "qualified_name": "RugDetector._calculate_holder_risk_score",
        "is_async": false,
        "lineno": 503,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "distribution"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "min"
        ]
      },
      {
        "name": "comprehensive_analysis",
        "qualified_name": "RugDetector.comprehensive_analysis",
        "is_async": true,
        "lineno": 536,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "isoformat",
          "now",
          "analyze_contract",
          "check_liquidity_lock",
          "analyze_holder_distribution",
          "gather",
          "isinstance",
          "isinstance",
          "isinstance",
          "append",
          "get",
          "extend",
          "get",
          "append",
          "extend",
          "get",
          "append",
          "get",
          "extend",
          "get",
          "sum",
          "len",
          "append",
          "append",
          "append",
          "append",
          "info"
        ]
      },
      {
        "name": "analyze_token",
        "qualified_name": "RugDetector.analyze_token",
        "is_async": true,
        "lineno": 621,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "comprehensive_analysis"
        ]
      },
      {
        "name": "check_ownership_concentration",
        "qualified_name": "RugDetector.check_ownership_concentration",
        "is_async": false,
        "lineno": 649,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "holder_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min"
        ]
      },
      {
        "name": "check_contract_vulnerabilities",
        "qualified_name": "RugDetector.check_contract_vulnerabilities",
        "is_async": false,
        "lineno": 696,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "contract_code"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "lower",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "count",
          "append",
          "append"
        ]
      },
      {
        "name": "calculate_rug_score",
        "qualified_name": "RugDetector.calculate_rug_score",
        "is_async": false,
        "lineno": 748,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "factors"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min"
        ]
      },
      {
        "name": "check_liquidity_removal_risk",
        "qualified_name": "RugDetector.check_liquidity_removal_risk",
        "is_async": false,
        "lineno": 807,
        "scope": "class:RugDetector",
        "params": [
          "self",
          "liquidity_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "now",
          "get",
          "get",
          "len",
          "sum",
          "get",
          "get",
          "min"
        ]
      }
    ],
    "found_classes": [
      "RugDetector"
    ],
    "class_bases": {
      "RugDetector": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "analysis/pump_predictor.py": {
    "path": "analysis\\pump_predictor.py",
    "exists": true,
    "expected": [
      {
        "name": "predict_pump",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "analyze_volume_patterns",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "volume_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "detect_accumulation_phase",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "price_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_pump_probability",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "indicators"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "PumpPredictorAnalysis.__init__",
        "is_async": false,
        "lineno": 54,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "db_manager",
          "cache_manager",
          "event_bus",
          "ml_predictor",
          "market_analyzer",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "predict_pump",
        "qualified_name": "PumpPredictorAnalysis.predict_pump",
        "is_async": true,
        "lineno": 103,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "PumpSignal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_gather_prediction_data",
          "predict_pump_probability",
          "DataFrame",
          "_analyze_pump_patterns",
          "_detect_accumulation_phase",
          "_analyze_whale_activity",
          "_analyze_social_momentum",
          "_combine_signals",
          "_identify_pump_type",
          "_calculate_expected_metrics",
          "_calculate_entry_exit_points",
          "_assess_pump_risk",
          "PumpSignal",
          "get",
          "_get_signal_strength",
          "utcnow",
          "_process_significant_signal",
          "error",
          "_get_default_signal"
        ]
      },
      {
        "name": "detect_ongoing_pump",
        "qualified_name": "PumpPredictorAnalysis.detect_ongoing_pump",
        "is_async": true,
        "lineno": 194,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_realtime_data",
          "_get_recent_price_volume",
          "_detect_price_spike",
          "_detect_volume_spike",
          "_calculate_momentum_indicators",
          "_calculate_pump_metrics",
          "_estimate_remaining_potential",
          "_get_exit_recommendation",
          "get",
          "get",
          "get",
          "get",
          "get",
          "utcnow",
          "error",
          "str"
        ]
      },
      {
        "name": "analyze_pump_history",
        "qualified_name": "PumpPredictorAnalysis.analyze_pump_history",
        "is_async": true,
        "lineno": 261,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "token",
          "chain",
          "days"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_pump_history",
          "_identify_historical_pumps",
          "_analyze_pump_patterns_historical",
          "len",
          "mean",
          "mean",
          "len",
          "max",
          "sum",
          "max",
          "len",
          "_identify_common_patterns",
          "_predict_next_pump_timing",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "monitor_pump_completion",
        "qualified_name": "PumpPredictorAnalysis.monitor_pump_completion",
        "is_async": true,
        "lineno": 315,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_realtime_data",
          "Decimal",
          "str",
          "float",
          "enumerate",
          "total_seconds",
          "utcnow",
          "_determine_pump_status",
          "abs",
          "max",
          "save_pump_result",
          "utcnow",
          "_get_completion_recommendation",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "_gather_prediction_data",
        "qualified_name": "PumpPredictorAnalysis._gather_prediction_data",
        "is_async": true,
        "lineno": 381,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_price_data",
          "get_volume_data",
          "_get_orderbook_data",
          "get_whale_activity",
          "_get_social_data",
          "analyze_market_conditions"
        ]
      },
      {
        "name": "_analyze_pump_patterns",
        "qualified_name": "PumpPredictorAnalysis._analyze_pump_patterns",
        "is_async": true,
        "lineno": 403,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_check_accumulation_pattern",
          "_calculate_accumulation_strength",
          "_check_breakout_pattern",
          "_calculate_breakout_strength",
          "_analyze_volume_pattern"
        ]
      },
      {
        "name": "_detect_accumulation_phase",
        "qualified_name": "PumpPredictorAnalysis._detect_accumulation_phase",
        "is_async": true,
        "lineno": 428,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "DataFrame",
          "len",
          "max",
          "min",
          "mean",
          "std",
          "pct_change",
          "len",
          "mean",
          "mean",
          "len",
          "error"
        ]
      },
      {
        "name": "_combine_signals",
        "qualified_name": "PumpPredictorAnalysis._combine_signals",
        "is_async": true,
        "lineno": 470,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "ml_probability",
          "pattern_signals",
          "accumulation",
          "whale_signals",
          "social_signals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_calculate_pattern_probability",
          "get",
          "get",
          "get",
          "sum",
          "keys",
          "sum",
          "values",
          "min"
        ]
      },
      {
        "name": "_identify_pump_type",
        "qualified_name": "PumpPredictorAnalysis._identify_pump_type",
        "is_async": false,
        "lineno": 508,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "pattern_signals",
          "whale_signals",
          "social_signals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_calculate_expected_metrics",
        "qualified_name": "PumpPredictorAnalysis._calculate_expected_metrics",
        "is_async": true,
        "lineno": 526,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "data",
          "probability",
          "pump_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "int"
        ]
      },
      {
        "name": "_calculate_entry_exit_points",
        "qualified_name": "PumpPredictorAnalysis._calculate_entry_exit_points",
        "is_async": true,
        "lineno": 559,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "data",
          "expected_metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "Decimal",
          "Decimal",
          "str",
          "Decimal",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "_assess_pump_risk",
        "qualified_name": "PumpPredictorAnalysis._assess_pump_risk",
        "is_async": false,
        "lineno": 587,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "probability",
          "pump_type",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_get_signal_strength",
        "qualified_name": "PumpPredictorAnalysis._get_signal_strength",
        "is_async": false,
        "lineno": 629,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "probability"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_process_significant_signal",
        "qualified_name": "PumpPredictorAnalysis._process_significant_signal",
        "is_async": true,
        "lineno": 640,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "save_pump_signal",
          "set",
          "emit",
          "upper",
          "upper",
          "join",
          "upper",
          "send_alert"
        ]
      },
      {
        "name": "_detect_price_spike",
        "qualified_name": "PumpPredictorAnalysis._detect_price_spike",
        "is_async": true,
        "lineno": 679,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len"
        ]
      },
      {
        "name": "_detect_volume_spike",
        "qualified_name": "PumpPredictorAnalysis._detect_volume_spike",
        "is_async": true,
        "lineno": 697,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "mean",
          "mean"
        ]
      },
      {
        "name": "_determine_pump_status",
        "qualified_name": "PumpPredictorAnalysis._determine_pump_status",
        "is_async": false,
        "lineno": 715,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "price_change",
          "expected_magnitude",
          "duration",
          "expected_duration",
          "targets_hit"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "len"
        ]
      },
      {
        "name": "_get_default_signal",
        "qualified_name": "PumpPredictorAnalysis._get_default_signal",
        "is_async": false,
        "lineno": 735,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "PumpSignal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "PumpSignal",
          "Decimal",
          "Decimal",
          "utcnow"
        ]
      },
      {
        "name": "analyze_volume_patterns",
        "qualified_name": "PumpPredictorAnalysis.analyze_volume_patterns",
        "is_async": false,
        "lineno": 759,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "volume_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "array",
          "get",
          "isinstance",
          "len",
          "float",
          "mean",
          "len",
          "float",
          "len",
          "len",
          "len",
          "len",
          "mean",
          "mean",
          "len",
          "get",
          "isinstance",
          "abs"
        ]
      },
      {
        "name": "detect_accumulation_phase_sync",
        "qualified_name": "PumpPredictorAnalysis.detect_accumulation_phase_sync",
        "is_async": false,
        "lineno": 823,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "price_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_event_loop",
          "run_until_complete",
          "_detect_accumulation_phase",
          "get"
        ]
      },
      {
        "name": "detect_accumulation_phase",
        "qualified_name": "PumpPredictorAnalysis.detect_accumulation_phase",
        "is_async": false,
        "lineno": 848,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "price_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "isinstance",
          "get",
          "array",
          "max",
          "min",
          "mean",
          "diff",
          "std",
          "error"
        ]
      },
      {
        "name": "calculate_pump_probability",
        "qualified_name": "PumpPredictorAnalysis.calculate_pump_probability",
        "is_async": false,
        "lineno": 899,
        "scope": "class:PumpPredictorAnalysis",
        "params": [
          "self",
          "indicators"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min",
          "max"
        ]
      }
    ],
    "found_classes": [
      "PumpSignal",
      "PumpPattern",
      "PumpPredictorAnalysis"
    ],
    "class_bases": {
      "PumpSignal": [],
      "PumpPattern": [],
      "PumpPredictorAnalysis": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "analysis/liquidity_monitor.py": {
    "path": "analysis\\liquidity_monitor.py",
    "exists": true,
    "expected": [
      {
        "name": "monitor_liquidity",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_liquidity_depth",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "pair_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_slippage",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "amount",
          "liquidity_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "track_liquidity_changes",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "AsyncGenerator",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "LiquidityMonitor.__init__",
        "is_async": false,
        "lineno": 52,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "db_manager",
          "cache_manager",
          "event_bus",
          "alerts",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "start_monitoring",
        "qualified_name": "LiquidityMonitor.start_monitoring",
        "is_async": true,
        "lineno": 84,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "tokens"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "len",
          "create_task",
          "_monitor_token_liquidity",
          "append",
          "create_task",
          "_periodic_health_check",
          "error"
        ]
      },
      {
        "name": "stop_monitoring",
        "qualified_name": "LiquidityMonitor.stop_monitoring",
        "is_async": true,
        "lineno": 100,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "pop",
          "cancel",
          "clear",
          "clear"
        ]
      },
      {
        "name": "monitor_liquidity_changes",
        "qualified_name": "LiquidityMonitor.monitor_liquidity_changes",
        "is_async": true,
        "lineno": 110,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_current_liquidity",
          "get",
          "get_liquidity_history",
          "_calculate_liquidity_changes",
          "_detect_liquidity_anomalies",
          "set",
          "_emit_liquidity_event",
          "_calculate_liquidity_health",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "detect_liquidity_removal",
        "qualified_name": "LiquidityMonitor.detect_liquidity_removal",
        "is_async": true,
        "lineno": 159,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_liquidity_transactions",
          "Decimal",
          "utcnow",
          "timedelta",
          "Decimal",
          "str",
          "float",
          "append",
          "get",
          "_is_suspicious_wallet",
          "append",
          "min",
          "total_seconds",
          "max",
          "_calculate_removal_risk_score",
          "_detect_rug_patterns",
          "_send_liquidity_alert",
          "_get_removal_recommendation",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "calculate_slippage",
        "qualified_name": "LiquidityMonitor.calculate_slippage",
        "is_async": false,
        "lineno": 229,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "amount",
          "liquidity_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "Decimal",
          "Decimal",
          "abs",
          "Decimal",
          "error",
          "Decimal"
        ]
      },
      {
        "name": "calculate_slippage_async",
        "qualified_name": "LiquidityMonitor.calculate_slippage_async",
        "is_async": true,
        "lineno": 266,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain",
          "amount",
          "is_buy"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "SlippageEstimate",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_liquidity_depth",
          "get",
          "_calculate_orderbook_slippage",
          "_calculate_amm_slippage",
          "_calculate_price_impact",
          "_determine_slippage_risk",
          "_get_slippage_recommendation",
          "SlippageEstimate",
          "error",
          "SlippageEstimate",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "analyze_liquidity_locks",
        "qualified_name": "LiquidityMonitor.analyze_liquidity_locks",
        "is_async": true,
        "lineno": 342,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_check_lock_platform",
          "get",
          "utcnow",
          "max",
          "min",
          "min",
          "error"
        ]
      },
      {
        "name": "get_liquidity_providers",
        "qualified_name": "LiquidityMonitor.get_liquidity_providers",
        "is_async": true,
        "lineno": 388,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_pool_data",
          "_get_lp_token_holders",
          "sum",
          "append",
          "_is_lp_locked",
          "get",
          "get",
          "sorted",
          "error"
        ]
      },
      {
        "name": "_monitor_token_liquidity",
        "qualified_name": "LiquidityMonitor._monitor_token_liquidity",
        "is_async": true,
        "lineno": 431,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "keys",
          "monitor_liquidity_changes",
          "get",
          "get",
          "detect_liquidity_removal",
          "save_liquidity_snapshot",
          "get",
          "get",
          "get",
          "get",
          "get",
          "utcnow",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_calculate_amm_slippage",
        "qualified_name": "LiquidityMonitor._calculate_amm_slippage",
        "is_async": true,
        "lineno": 457,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "liquidity_data",
          "amount",
          "is_buy"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "Decimal",
          "str",
          "Decimal",
          "Decimal",
          "float",
          "abs",
          "Decimal",
          "Decimal",
          "float",
          "abs",
          "error",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "_determine_slippage_risk",
        "qualified_name": "LiquidityMonitor._determine_slippage_risk",
        "is_async": false,
        "lineno": 501,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "slippage"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_slippage_recommendation",
        "qualified_name": "LiquidityMonitor._get_slippage_recommendation",
        "is_async": false,
        "lineno": 512,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "slippage",
          "price_impact",
          "liquidity_depth"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_send_liquidity_alert",
        "qualified_name": "LiquidityMonitor._send_liquidity_alert",
        "is_async": true,
        "lineno": 528,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain",
          "analysis",
          "severity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "upper",
          "get",
          "get",
          "len",
          "get",
          "get",
          "get",
          "send_alert"
        ]
      },
      {
        "name": "monitor_liquidity",
        "qualified_name": "LiquidityMonitor.monitor_liquidity",
        "is_async": true,
        "lineno": 555,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "monitor_liquidity_changes"
        ]
      },
      {
        "name": "get_liquidity_depth",
        "qualified_name": "LiquidityMonitor.get_liquidity_depth",
        "is_async": true,
        "lineno": 574,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "pair_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_pool_data",
          "Decimal",
          "get",
          "get",
          "get",
          "get",
          "Decimal",
          "str",
          "get",
          "error",
          "Decimal",
          "str"
        ]
      },
      {
        "name": "get_liquidity_depth_extended",
        "qualified_name": "LiquidityMonitor.get_liquidity_depth_extended",
        "is_async": true,
        "lineno": 628,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "pair_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_pool_data",
          "Decimal",
          "get",
          "get",
          "get",
          "get",
          "Decimal",
          "str",
          "get",
          "error",
          "Decimal",
          "str"
        ]
      },
      {
        "name": "track_liquidity_changes",
        "qualified_name": "LiquidityMonitor.track_liquidity_changes",
        "is_async": true,
        "lineno": 675,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "utcnow",
          "monitor_liquidity_changes",
          "get",
          "get",
          "get",
          "utcnow",
          "detect_liquidity_removal",
          "get",
          "get",
          "utcnow",
          "sleep",
          "pop",
          "error",
          "pop"
        ]
      },
      {
        "name": "track_liquidity_changes_extended",
        "qualified_name": "LiquidityMonitor.track_liquidity_changes_extended",
        "is_async": true,
        "lineno": 730,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "utcnow",
          "monitor_liquidity_changes",
          "get",
          "get",
          "get",
          "utcnow",
          "detect_liquidity_removal",
          "get",
          "get",
          "utcnow",
          "sleep",
          "pop",
          "error",
          "pop"
        ]
      },
      {
        "name": "calculate_slippage_sync",
        "qualified_name": "LiquidityMonitor.calculate_slippage_sync",
        "is_async": false,
        "lineno": 778,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "amount",
          "liquidity_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_event_loop",
          "run_until_complete",
          "calculate_slippage",
          "Decimal",
          "str"
        ]
      },
      {
        "name": "_get_current_liquidity",
        "qualified_name": "LiquidityMonitor._get_current_liquidity",
        "is_async": true,
        "lineno": 811,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "utcnow"
        ]
      },
      {
        "name": "_calculate_liquidity_changes",
        "qualified_name": "LiquidityMonitor._calculate_liquidity_changes",
        "is_async": true,
        "lineno": 821,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "current",
          "history"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get"
        ]
      },
      {
        "name": "_detect_liquidity_anomalies",
        "qualified_name": "LiquidityMonitor._detect_liquidity_anomalies",
        "is_async": true,
        "lineno": 839,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "changes",
          "history"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "abs",
          "get",
          "append"
        ]
      },
      {
        "name": "_calculate_liquidity_health",
        "qualified_name": "LiquidityMonitor._calculate_liquidity_health",
        "is_async": true,
        "lineno": 848,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "liquidity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "min"
        ]
      },
      {
        "name": "_emit_liquidity_event",
        "qualified_name": "LiquidityMonitor._emit_liquidity_event",
        "is_async": true,
        "lineno": 862,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain",
          "changes"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "emit",
          "utcnow"
        ]
      },
      {
        "name": "_get_liquidity_transactions",
        "qualified_name": "LiquidityMonitor._get_liquidity_transactions",
        "is_async": true,
        "lineno": 871,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_is_suspicious_wallet",
        "qualified_name": "LiquidityMonitor._is_suspicious_wallet",
        "is_async": true,
        "lineno": 876,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "wallet"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_removal_risk_score",
        "qualified_name": "LiquidityMonitor._calculate_removal_risk_score",
        "is_async": true,
        "lineno": 881,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "min"
        ]
      },
      {
        "name": "_detect_rug_patterns",
        "qualified_name": "LiquidityMonitor._detect_rug_patterns",
        "is_async": true,
        "lineno": 896,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain",
          "analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_removal_recommendation",
        "qualified_name": "LiquidityMonitor._get_removal_recommendation",
        "is_async": false,
        "lineno": 904,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_liquidity_depth",
        "qualified_name": "LiquidityMonitor._get_liquidity_depth",
        "is_async": true,
        "lineno": 913,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_liquidity_depth"
        ]
      },
      {
        "name": "_get_pool_data",
        "qualified_name": "LiquidityMonitor._get_pool_data",
        "is_async": true,
        "lineno": 917,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_orderbook_slippage",
        "qualified_name": "LiquidityMonitor._calculate_orderbook_slippage",
        "is_async": true,
        "lineno": 929,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "liquidity_data",
          "amount",
          "is_buy"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "_calculate_price_impact",
        "qualified_name": "LiquidityMonitor._calculate_price_impact",
        "is_async": true,
        "lineno": 939,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "liquidity_data",
          "amount",
          "is_buy"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "Decimal",
          "float",
          "min"
        ]
      },
      {
        "name": "_check_lock_platform",
        "qualified_name": "LiquidityMonitor._check_lock_platform",
        "is_async": true,
        "lineno": 948,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain",
          "platform"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_lp_token_holders",
        "qualified_name": "LiquidityMonitor._get_lp_token_holders",
        "is_async": true,
        "lineno": 958,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "lp_token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_is_lp_locked",
        "qualified_name": "LiquidityMonitor._is_lp_locked",
        "is_async": true,
        "lineno": 963,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_recent_price_volume",
        "qualified_name": "LiquidityMonitor._get_recent_price_volume",
        "is_async": true,
        "lineno": 967,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain",
          "minutes"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_realtime_data",
        "qualified_name": "LiquidityMonitor._get_realtime_data",
        "is_async": true,
        "lineno": 972,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_momentum_indicators",
        "qualified_name": "LiquidityMonitor._calculate_momentum_indicators",
        "is_async": true,
        "lineno": 976,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_pump_metrics",
        "qualified_name": "LiquidityMonitor._calculate_pump_metrics",
        "is_async": true,
        "lineno": 980,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "data",
          "price_spike",
          "volume_spike"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_estimate_remaining_potential",
        "qualified_name": "LiquidityMonitor._estimate_remaining_potential",
        "is_async": true,
        "lineno": 988,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "data",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_exit_recommendation",
        "qualified_name": "LiquidityMonitor._get_exit_recommendation",
        "is_async": false,
        "lineno": 992,
        "scope": "class:LiquidityMonitor",
        "params": [
          "self",
          "metrics",
          "potential"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      }
    ],
    "found_classes": [
      "LiquidityEvent",
      "SlippageEstimate",
      "LiquidityMonitor"
    ],
    "class_bases": {
      "LiquidityEvent": [],
      "SlippageEstimate": [],
      "LiquidityMonitor": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "analysis/market_analyzer.py": {
    "path": "analysis\\market_analyzer.py",
    "exists": true,
    "expected": [
      {
        "name": "analyze_market",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_market_sentiment",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "identify_market_trends",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_market_indicators",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "MarketAnalyzer.__init__",
        "is_async": false,
        "lineno": 60,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "db_manager",
          "cache_manager",
          "event_bus",
          "ml_model",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "analyze_market_conditions",
        "qualified_name": "MarketAnalyzer.analyze_market_conditions",
        "is_async": true,
        "lineno": 102,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "tokens",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "MarketCondition",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_market_data",
          "_get_top_tokens_data",
          "_calculate_market_metrics",
          "_determine_market_trend",
          "_calculate_market_volatility",
          "_assess_market_liquidity",
          "_analyze_market_sentiment",
          "_calculate_market_momentum",
          "_identify_market_phase",
          "_calculate_market_risk",
          "_calculate_analysis_confidence",
          "MarketCondition",
          "emit",
          "error",
          "MarketCondition"
        ]
      },
      {
        "name": "identify_trends",
        "qualified_name": "MarketAnalyzer.identify_trends",
        "is_async": true,
        "lineno": 175,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "token",
          "chain",
          "timeframe"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TrendAnalysis",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_price_history",
          "len",
          "warning",
          "_get_default_trend_analysis",
          "DataFrame",
          "to_numeric",
          "_calculate_trend_indicators",
          "_identify_support_resistance",
          "_calculate_trend_metrics",
          "_predict_trend_changes",
          "_calculate_price_target",
          "TrendAnalysis",
          "error",
          "_get_default_trend_analysis"
        ]
      },
      {
        "name": "calculate_correlations",
        "qualified_name": "MarketAnalyzer.calculate_correlations",
        "is_async": true,
        "lineno": 228,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "tokens",
          "chain",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "CorrelationMatrix",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "join",
          "sorted",
          "get",
          "_is_correlation_cache_valid",
          "CorrelationMatrix",
          "get_historical_data",
          "Series",
          "len",
          "warning",
          "_get_default_correlation_matrix",
          "DataFrame",
          "dropna",
          "pct_change",
          "corr",
          "_identify_correlation_clusters",
          "_find_independent_tokens",
          "_find_max_correlation_pairs",
          "_calculate_portfolio_risk",
          "CorrelationMatrix",
          "set",
          "utcnow",
          "error",
          "_get_default_correlation_matrix"
        ]
      },
      {
        "name": "detect_market_regime",
        "qualified_name": "MarketAnalyzer.detect_market_regime",
        "is_async": true,
        "lineno": 302,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_recent_market_data",
          "_calculate_volatility",
          "_calculate_trend_strength",
          "_analyze_volume_profile",
          "items",
          "abs",
          "abs",
          "_get_regime_characteristics",
          "_get_regime_recommendation",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "find_market_inefficiencies",
        "qualified_name": "MarketAnalyzer.find_market_inefficiencies",
        "is_async": true,
        "lineno": 360,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "tokens",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_multi_dex_prices",
          "len",
          "values",
          "min",
          "max",
          "min",
          "items",
          "max",
          "items",
          "append",
          "get",
          "get",
          "_calculate_arbitrage_risk",
          "get",
          "get",
          "sort",
          "get",
          "error"
        ]
      },
      {
        "name": "analyze_volume_patterns",
        "qualified_name": "MarketAnalyzer.analyze_volume_patterns",
        "is_async": true,
        "lineno": 418,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_volume_history",
          "DataFrame",
          "to_numeric",
          "to_datetime",
          "float",
          "mean",
          "float",
          "median",
          "float",
          "std",
          "len",
          "float",
          "_detect_volume_spikes",
          "_analyze_volume_trend",
          "_detect_wash_trading",
          "_create_volume_profile",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "_calculate_market_metrics",
        "qualified_name": "MarketAnalyzer._calculate_market_metrics",
        "is_async": true,
        "lineno": 476,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "mean",
          "sum",
          "mean",
          "sum",
          "sum",
          "sum",
          "max",
          "std",
          "len",
          "error"
        ]
      },
      {
        "name": "_determine_market_trend",
        "qualified_name": "MarketAnalyzer._determine_market_trend",
        "is_async": true,
        "lineno": 518,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min",
          "abs"
        ]
      },
      {
        "name": "_calculate_market_volatility",
        "qualified_name": "MarketAnalyzer._calculate_market_volatility",
        "is_async": true,
        "lineno": 559,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "_identify_correlation_clusters",
        "qualified_name": "MarketAnalyzer._identify_correlation_clusters",
        "is_async": true,
        "lineno": 577,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "correlation_matrix",
          "threshold"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[List[str]]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "set",
          "add",
          "abs",
          "append",
          "add",
          "len",
          "append"
        ]
      },
      {
        "name": "_calculate_market_risk",
        "qualified_name": "MarketAnalyzer._calculate_market_risk",
        "is_async": false,
        "lineno": 604,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "volatility",
          "liquidity",
          "sentiment"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_detect_volume_spikes",
        "qualified_name": "MarketAnalyzer._detect_volume_spikes",
        "is_async": false,
        "lineno": 643,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "df"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "mean",
          "rolling",
          "std",
          "rolling",
          "append",
          "float",
          "float"
        ]
      },
      {
        "name": "_get_regime_recommendation",
        "qualified_name": "MarketAnalyzer._get_regime_recommendation",
        "is_async": false,
        "lineno": 666,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "regime"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "analyze_market",
        "qualified_name": "MarketAnalyzer.analyze_market",
        "is_async": true,
        "lineno": 683,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "analyze_market_conditions",
          "utcnow"
        ]
      },
      {
        "name": "calculate_market_sentiment",
        "qualified_name": "MarketAnalyzer.calculate_market_sentiment",
        "is_async": false,
        "lineno": 711,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "values",
          "isinstance",
          "append",
          "sum",
          "isinstance",
          "len",
          "int",
          "utcnow",
          "utcnow"
        ]
      },
      {
        "name": "identify_market_trends",
        "qualified_name": "MarketAnalyzer.identify_market_trends",
        "is_async": false,
        "lineno": 757,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "defaultdict",
          "values",
          "isinstance",
          "items",
          "append",
          "utcnow",
          "append",
          "append"
        ]
      },
      {
        "name": "get_market_indicators",
        "qualified_name": "MarketAnalyzer.get_market_indicators",
        "is_async": true,
        "lineno": 796,
        "scope": "class:MarketAnalyzer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "utcnow",
          "analyze_market_conditions",
          "calculate_market_sentiment",
          "identify_market_trends",
          "error"
        ]
      }
    ],
    "found_classes": [
      "MarketCondition",
      "TrendAnalysis",
      "CorrelationMatrix",
      "MarketAnalyzer"
    ],
    "class_bases": {
      "MarketCondition": [],
      "TrendAnalysis": [],
      "CorrelationMatrix": [],
      "MarketAnalyzer": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "analysis/token_scorer.py": {
    "path": "analysis\\token_scorer.py",
    "exists": true,
    "expected": [
      {
        "name": "score_token",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_fundamental_score",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "token_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_technical_score",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "price_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_social_score",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "social_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_overall_score",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "scores"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "TokenScorer.__init__",
        "is_async": false,
        "lineno": 55,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "db_manager",
          "cache_manager",
          "event_bus",
          "rug_detector",
          "liquidity_monitor",
          "market_analyzer",
          "ml_model",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "ScoringWeights",
          "get",
          "get"
        ]
      },
      {
        "name": "calculate_composite_score",
        "qualified_name": "TokenScorer.calculate_composite_score",
        "is_async": true,
        "lineno": 101,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TokenScore",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "_is_cache_valid",
          "get",
          "TokenScore",
          "_gather_scoring_data",
          "_calculate_category_scores",
          "_calculate_risk_score",
          "_calculate_opportunity_score",
          "_calculate_weighted_score",
          "_adjust_score_for_risk",
          "_determine_grade",
          "_generate_recommendation",
          "_identify_strengths",
          "_identify_weaknesses",
          "_calculate_confidence",
          "TokenScore",
          "utcnow",
          "set",
          "emit",
          "save_token_score",
          "utcnow",
          "error",
          "_get_default_score"
        ]
      },
      {
        "name": "rank_tokens",
        "qualified_name": "TokenScorer.rank_tokens",
        "is_async": true,
        "lineno": 186,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "tokens",
          "chain",
          "criteria"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "calculate_composite_score",
          "append",
          "_get_rank_value",
          "error",
          "sort",
          "sort",
          "sort",
          "get",
          "sort",
          "enumerate",
          "append",
          "error"
        ]
      },
      {
        "name": "compare_tokens",
        "qualified_name": "TokenScorer.compare_tokens",
        "is_async": true,
        "lineno": 239,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "token1",
          "token2",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "calculate_composite_score",
          "calculate_composite_score",
          "keys",
          "get",
          "get",
          "_generate_comparison_recommendation",
          "error"
        ]
      },
      {
        "name": "get_top_opportunities",
        "qualified_name": "TokenScorer.get_top_opportunities",
        "is_async": true,
        "lineno": 298,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "chain",
          "limit",
          "min_score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_recent_token_scores",
          "_get_token_data",
          "append",
          "get",
          "get",
          "get",
          "get",
          "get",
          "sort",
          "error"
        ]
      },
      {
        "name": "_gather_scoring_data",
        "qualified_name": "TokenScorer._gather_scoring_data",
        "is_async": true,
        "lineno": 349,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_token_data",
          "monitor_liquidity_changes",
          "comprehensive_analysis",
          "identify_trends",
          "_get_holder_distribution",
          "analyze_volume_patterns",
          "_get_social_metrics",
          "_get_developer_activity"
        ]
      },
      {
        "name": "_calculate_category_scores",
        "qualified_name": "TokenScorer._calculate_category_scores",
        "is_async": true,
        "lineno": 379,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "min",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min",
          "get",
          "get",
          "max",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min",
          "get",
          "get",
          "abs",
          "get",
          "get",
          "max",
          "_calculate_innovation_score"
        ]
      },
      {
        "name": "_calculate_risk_score",
        "qualified_name": "TokenScorer._calculate_risk_score",
        "is_async": true,
        "lineno": 425,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "append",
          "append",
          "get",
          "get",
          "append",
          "append",
          "get",
          "get",
          "append",
          "get",
          "get",
          "append",
          "min",
          "get",
          "get",
          "append",
          "sum",
          "min"
        ]
      },
      {
        "name": "_calculate_opportunity_score",
        "qualified_name": "TokenScorer._calculate_opportunity_score",
        "is_async": true,
        "lineno": 465,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "append",
          "get",
          "get",
          "get",
          "append",
          "min",
          "get",
          "append",
          "_is_undervalued",
          "append",
          "get",
          "get",
          "append",
          "min",
          "sum"
        ]
      },
      {
        "name": "_calculate_weighted_score",
        "qualified_name": "TokenScorer._calculate_weighted_score",
        "is_async": true,
        "lineno": 493,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "category_scores"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "get"
        ]
      },
      {
        "name": "_adjust_score_for_risk",
        "qualified_name": "TokenScorer._adjust_score_for_risk",
        "is_async": false,
        "lineno": 520,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "composite_score",
          "risk_score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_determine_grade",
        "qualified_name": "TokenScorer._determine_grade",
        "is_async": false,
        "lineno": 527,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items"
        ]
      },
      {
        "name": "_generate_recommendation",
        "qualified_name": "TokenScorer._generate_recommendation",
        "is_async": true,
        "lineno": 534,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "composite_score",
          "risk_score",
          "opportunity_score",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_identify_strengths",
        "qualified_name": "TokenScorer._identify_strengths",
        "is_async": false,
        "lineno": 555,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "category_scores",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "get",
          "get",
          "get",
          "append",
          "get",
          "get",
          "append"
        ]
      },
      {
        "name": "_identify_weaknesses",
        "qualified_name": "TokenScorer._identify_weaknesses",
        "is_async": false,
        "lineno": 584,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "category_scores",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "append",
          "append",
          "append",
          "append",
          "append",
          "append",
          "get",
          "get",
          "append",
          "get",
          "get",
          "get",
          "append"
        ]
      },
      {
        "name": "_calculate_confidence",
        "qualified_name": "TokenScorer._calculate_confidence",
        "is_async": false,
        "lineno": 613,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sum",
          "len",
          "append",
          "items",
          "isinstance",
          "isinstance",
          "total_seconds",
          "utcnow",
          "max",
          "append",
          "append",
          "get",
          "get",
          "append",
          "mean"
        ]
      },
      {
        "name": "_calculate_innovation_score",
        "qualified_name": "TokenScorer._calculate_innovation_score",
        "is_async": true,
        "lineno": 644,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min"
        ]
      },
      {
        "name": "_is_undervalued",
        "qualified_name": "TokenScorer._is_undervalued",
        "is_async": true,
        "lineno": 667,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_get_rank_value",
        "qualified_name": "TokenScorer._get_rank_value",
        "is_async": false,
        "lineno": 688,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "score",
          "criteria"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "_generate_comparison_recommendation",
        "qualified_name": "TokenScorer._generate_comparison_recommendation",
        "is_async": false,
        "lineno": 699,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "score1",
          "score2"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "abs"
        ]
      },
      {
        "name": "_is_cache_valid",
        "qualified_name": "TokenScorer._is_cache_valid",
        "is_async": false,
        "lineno": 714,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "timestamp"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "total_seconds",
          "utcnow"
        ]
      },
      {
        "name": "_get_default_score",
        "qualified_name": "TokenScorer._get_default_score",
        "is_async": false,
        "lineno": 722,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TokenScore",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "TokenScore",
          "utcnow"
        ]
      },
      {
        "name": "_get_token_data",
        "qualified_name": "TokenScorer._get_token_data",
        "is_async": true,
        "lineno": 739,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_token_info"
        ]
      },
      {
        "name": "_get_holder_distribution",
        "qualified_name": "TokenScorer._get_holder_distribution",
        "is_async": true,
        "lineno": 745,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_holder_distribution"
        ]
      },
      {
        "name": "_get_social_metrics",
        "qualified_name": "TokenScorer._get_social_metrics",
        "is_async": true,
        "lineno": 751,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_developer_activity",
        "qualified_name": "TokenScorer._get_developer_activity",
        "is_async": true,
        "lineno": 757,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "score_token",
        "qualified_name": "TokenScorer.score_token",
        "is_async": true,
        "lineno": 768,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "calculate_composite_score",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "calculate_fundamental_score",
        "qualified_name": "TokenScorer.calculate_fundamental_score",
        "is_async": false,
        "lineno": 799,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "token_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "min",
          "max"
        ]
      },
      {
        "name": "calculate_technical_score",
        "qualified_name": "TokenScorer.calculate_technical_score",
        "is_async": false,
        "lineno": 849,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "price_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min",
          "max"
        ]
      },
      {
        "name": "calculate_social_score",
        "qualified_name": "TokenScorer.calculate_social_score",
        "is_async": false,
        "lineno": 899,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "social_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "min",
          "max"
        ]
      },
      {
        "name": "get_overall_score",
        "qualified_name": "TokenScorer.get_overall_score",
        "is_async": false,
        "lineno": 943,
        "scope": "class:TokenScorer",
        "params": [
          "self",
          "scores"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "get",
          "get",
          "abs"
        ]
      }
    ],
    "found_classes": [
      "TokenScore",
      "ScoringWeights",
      "TokenScorer"
    ],
    "class_bases": {
      "TokenScore": [],
      "ScoringWeights": [],
      "TokenScorer": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "analysis/dev_analyzer.py": {
    "path": "analysis\\dev_analyzer.py",
    "exists": true,
    "expected": [
      {
        "name": "analyze_developer",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "DeveloperProfile",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "analyze_project",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "project_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ProjectAnalysis",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_developer_reputation",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "monitor_developer",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain",
          "interval",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "batch_analyze_developers",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "developers"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_risk_summary",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "profile"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "DeveloperAnalyzer.__init__",
        "is_async": false,
        "lineno": 89,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "set",
          "set",
          "get"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "DeveloperAnalyzer.initialize",
        "is_async": true,
        "lineno": 99,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "items",
          "Web3",
          "HTTPProvider",
          "info",
          "error",
          "get",
          "_load_developer_database",
          "info"
        ]
      },
      {
        "name": "analyze_developer",
        "qualified_name": "DeveloperAnalyzer.analyze_developer",
        "is_async": true,
        "lineno": 121,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "DeveloperProfile",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "is_address",
          "ValueError",
          "to_checksum_address",
          "now",
          "lower",
          "_create_rugger_profile",
          "lower",
          "_create_trusted_profile",
          "_get_developer_history",
          "_analyze_previous_projects",
          "_check_social_presence",
          "_find_associated_wallets",
          "len",
          "sum",
          "values",
          "get",
          "sum",
          "values",
          "get",
          "sum",
          "values",
          "get",
          "sum",
          "get",
          "values",
          "sum",
          "get",
          "values",
          "values",
          "get",
          "get",
          "append",
          "sum",
          "timedelta",
          "len",
          "timedelta",
          "_calculate_reputation",
          "_determine_risk_level",
          "_find_aliases",
          "DeveloperProfile",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "_log_developer_summary",
          "error"
        ]
      },
      {
        "name": "analyze_project",
        "qualified_name": "DeveloperAnalyzer.analyze_project",
        "is_async": true,
        "lineno": 236,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "project_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ProjectAnalysis",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "get",
          "_get_project_data",
          "_get_project_developer",
          "_check_liquidity_status",
          "_get_holder_statistics",
          "_analyze_code_quality",
          "_analyze_community_metrics",
          "_calculate_transparency_score",
          "_identify_red_flags",
          "_identify_green_flags",
          "_find_similar_projects",
          "_calculate_project_score",
          "len",
          "len",
          "_determine_project_status",
          "ProjectAnalysis",
          "get",
          "now",
          "get",
          "Decimal",
          "str",
          "get",
          "get",
          "get",
          "get",
          "now",
          "error"
        ]
      },
      {
        "name": "_get_developer_history",
        "qualified_name": "DeveloperAnalyzer._get_developer_history",
        "is_async": true,
        "lineno": 339,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "ClientSession",
          "get",
          "json",
          "get",
          "append",
          "get",
          "int",
          "get",
          "int",
          "get",
          "int",
          "get",
          "fromtimestamp",
          "int",
          "get",
          "fromtimestamp",
          "int",
          "get",
          "sum",
          "int",
          "get",
          "int",
          "get"
        ]
      },
      {
        "name": "_analyze_previous_projects",
        "qualified_name": "DeveloperAnalyzer._analyze_previous_projects",
        "is_async": true,
        "lineno": 403,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "history"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "fromtimestamp",
          "get",
          "now",
          "debug"
        ]
      },
      {
        "name": "_check_social_presence",
        "qualified_name": "DeveloperAnalyzer._check_social_presence",
        "is_async": true,
        "lineno": 445,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_find_associated_wallets",
        "qualified_name": "DeveloperAnalyzer._find_associated_wallets",
        "is_async": true,
        "lineno": 467,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "_find_aliases",
        "qualified_name": "DeveloperAnalyzer._find_aliases",
        "is_async": true,
        "lineno": 490,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "address",
          "associated_wallets"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_reputation",
        "qualified_name": "DeveloperAnalyzer._calculate_reputation",
        "is_async": false,
        "lineno": 504,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "projects",
          "social",
          "history"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "sum",
          "values",
          "get",
          "sum",
          "values",
          "get",
          "get",
          "get",
          "get",
          "get",
          "now",
          "max",
          "min"
        ]
      },
      {
        "name": "_determine_risk_level",
        "qualified_name": "DeveloperAnalyzer._determine_risk_level",
        "is_async": false,
        "lineno": 547,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "reputation",
          "projects"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "DeveloperRisk",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sum",
          "values",
          "get"
        ]
      },
      {
        "name": "_analyze_code_quality",
        "qualified_name": "DeveloperAnalyzer._analyze_code_quality",
        "is_async": true,
        "lineno": 572,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "project_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_project_data",
        "qualified_name": "DeveloperAnalyzer._get_project_data",
        "is_async": true,
        "lineno": 590,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "project_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "now"
        ]
      },
      {
        "name": "_get_project_developer",
        "qualified_name": "DeveloperAnalyzer._get_project_developer",
        "is_async": true,
        "lineno": 609,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "project_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_check_liquidity_status",
        "qualified_name": "DeveloperAnalyzer._check_liquidity_status",
        "is_async": true,
        "lineno": 620,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "project_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_holder_statistics",
        "qualified_name": "DeveloperAnalyzer._get_holder_statistics",
        "is_async": true,
        "lineno": 640,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "project_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_analyze_community_metrics",
        "qualified_name": "DeveloperAnalyzer._analyze_community_metrics",
        "is_async": true,
        "lineno": 658,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "project_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_transparency_score",
        "qualified_name": "DeveloperAnalyzer._calculate_transparency_score",
        "is_async": false,
        "lineno": 676,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "project_data",
          "liquidity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "min"
        ]
      },
      {
        "name": "_identify_red_flags",
        "qualified_name": "DeveloperAnalyzer._identify_red_flags",
        "is_async": false,
        "lineno": 697,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "project_data",
          "liquidity",
          "holders",
          "developer"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "append",
          "get",
          "append",
          "append",
          "get",
          "append",
          "get",
          "append"
        ]
      },
      {
        "name": "_identify_green_flags",
        "qualified_name": "DeveloperAnalyzer._identify_green_flags",
        "is_async": false,
        "lineno": 725,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "project_data",
          "liquidity",
          "holders",
          "code_quality"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "append",
          "get",
          "append"
        ]
      },
      {
        "name": "_find_similar_projects",
        "qualified_name": "DeveloperAnalyzer._find_similar_projects",
        "is_async": true,
        "lineno": 753,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "project_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_project_score",
        "qualified_name": "DeveloperAnalyzer._calculate_project_score",
        "is_async": false,
        "lineno": 767,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "code_quality",
          "community_score",
          "transparency",
          "red_flags_count",
          "green_flags_count"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "max",
          "min"
        ]
      },
      {
        "name": "_determine_project_status",
        "qualified_name": "DeveloperAnalyzer._determine_project_status",
        "is_async": false,
        "lineno": 788,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "project_data",
          "liquidity",
          "holders"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ProjectStatus",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get"
        ]
      },
      {
        "name": "_load_developer_database",
        "qualified_name": "DeveloperAnalyzer._load_developer_database",
        "is_async": true,
        "lineno": 807,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "set",
          "set"
        ]
      },
      {
        "name": "_create_rugger_profile",
        "qualified_name": "DeveloperAnalyzer._create_rugger_profile",
        "is_async": false,
        "lineno": 819,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "DeveloperProfile",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "DeveloperProfile",
          "Decimal",
          "Decimal",
          "timedelta"
        ]
      },
      {
        "name": "_create_trusted_profile",
        "qualified_name": "DeveloperAnalyzer._create_trusted_profile",
        "is_async": false,
        "lineno": 838,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "DeveloperProfile",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "DeveloperProfile",
          "Decimal",
          "Decimal",
          "timedelta"
        ]
      },
      {
        "name": "_log_developer_summary",
        "qualified_name": "DeveloperAnalyzer._log_developer_summary",
        "is_async": false,
        "lineno": 857,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "profile"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "info"
        ]
      },
      {
        "name": "check_developer_reputation",
        "qualified_name": "DeveloperAnalyzer.check_developer_reputation",
        "is_async": true,
        "lineno": 869,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "analyze_developer",
          "_get_recommendation"
        ]
      },
      {
        "name": "_get_recommendation",
        "qualified_name": "DeveloperAnalyzer._get_recommendation",
        "is_async": false,
        "lineno": 896,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "profile"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "monitor_developer",
        "qualified_name": "DeveloperAnalyzer.monitor_developer",
        "is_async": true,
        "lineno": 911,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "address",
          "chain",
          "interval",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "analyze_developer",
          "warning",
          "callback",
          "critical",
          "callback",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "batch_analyze_developers",
        "qualified_name": "DeveloperAnalyzer.batch_analyze_developers",
        "is_async": true,
        "lineno": 959,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "developers"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[DeveloperProfile]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "analyze_developer",
          "append",
          "gather",
          "enumerate",
          "isinstance",
          "error",
          "append"
        ]
      },
      {
        "name": "get_risk_summary",
        "qualified_name": "DeveloperAnalyzer.get_risk_summary",
        "is_async": false,
        "lineno": 988,
        "scope": "class:DeveloperAnalyzer",
        "params": [
          "self",
          "profile"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "upper",
          "append",
          "append",
          "append",
          "get",
          "append",
          "join"
        ]
      }
    ],
    "found_classes": [
      "DeveloperRisk",
      "ProjectStatus",
      "DeveloperProfile",
      "ProjectAnalysis",
      "DeveloperAnalyzer"
    ],
    "class_bases": {
      "DeveloperRisk": [
        "Enum"
      ],
      "ProjectStatus": [
        "Enum"
      ],
      "DeveloperProfile": [],
      "ProjectAnalysis": [],
      "DeveloperAnalyzer": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "analysis/smart_contract_analyzer.py": {
    "path": "analysis\\smart_contract_analyzer.py",
    "exists": true,
    "expected": [
      {
        "name": "analyze_contract",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain",
          "deep_analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ContractAnalysis",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "batch_analyze",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "contracts",
          "deep_analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "monitor_contract",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain",
          "interval",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "verify_token_safety",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_renounced_ownership",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "estimate_gas_usage",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "address",
          "chain",
          "function_name",
          "params"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_risk_summary",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "SmartContractAnalyzer.__init__",
        "is_async": false,
        "lineno": 92,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_load_vulnerability_patterns",
          "_load_function_signatures",
          "set",
          "get"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "SmartContractAnalyzer.initialize",
        "is_async": true,
        "lineno": 102,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "items",
          "Web3",
          "HTTPProvider",
          "info",
          "error",
          "get",
          "_load_malicious_contracts",
          "info"
        ]
      },
      {
        "name": "analyze_contract",
        "qualified_name": "SmartContractAnalyzer.analyze_contract",
        "is_async": true,
        "lineno": 124,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "address",
          "chain",
          "deep_analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ContractAnalysis",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "debug",
          "is_address",
          "ValueError",
          "to_checksum_address",
          "lower",
          "warning",
          "_create_malicious_analysis",
          "_fetch_contract_data",
          "_identify_contract_type",
          "_check_verification",
          "_analyze_proxy_pattern",
          "_get_owner",
          "get",
          "_analyze_vulnerabilities",
          "_analyze_permissions",
          "_analyze_fees",
          "_extract_functions",
          "_extract_modifiers",
          "_extract_events",
          "_analyze_storage",
          "_check_upgrade_mechanism",
          "_calculate_risk_score",
          "ContractAnalysis",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "_log_analysis_summary",
          "error"
        ]
      },
      {
        "name": "_fetch_contract_data",
        "qualified_name": "SmartContractAnalyzer._fetch_contract_data",
        "is_async": true,
        "lineno": 260,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get_code",
          "hex",
          "_fetch_from_etherscan",
          "update"
        ]
      },
      {
        "name": "_fetch_from_etherscan",
        "qualified_name": "SmartContractAnalyzer._fetch_from_etherscan",
        "is_async": true,
        "lineno": 281,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "ClientSession",
          "get",
          "json",
          "get",
          "loads",
          "get",
          "get",
          "get",
          "get",
          "int",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_identify_contract_type",
        "qualified_name": "SmartContractAnalyzer._identify_contract_type",
        "is_async": true,
        "lineno": 324,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "contract_data",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ContractType",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "issubset",
          "issubset",
          "len",
          "intersection",
          "issubset",
          "issubset"
        ]
      },
      {
        "name": "_check_verification",
        "qualified_name": "SmartContractAnalyzer._check_verification",
        "is_async": true,
        "lineno": 371,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_fetch_from_etherscan",
          "bool",
          "get"
        ]
      },
      {
        "name": "_analyze_proxy_pattern",
        "qualified_name": "SmartContractAnalyzer._analyze_proxy_pattern",
        "is_async": true,
        "lineno": 376,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "address",
          "contract_data",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[bool, Optional[str]]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get_storage_at",
          "to_checksum_address",
          "get",
          "get",
          "intersection"
        ]
      },
      {
        "name": "_get_owner",
        "qualified_name": "SmartContractAnalyzer._get_owner",
        "is_async": true,
        "lineno": 416,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "address",
          "contract_data",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "len",
          "get",
          "contract",
          "call",
          "getattr"
        ]
      },
      {
        "name": "_analyze_vulnerabilities",
        "qualified_name": "SmartContractAnalyzer._analyze_vulnerabilities",
        "is_async": true,
        "lineno": 448,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "source_code"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Vulnerability]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "search",
          "search",
          "append",
          "Vulnerability",
          "search",
          "search",
          "append",
          "Vulnerability",
          "search",
          "search",
          "append",
          "Vulnerability",
          "search",
          "append",
          "Vulnerability",
          "search",
          "append",
          "Vulnerability",
          "findall",
          "len",
          "append",
          "Vulnerability",
          "len",
          "search",
          "append",
          "Vulnerability",
          "search",
          "append",
          "Vulnerability",
          "findall",
          "findall",
          "len",
          "len",
          "append",
          "Vulnerability",
          "findall",
          "len",
          "append",
          "Vulnerability",
          "len"
        ]
      },
      {
        "name": "_analyze_permissions",
        "qualified_name": "SmartContractAnalyzer._analyze_permissions",
        "is_async": true,
        "lineno": 553,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "contract_data",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "search",
          "append",
          "append",
          "append",
          "findall",
          "list",
          "set",
          "findall",
          "list",
          "set"
        ]
      },
      {
        "name": "_analyze_fees",
        "qualified_name": "SmartContractAnalyzer._analyze_fees",
        "is_async": true,
        "lineno": 595,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "contract_data",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Decimal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "findall",
          "Decimal",
          "Decimal",
          "group",
          "search",
          "lower",
          "findall",
          "max",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "_extract_functions",
        "qualified_name": "SmartContractAnalyzer._extract_functions",
        "is_async": false,
        "lineno": 638,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "contract_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_extract_modifiers",
        "qualified_name": "SmartContractAnalyzer._extract_modifiers",
        "is_async": false,
        "lineno": 655,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "contract_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "findall",
          "list",
          "set"
        ]
      },
      {
        "name": "_extract_events",
        "qualified_name": "SmartContractAnalyzer._extract_events",
        "is_async": false,
        "lineno": 664,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "contract_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "append",
          "get"
        ]
      },
      {
        "name": "_analyze_storage",
        "qualified_name": "SmartContractAnalyzer._analyze_storage",
        "is_async": true,
        "lineno": 675,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_check_upgrade_mechanism",
        "qualified_name": "SmartContractAnalyzer._check_upgrade_mechanism",
        "is_async": true,
        "lineno": 691,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "contract_data",
          "is_proxy"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_calculate_risk_score",
        "qualified_name": "SmartContractAnalyzer._calculate_risk_score",
        "is_async": false,
        "lineno": 718,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "vulnerabilities",
          "is_verified",
          "is_proxy",
          "owner",
          "permissions",
          "fees",
          "upgrade_mechanism"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "len",
          "get",
          "get",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "min"
        ]
      },
      {
        "name": "_create_malicious_analysis",
        "qualified_name": "SmartContractAnalyzer._create_malicious_analysis",
        "is_async": false,
        "lineno": 773,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ContractAnalysis",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "ContractAnalysis",
          "Vulnerability"
        ]
      },
      {
        "name": "_load_malicious_contracts",
        "qualified_name": "SmartContractAnalyzer._load_malicious_contracts",
        "is_async": true,
        "lineno": 802,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "set"
        ]
      },
      {
        "name": "_load_vulnerability_patterns",
        "qualified_name": "SmartContractAnalyzer._load_vulnerability_patterns",
        "is_async": false,
        "lineno": 808,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_load_function_signatures",
        "qualified_name": "SmartContractAnalyzer._load_function_signatures",
        "is_async": false,
        "lineno": 821,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, str]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_log_analysis_summary",
        "qualified_name": "SmartContractAnalyzer._log_analysis_summary",
        "is_async": false,
        "lineno": 831,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "sum",
          "sum",
          "info"
        ]
      },
      {
        "name": "batch_analyze",
        "qualified_name": "SmartContractAnalyzer.batch_analyze",
        "is_async": true,
        "lineno": 848,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "contracts",
          "deep_analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[ContractAnalysis]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "analyze_contract",
          "append",
          "gather",
          "enumerate",
          "isinstance",
          "error",
          "append"
        ]
      },
      {
        "name": "monitor_contract",
        "qualified_name": "SmartContractAnalyzer.monitor_contract",
        "is_async": true,
        "lineno": 883,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "address",
          "chain",
          "interval",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "analyze_contract",
          "_detect_changes",
          "warning",
          "callback",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_detect_changes",
        "qualified_name": "SmartContractAnalyzer._detect_changes",
        "is_async": false,
        "lineno": 925,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "old_analysis",
          "new_analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "list",
          "abs"
        ]
      },
      {
        "name": "verify_token_safety",
        "qualified_name": "SmartContractAnalyzer.verify_token_safety",
        "is_async": true,
        "lineno": 963,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "token_address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "analyze_contract",
          "any",
          "any",
          "len",
          "get",
          "any",
          "Decimal",
          "values",
          "max"
        ]
      },
      {
        "name": "get_contract_creation_info",
        "qualified_name": "SmartContractAnalyzer.get_contract_creation_info",
        "is_async": true,
        "lineno": 1054,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "check_renounced_ownership",
        "qualified_name": "SmartContractAnalyzer.check_renounced_ownership",
        "is_async": true,
        "lineno": 1076,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "address",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "analyze_contract"
        ]
      },
      {
        "name": "estimate_gas_usage",
        "qualified_name": "SmartContractAnalyzer.estimate_gas_usage",
        "is_async": true,
        "lineno": 1089,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "address",
          "chain",
          "function_name",
          "params"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[int]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "_fetch_contract_data",
          "get",
          "contract",
          "getattr",
          "estimate_gas",
          "func",
          "error"
        ]
      },
      {
        "name": "get_risk_summary",
        "qualified_name": "SmartContractAnalyzer.get_risk_summary",
        "is_async": false,
        "lineno": 1124,
        "scope": "class:SmartContractAnalyzer",
        "params": [
          "self",
          "analysis"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append",
          "append",
          "sum",
          "append",
          "any",
          "Decimal",
          "values",
          "append",
          "append",
          "join"
        ]
      }
    ],
    "found_classes": [
      "VulnerabilityLevel",
      "ContractType",
      "Vulnerability",
      "ContractAnalysis",
      "SmartContractAnalyzer"
    ],
    "class_bases": {
      "VulnerabilityLevel": [
        "Enum"
      ],
      "ContractType": [
        "Enum"
      ],
      "Vulnerability": [],
      "ContractAnalysis": [],
      "SmartContractAnalyzer": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "ml/models/ensemble_model.py": {
    "path": "ml\\models\\ensemble_model.py",
    "exists": true,
    "expected": [
      {
        "name": "predict",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "combine_predictions",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "predictions"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_weighted_score",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "scores",
          "weights"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_confidence_level",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "predictions"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "update_weights",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "performance_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__post_init__",
        "qualified_name": "PredictionResult.__post_init__",
        "is_async": false,
        "lineno": 42,
        "scope": "class:PredictionResult",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "now"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "LSTMPricePredictor.__init__",
        "is_async": false,
        "lineno": 49,
        "scope": "class:LSTMPricePredictor",
        "params": [
          "self",
          "input_dim",
          "hidden_dim",
          "num_layers",
          "dropout"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "__init__",
          "super",
          "LSTM",
          "MultiheadAttention",
          "Sequential",
          "Linear",
          "ReLU",
          "Dropout",
          "Linear",
          "ReLU",
          "Dropout",
          "Linear",
          "ReLU",
          "Linear"
        ]
      },
      {
        "name": "forward",
        "qualified_name": "LSTMPricePredictor.forward",
        "is_async": false,
        "lineno": 85,
        "scope": "class:LSTMPricePredictor",
        "params": [
          "self",
          "x"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "lstm",
          "attention",
          "fc",
          "sigmoid"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "TransformerPredictor.__init__",
        "is_async": false,
        "lineno": 106,
        "scope": "class:TransformerPredictor",
        "params": [
          "self",
          "input_dim",
          "d_model",
          "nhead",
          "num_layers"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "__init__",
          "super",
          "Linear",
          "Parameter",
          "randn",
          "TransformerEncoderLayer",
          "TransformerEncoder",
          "Sequential",
          "Linear",
          "ReLU",
          "Dropout",
          "Linear",
          "ReLU",
          "Linear"
        ]
      },
      {
        "name": "forward",
        "qualified_name": "TransformerPredictor.forward",
        "is_async": false,
        "lineno": 131,
        "scope": "class:TransformerPredictor",
        "params": [
          "self",
          "x"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "input_projection",
          "size",
          "transpose",
          "transformer",
          "mean",
          "classifier",
          "sigmoid"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "EnsemblePredictor.__init__",
        "is_async": false,
        "lineno": 155,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "model_dir"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Path",
          "mkdir",
          "RobustScaler",
          "ThreadPoolExecutor"
        ]
      },
      {
        "name": "load_models",
        "qualified_name": "EnsemblePredictor.load_models",
        "is_async": true,
        "lineno": 201,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "exists",
          "load",
          "_create_xgboost_model",
          "exists",
          "load",
          "_create_xgboost_model",
          "exists",
          "load",
          "_create_lightgbm_model",
          "exists",
          "load",
          "_create_lightgbm_model",
          "exists",
          "load",
          "_create_random_forest_model",
          "exists",
          "load",
          "_create_gradient_boosting_model",
          "exists",
          "LSTMPricePredictor",
          "load_state_dict",
          "load",
          "eval",
          "LSTMPricePredictor",
          "exists",
          "TransformerPredictor",
          "load_state_dict",
          "load",
          "eval",
          "TransformerPredictor",
          "exists",
          "load",
          "IsolationForest",
          "exists",
          "load",
          "exists",
          "open",
          "load",
          "print",
          "_initialize_default_models"
        ]
      },
      {
        "name": "_create_xgboost_model",
        "qualified_name": "EnsemblePredictor._create_xgboost_model",
        "is_async": false,
        "lineno": 288,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "xgb.XGBClassifier",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "XGBClassifier"
        ]
      },
      {
        "name": "_create_lightgbm_model",
        "qualified_name": "EnsemblePredictor._create_lightgbm_model",
        "is_async": false,
        "lineno": 305,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "lgb.LGBMClassifier",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "LGBMClassifier"
        ]
      },
      {
        "name": "_create_random_forest_model",
        "qualified_name": "EnsemblePredictor._create_random_forest_model",
        "is_async": false,
        "lineno": 320,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "RandomForestClassifier",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "RandomForestClassifier"
        ]
      },
      {
        "name": "_create_gradient_boosting_model",
        "qualified_name": "EnsemblePredictor._create_gradient_boosting_model",
        "is_async": false,
        "lineno": 332,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "GradientBoostingClassifier",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "GradientBoostingClassifier"
        ]
      },
      {
        "name": "extract_features",
        "qualified_name": "EnsemblePredictor.extract_features",
        "is_async": false,
        "lineno": 342,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "extend",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "extend",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "extend",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "extend",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "extend",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "get",
          "get",
          "get",
          "extend",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "extend",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "extend",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "extend",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "extend",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "extend",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "get",
          "get",
          "get",
          "get",
          "extend",
          "get",
          "get",
          "get",
          "get",
          "get",
          "extend",
          "get",
          "get",
          "get",
          "get",
          "array"
        ]
      },
      {
        "name": "predict",
        "qualified_name": "EnsemblePredictor.predict",
        "is_async": true,
        "lineno": 511,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DexScreenerCollector",
          "get_token_info",
          "extract_features",
          "_predict_from_features",
          "isoformat"
        ]
      },
      {
        "name": "_predict_from_features",
        "qualified_name": "EnsemblePredictor._predict_from_features",
        "is_async": true,
        "lineno": 549,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "features"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "PredictionResult",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "isinstance",
          "extract_features",
          "len",
          "reshape",
          "transform",
          "predict_proba",
          "predict_proba",
          "predict_proba",
          "predict_proba",
          "predict_proba",
          "len",
          "predict_proba",
          "len",
          "no_grad",
          "unsqueeze",
          "FloatTensor",
          "item",
          "item",
          "item",
          "no_grad",
          "unsqueeze",
          "FloatTensor",
          "item",
          "item",
          "item",
          "decision_function",
          "exp",
          "_calculate_weighted_average",
          "get",
          "_calculate_weighted_average",
          "get",
          "min",
          "mean",
          "get",
          "get",
          "std",
          "items",
          "min",
          "max",
          "_get_feature_importance",
          "PredictionResult",
          "PredictionResult"
        ]
      },
      {
        "name": "_calculate_weighted_average",
        "qualified_name": "EnsemblePredictor._calculate_weighted_average",
        "is_async": false,
        "lineno": 704,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "values",
          "weights"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sum",
          "len",
          "mean",
          "len",
          "sum",
          "zip"
        ]
      },
      {
        "name": "_get_feature_importance",
        "qualified_name": "EnsemblePredictor._get_feature_importance",
        "is_async": false,
        "lineno": 718,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "features"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hasattr",
          "enumerate",
          "len",
          "float"
        ]
      },
      {
        "name": "retrain",
        "qualified_name": "EnsemblePredictor.retrain",
        "is_async": true,
        "lineno": 735,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "training_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "drop",
          "get",
          "Series",
          "len",
          "get",
          "Series",
          "len",
          "fit_transform",
          "list",
          "_create_xgboost_model",
          "fit",
          "_create_xgboost_model",
          "fit",
          "_create_lightgbm_model",
          "fit",
          "_create_lightgbm_model",
          "fit",
          "_create_random_forest_model",
          "fit",
          "_create_gradient_boosting_model",
          "fit",
          "len",
          "FloatTensor",
          "FloatTensor",
          "column_stack",
          "get",
          "zeros",
          "len",
          "_train_lstm",
          "_train_transformer",
          "IsolationForest",
          "fit",
          "print"
        ]
      },
      {
        "name": "_train_lstm",
        "qualified_name": "EnsemblePredictor._train_lstm",
        "is_async": true,
        "lineno": 804,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "X",
          "y",
          "epochs"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "LSTMPricePredictor",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "LSTMPricePredictor",
          "Adam",
          "parameters",
          "MSELoss",
          "TensorDataset",
          "unsqueeze",
          "DataLoader",
          "train",
          "range",
          "zero_grad",
          "model",
          "criterion",
          "backward",
          "step",
          "item",
          "eval"
        ]
      },
      {
        "name": "_train_transformer",
        "qualified_name": "EnsemblePredictor._train_transformer",
        "is_async": true,
        "lineno": 828,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "X",
          "y",
          "epochs"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TransformerPredictor",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "TransformerPredictor",
          "Adam",
          "parameters",
          "MSELoss",
          "TensorDataset",
          "unsqueeze",
          "DataLoader",
          "train",
          "range",
          "zero_grad",
          "model",
          "criterion",
          "backward",
          "step",
          "item",
          "eval"
        ]
      },
      {
        "name": "update_models",
        "qualified_name": "EnsemblePredictor.update_models",
        "is_async": true,
        "lineno": 852,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "new_models"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "save_models"
        ]
      },
      {
        "name": "save_models",
        "qualified_name": "EnsemblePredictor.save_models",
        "is_async": true,
        "lineno": 861,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "dump",
          "save",
          "state_dict",
          "save",
          "state_dict",
          "dump",
          "open",
          "dump",
          "print"
        ]
      },
      {
        "name": "predict_from_token",
        "qualified_name": "EnsemblePredictor.predict_from_token",
        "is_async": true,
        "lineno": 889,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "token",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DexScreenerCollector",
          "get_token_info",
          "extract_features",
          "predict"
        ]
      },
      {
        "name": "combine_predictions",
        "qualified_name": "EnsemblePredictor.combine_predictions",
        "is_async": true,
        "lineno": 921,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "predictions"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "list",
          "values",
          "len",
          "sum",
          "sum",
          "zip",
          "sum",
          "zip",
          "sum",
          "zip",
          "sum",
          "zip",
          "len",
          "isoformat",
          "now"
        ]
      },
      {
        "name": "calculate_weighted_score",
        "qualified_name": "EnsemblePredictor.calculate_weighted_score",
        "is_async": false,
        "lineno": 955,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "scores",
          "weights"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "get"
        ]
      },
      {
        "name": "get_confidence_level",
        "qualified_name": "EnsemblePredictor.get_confidence_level",
        "is_async": true,
        "lineno": 979,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "predictions"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "list",
          "values",
          "len",
          "std",
          "max",
          "min",
          "len",
          "len",
          "min"
        ]
      },
      {
        "name": "update_weights",
        "qualified_name": "EnsemblePredictor.update_weights",
        "is_async": false,
        "lineno": 1009,
        "scope": "class:EnsemblePredictor",
        "params": [
          "self",
          "performance_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "get",
          "get",
          "sum",
          "values",
          "items",
          "update",
          "print"
        ]
      }
    ],
    "found_classes": [
      "PredictionResult",
      "LSTMPricePredictor",
      "TransformerPredictor",
      "EnsemblePredictor"
    ],
    "class_bases": {
      "PredictionResult": [],
      "LSTMPricePredictor": [
        "Module"
      ],
      "TransformerPredictor": [
        "Module"
      ],
      "EnsemblePredictor": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "ml/models/rug_classifier.py": {
    "path": "ml\\models\\rug_classifier.py",
    "exists": true,
    "expected": [
      {
        "name": "extract_features",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "token_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "train",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "historical_data",
          "labels"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "predict",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "token_features"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "analyze_token",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "token_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "save_model",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "version"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "load_model",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "version"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "RugClassifier.__init__",
        "is_async": false,
        "lineno": 34,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_initialize_models",
          "Path",
          "get",
          "mkdir"
        ]
      },
      {
        "name": "_initialize_models",
        "qualified_name": "RugClassifier._initialize_models",
        "is_async": false,
        "lineno": 104,
        "scope": "class:RugClassifier",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "XGBClassifier",
          "LGBMClassifier",
          "RandomForestClassifier",
          "GradientBoostingClassifier",
          "keys",
          "RobustScaler"
        ]
      },
      {
        "name": "extract_features",
        "qualified_name": "RugClassifier.extract_features",
        "is_async": false,
        "lineno": 168,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "token_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append",
          "get",
          "max",
          "get",
          "append",
          "get",
          "append",
          "_calculate_liquidity_removal_risk",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "int",
          "get",
          "append",
          "int",
          "get",
          "append",
          "int",
          "get",
          "append",
          "int",
          "get",
          "append",
          "int",
          "get",
          "append",
          "int",
          "get",
          "append",
          "int",
          "get",
          "append",
          "int",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "reshape",
          "array"
        ]
      },
      {
        "name": "_calculate_liquidity_removal_risk",
        "qualified_name": "RugClassifier._calculate_liquidity_removal_risk",
        "is_async": false,
        "lineno": 222,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "token_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "min"
        ]
      },
      {
        "name": "train",
        "qualified_name": "RugClassifier.train",
        "is_async": false,
        "lineno": 253,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "historical_data",
          "labels"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "train_test_split",
          "items",
          "info",
          "fit_transform",
          "transform",
          "fit",
          "CalibratedClassifierCV",
          "fit",
          "predict",
          "predict_proba",
          "accuracy_score",
          "precision_score",
          "recall_score",
          "f1_score",
          "roc_auc_score",
          "tolist",
          "confusion_matrix",
          "hasattr",
          "dict",
          "zip",
          "_ensemble_predict_proba",
          "astype",
          "accuracy_score",
          "precision_score",
          "recall_score",
          "f1_score",
          "roc_auc_score",
          "tolist",
          "confusion_matrix",
          "_calculate_ensemble_importance",
          "info"
        ]
      },
      {
        "name": "predict",
        "qualified_name": "RugClassifier.predict",
        "is_async": false,
        "lineno": 346,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "token_features"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[float, Dict[str, float]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "extract_features",
          "items",
          "transform",
          "predict_proba"
        ]
      },
      {
        "name": "_ensemble_predict_proba",
        "qualified_name": "RugClassifier._ensemble_predict_proba",
        "is_async": false,
        "lineno": 374,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "X"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "zeros",
          "len",
          "items",
          "transform",
          "predict_proba"
        ]
      },
      {
        "name": "_calculate_ensemble_importance",
        "qualified_name": "RugClassifier._calculate_ensemble_importance",
        "is_async": false,
        "lineno": 390,
        "scope": "class:RugClassifier",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "items",
          "sum",
          "values",
          "items",
          "dict",
          "sorted",
          "items"
        ]
      },
      {
        "name": "analyze_token",
        "qualified_name": "RugClassifier.analyze_token",
        "is_async": false,
        "lineno": 407,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "token_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "predict",
          "_identify_red_flags",
          "_generate_warnings",
          "_get_recommendation",
          "_calculate_confidence",
          "isoformat",
          "now"
        ]
      },
      {
        "name": "_identify_red_flags",
        "qualified_name": "RugClassifier._identify_red_flags",
        "is_async": false,
        "lineno": 442,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "token_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "float",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "float",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "float",
          "append"
        ]
      },
      {
        "name": "_generate_warnings",
        "qualified_name": "RugClassifier._generate_warnings",
        "is_async": false,
        "lineno": 489,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "token_data",
          "rug_probability"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append"
        ]
      },
      {
        "name": "_get_recommendation",
        "qualified_name": "RugClassifier._get_recommendation",
        "is_async": false,
        "lineno": 510,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "rug_probability"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_confidence",
        "qualified_name": "RugClassifier._calculate_confidence",
        "is_async": false,
        "lineno": 521,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "model_predictions"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "list",
          "values",
          "std",
          "max"
        ]
      },
      {
        "name": "save_model",
        "qualified_name": "RugClassifier.save_model",
        "is_async": false,
        "lineno": 533,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "version"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "strftime",
          "now",
          "mkdir",
          "items",
          "dump",
          "dump",
          "isoformat",
          "now",
          "open",
          "dump",
          "info",
          "str"
        ]
      },
      {
        "name": "load_model",
        "qualified_name": "RugClassifier.load_model",
        "is_async": false,
        "lineno": 561,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "version"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "exists",
          "FileNotFoundError",
          "keys",
          "exists",
          "exists",
          "load",
          "load",
          "open",
          "load",
          "info"
        ]
      },
      {
        "name": "update_model",
        "qualified_name": "RugClassifier.update_model",
        "is_async": false,
        "lineno": 586,
        "scope": "class:RugClassifier",
        "params": [
          "self",
          "new_data",
          "new_labels"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "transform",
          "hasattr",
          "fit",
          "predict",
          "accuracy_score",
          "len",
          "info",
          "len"
        ]
      }
    ],
    "found_classes": [
      "RugClassifier"
    ],
    "class_bases": {
      "RugClassifier": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "ml/models/pump_predictor.py": {
    "path": "ml\\models\\pump_predictor.py",
    "exists": true,
    "expected": [
      {
        "name": "prepare_features",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "train_lstm",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "sequences",
          "targets"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "predict_pump_probability",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "features"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "backtest",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "historical_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "PumpPredictor.__init__",
        "is_async": false,
        "lineno": 33,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_initialize_models",
          "Path",
          "get",
          "mkdir"
        ]
      },
      {
        "name": "_initialize_models",
        "qualified_name": "PumpPredictor._initialize_models",
        "is_async": false,
        "lineno": 76,
        "scope": "class:PumpPredictor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_build_lstm_model",
          "XGBRegressor",
          "LGBMRegressor",
          "RandomForestRegressor",
          "GradientBoostingRegressor",
          "MinMaxScaler",
          "StandardScaler"
        ]
      },
      {
        "name": "_build_lstm_model",
        "qualified_name": "PumpPredictor._build_lstm_model",
        "is_async": false,
        "lineno": 133,
        "scope": "class:PumpPredictor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Sequential",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Sequential",
          "LSTM",
          "len",
          "Dropout",
          "BatchNormalization",
          "LSTM",
          "Dropout",
          "BatchNormalization",
          "LSTM",
          "Dropout",
          "BatchNormalization",
          "Dense",
          "Dropout",
          "Dense",
          "compile",
          "Adam"
        ]
      },
      {
        "name": "prepare_sequences",
        "qualified_name": "PumpPredictor.prepare_sequences",
        "is_async": false,
        "lineno": 163,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "price_data",
          "lookback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[np.ndarray, np.ndarray]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "fit_transform",
          "range",
          "len",
          "append",
          "append",
          "array",
          "array"
        ]
      },
      {
        "name": "extract_features",
        "qualified_name": "PumpPredictor.extract_features",
        "is_async": false,
        "lineno": 192,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "extend",
          "_calculate_technical_indicators",
          "extend",
          "_calculate_market_features",
          "extend",
          "_identify_pump_patterns",
          "array"
        ]
      },
      {
        "name": "_calculate_technical_indicators",
        "qualified_name": "PumpPredictor._calculate_technical_indicators",
        "is_async": false,
        "lineno": 207,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_calculate_rsi",
          "append",
          "len",
          "_calculate_macd",
          "extend",
          "len",
          "len",
          "len",
          "_calculate_bollinger_bands",
          "extend",
          "_calculate_ema",
          "append",
          "len",
          "_calculate_vwap",
          "_calculate_obv",
          "extend",
          "_calculate_adx",
          "append",
          "_calculate_stochastic",
          "extend"
        ]
      },
      {
        "name": "_calculate_market_features",
        "qualified_name": "PumpPredictor._calculate_market_features",
        "is_async": false,
        "lineno": 247,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "max",
          "max",
          "extend",
          "append",
          "append",
          "max",
          "append",
          "append",
          "append",
          "append"
        ]
      },
      {
        "name": "_identify_pump_patterns",
        "qualified_name": "PumpPredictor._identify_pump_patterns",
        "is_async": false,
        "lineno": 275,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "mean",
          "mean",
          "max",
          "append",
          "min",
          "append",
          "_detect_accumulation",
          "append",
          "_detect_breakout",
          "append"
        ]
      },
      {
        "name": "_detect_accumulation",
        "qualified_name": "PumpPredictor._detect_accumulation",
        "is_async": false,
        "lineno": 299,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "std",
          "mean",
          "mean",
          "mean",
          "sum",
          "sum",
          "min",
          "min"
        ]
      },
      {
        "name": "_detect_breakout",
        "qualified_name": "PumpPredictor._detect_breakout",
        "is_async": false,
        "lineno": 317,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "max",
          "mean",
          "min"
        ]
      },
      {
        "name": "train",
        "qualified_name": "PumpPredictor.train",
        "is_async": false,
        "lineno": 337,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "price_history",
          "pump_labels"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "prepare_sequences",
          "range",
          "len",
          "extract_features",
          "append",
          "array",
          "int",
          "len",
          "info",
          "EarlyStopping",
          "ReduceLROnPlateau",
          "fit",
          "predict",
          "mean_squared_error",
          "mean_absolute_error",
          "fit_transform",
          "transform",
          "info",
          "fit",
          "predict",
          "mean_squared_error",
          "mean_absolute_error",
          "r2_score",
          "info"
        ]
      },
      {
        "name": "predict_pump_probability",
        "qualified_name": "PumpPredictor.predict_pump_probability",
        "is_async": false,
        "lineno": 423,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "features"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "predict",
          "len",
          "reshape",
          "len",
          "reshape",
          "transform",
          "predict",
          "sum",
          "get",
          "items"
        ]
      },
      {
        "name": "predict_pump_probability_detailed",
        "qualified_name": "PumpPredictor.predict_pump_probability_detailed",
        "is_async": false,
        "lineno": 465,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "current_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[float, Dict[str, float], Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "prepare_sequences",
          "len",
          "predict",
          "extract_features",
          "transform",
          "reshape",
          "predict",
          "sum",
          "get",
          "items",
          "_generate_pump_signals"
        ]
      },
      {
        "name": "_generate_pump_signals",
        "qualified_name": "PumpPredictor._generate_pump_signals",
        "is_async": false,
        "lineno": 508,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "data",
          "pump_probability"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "append",
          "append",
          "append",
          "append"
        ]
      },
      {
        "name": "_calculate_rsi",
        "qualified_name": "PumpPredictor._calculate_rsi",
        "is_async": false,
        "lineno": 544,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "prices",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "diff",
          "sum",
          "sum",
          "zeros_like",
          "range",
          "len"
        ]
      },
      {
        "name": "_calculate_macd",
        "qualified_name": "PumpPredictor._calculate_macd",
        "is_async": false,
        "lineno": 571,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "prices",
          "fast",
          "slow",
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[np.ndarray, np.ndarray, np.ndarray]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_calculate_ema",
          "_calculate_ema",
          "_calculate_ema"
        ]
      },
      {
        "name": "_calculate_ema",
        "qualified_name": "PumpPredictor._calculate_ema",
        "is_async": false,
        "lineno": 586,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "data",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "zeros_like",
          "range",
          "len"
        ]
      },
      {
        "name": "_calculate_bollinger_bands",
        "qualified_name": "PumpPredictor._calculate_bollinger_bands",
        "is_async": false,
        "lineno": 597,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "prices",
          "period",
          "std_dev"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[float, float, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "mean",
          "std"
        ]
      },
      {
        "name": "_calculate_vwap",
        "qualified_name": "PumpPredictor._calculate_vwap",
        "is_async": false,
        "lineno": 615,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sum",
          "sum"
        ]
      },
      {
        "name": "_calculate_obv",
        "qualified_name": "PumpPredictor._calculate_obv",
        "is_async": false,
        "lineno": 624,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "range",
          "len"
        ]
      },
      {
        "name": "_calculate_adx",
        "qualified_name": "PumpPredictor._calculate_adx",
        "is_async": false,
        "lineno": 635,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "data",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "zeros",
          "len",
          "zeros",
          "len",
          "range",
          "len",
          "zeros",
          "len",
          "range",
          "len",
          "max",
          "abs",
          "abs",
          "_calculate_ema",
          "_calculate_ema",
          "_calculate_ema",
          "abs",
          "_calculate_ema",
          "len"
        ]
      },
      {
        "name": "_calculate_stochastic",
        "qualified_name": "PumpPredictor._calculate_stochastic",
        "is_async": false,
        "lineno": 679,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "data",
          "period",
          "smooth"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[float, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "min",
          "max"
        ]
      },
      {
        "name": "save_model",
        "qualified_name": "PumpPredictor.save_model",
        "is_async": false,
        "lineno": 708,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "version"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "strftime",
          "now",
          "mkdir",
          "save",
          "dump",
          "items",
          "dump",
          "isoformat",
          "now",
          "open",
          "dump",
          "info",
          "str"
        ]
      },
      {
        "name": "load_model",
        "qualified_name": "PumpPredictor.load_model",
        "is_async": false,
        "lineno": 744,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "version"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "exists",
          "FileNotFoundError",
          "load_model",
          "exists",
          "load",
          "keys",
          "exists",
          "load",
          "open",
          "load",
          "info"
        ]
      },
      {
        "name": "prepare_features",
        "qualified_name": "PumpPredictor.prepare_features",
        "is_async": false,
        "lineno": 779,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "DataFrame",
          "extract_features"
        ]
      },
      {
        "name": "train_lstm",
        "qualified_name": "PumpPredictor.train_lstm",
        "is_async": false,
        "lineno": 792,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "sequences",
          "targets"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "EarlyStopping",
          "ReduceLROnPlateau",
          "int",
          "len",
          "fit",
          "info"
        ]
      },
      {
        "name": "backtest",
        "qualified_name": "PumpPredictor.backtest",
        "is_async": false,
        "lineno": 822,
        "scope": "class:PumpPredictor",
        "params": [
          "self",
          "historical_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "prepare_sequences",
          "len",
          "warning",
          "range",
          "len",
          "predict_pump_probability",
          "append",
          "append",
          "len",
          "diff",
          "std",
          "mean",
          "std",
          "sqrt"
        ]
      }
    ],
    "found_classes": [
      "PumpPredictor"
    ],
    "class_bases": {
      "PumpPredictor": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "ml/models/volume_validator.py": {
    "path": "ml\\models\\volume_validator.py",
    "exists": true,
    "expected": [
      {
        "name": "extract_features",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "volume_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "train",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "training_data",
          "labels",
          "validation_split"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "predict",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "volume_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "VolumeValidationResult",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "save_model",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "filepath"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "load_model",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "filepath"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_model_performance",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "needs_retraining",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "days_threshold"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "VolumeValidatorML.__init__",
        "is_async": false,
        "lineno": 44,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "StandardScaler",
          "info"
        ]
      },
      {
        "name": "extract_features",
        "qualified_name": "VolumeValidatorML.extract_features",
        "is_async": false,
        "lineno": 112,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self",
          "volume_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append",
          "float",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "float",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "float",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "reshape",
          "array"
        ]
      },
      {
        "name": "train",
        "qualified_name": "VolumeValidatorML.train",
        "is_async": false,
        "lineno": 188,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self",
          "training_data",
          "labels",
          "validation_split"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "len",
          "train_test_split",
          "fit_transform",
          "transform",
          "info",
          "RandomForestClassifier",
          "fit",
          "score",
          "info",
          "XGBClassifier",
          "fit",
          "score",
          "info",
          "LGBMClassifier",
          "fit",
          "score",
          "info",
          "IsolationForest",
          "fit",
          "_ensemble_predict",
          "mean",
          "cross_val_score",
          "mean",
          "std",
          "len",
          "len",
          "now",
          "append",
          "info",
          "error"
        ]
      },
      {
        "name": "predict",
        "qualified_name": "VolumeValidatorML.predict",
        "is_async": false,
        "lineno": 303,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self",
          "volume_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "VolumeValidationResult",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "extract_features",
          "transform",
          "predict",
          "predict_proba",
          "predict",
          "predict_proba",
          "predict",
          "predict_proba",
          "score_samples",
          "sum",
          "get",
          "items",
          "abs",
          "_heuristic_validation",
          "_get_feature_importance",
          "_identify_risk_factors",
          "_estimate_real_volume",
          "_generate_recommendation",
          "VolumeValidationResult",
          "get",
          "error",
          "VolumeValidationResult",
          "get",
          "Decimal"
        ]
      },
      {
        "name": "_ensemble_predict",
        "qualified_name": "VolumeValidatorML._ensemble_predict",
        "is_async": false,
        "lineno": 406,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self",
          "features"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "predict_proba",
          "append",
          "predict_proba",
          "append",
          "predict_proba",
          "get",
          "len",
          "array",
          "sum",
          "average",
          "astype",
          "array"
        ]
      },
      {
        "name": "_heuristic_validation",
        "qualified_name": "VolumeValidatorML._heuristic_validation",
        "is_async": false,
        "lineno": 428,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self",
          "volume_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_get_feature_importance",
        "qualified_name": "VolumeValidatorML._get_feature_importance",
        "is_async": false,
        "lineno": 454,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "enumerate",
          "len",
          "float",
          "dict",
          "sorted",
          "items"
        ]
      },
      {
        "name": "_identify_risk_factors",
        "qualified_name": "VolumeValidatorML._identify_risk_factors",
        "is_async": false,
        "lineno": 474,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self",
          "volume_data",
          "anomaly_score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append"
        ]
      },
      {
        "name": "_estimate_real_volume",
        "qualified_name": "VolumeValidatorML._estimate_real_volume",
        "is_async": false,
        "lineno": 520,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self",
          "volume_data",
          "is_genuine",
          "confidence"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "get",
          "Decimal",
          "Decimal",
          "get",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "Decimal",
          "min",
          "Decimal"
        ]
      },
      {
        "name": "_generate_recommendation",
        "qualified_name": "VolumeValidatorML._generate_recommendation",
        "is_async": false,
        "lineno": 547,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self",
          "is_genuine",
          "confidence",
          "anomaly_score",
          "risk_factors"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len"
        ]
      },
      {
        "name": "save_model",
        "qualified_name": "VolumeValidatorML.save_model",
        "is_async": false,
        "lineno": 568,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self",
          "filepath"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "open",
          "dump",
          "info"
        ]
      },
      {
        "name": "load_model",
        "qualified_name": "VolumeValidatorML.load_model",
        "is_async": false,
        "lineno": 587,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self",
          "filepath"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "open",
          "load",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "info",
          "error"
        ]
      },
      {
        "name": "get_model_performance",
        "qualified_name": "VolumeValidatorML.get_model_performance",
        "is_async": false,
        "lineno": 608,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isoformat",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "len"
        ]
      },
      {
        "name": "needs_retraining",
        "qualified_name": "VolumeValidatorML.needs_retraining",
        "is_async": false,
        "lineno": 627,
        "scope": "class:VolumeValidatorML",
        "params": [
          "self",
          "days_threshold"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now"
        ]
      }
    ],
    "found_classes": [
      "VolumeValidationResult",
      "VolumeValidatorML"
    ],
    "class_bases": {
      "VolumeValidationResult": [],
      "VolumeValidatorML": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "trading/executors/base_executor.py": {
    "path": "trading\\executors\\base_executor.py",
    "exists": true,
    "expected": [
      {
        "name": "execute_trade",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "cancel_order",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "modify_order",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order_id",
          "updates"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "validate_order",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_order_status",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "TradeExecutor.__init__",
        "is_async": false,
        "lineno": 65,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Web3",
          "HTTPProvider",
          "get",
          "from_key",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "execute",
        "qualified_name": "TradeExecutor.execute",
        "is_async": true,
        "lineno": 126,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ExecutionResult",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "time",
          "_pre_execution_checks",
          "ExecutionResult",
          "_select_best_route",
          "ExecutionResult",
          "_apply_mev_protection",
          "_execute_with_retry",
          "_post_execution_processing",
          "time",
          "append",
          "now",
          "ExecutionResult",
          "time",
          "str"
        ]
      },
      {
        "name": "_pre_execution_checks",
        "qualified_name": "TradeExecutor._pre_execution_checks",
        "is_async": true,
        "lineno": 214,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_balance",
          "to_wei",
          "print",
          "_get_token_balance",
          "print",
          "to_wei",
          "print",
          "_verify_token_contract",
          "print",
          "print"
        ]
      },
      {
        "name": "_select_best_route",
        "qualified_name": "TradeExecutor._select_best_route",
        "is_async": true,
        "lineno": 252,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[ExecutionRoute]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_all_quotes",
          "max",
          "ExecutionRoute",
          "print"
        ]
      },
      {
        "name": "_get_all_quotes",
        "qualified_name": "TradeExecutor._get_all_quotes",
        "is_async": true,
        "lineno": 278,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "append",
          "_get_uniswap_v2_quote",
          "get",
          "append",
          "_get_uniswap_v3_quote",
          "get",
          "append",
          "_get_1inch_quote",
          "get",
          "append",
          "_get_paraswap_quote",
          "append",
          "_get_toxisol_quote",
          "gather",
          "isinstance",
          "get",
          "append"
        ]
      },
      {
        "name": "_get_uniswap_v2_quote",
        "qualified_name": "TradeExecutor._get_uniswap_v2_quote",
        "is_async": true,
        "lineno": 308,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_load_abi",
          "contract",
          "_get_weth_address",
          "_get_weth_address",
          "to_wei",
          "call",
          "getAmountsOut",
          "print"
        ]
      },
      {
        "name": "_get_1inch_quote",
        "qualified_name": "TradeExecutor._get_1inch_quote",
        "is_async": true,
        "lineno": 342,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_weth_address",
          "_get_weth_address",
          "to_wei",
          "int",
          "ClientSession",
          "get",
          "json",
          "int",
          "get",
          "int",
          "print"
        ]
      },
      {
        "name": "_execute_with_retry",
        "qualified_name": "TradeExecutor._execute_with_retry",
        "is_async": true,
        "lineno": 377,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order",
          "route"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ExecutionResult",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "range",
          "_execute_uniswap_v2",
          "_execute_uniswap_v3",
          "_execute_1inch",
          "_execute_paraswap",
          "_execute_toxisol",
          "_execute_direct",
          "get",
          "sleep",
          "print",
          "ExecutionResult",
          "str",
          "sleep",
          "ExecutionResult"
        ]
      },
      {
        "name": "_execute_uniswap_v2",
        "qualified_name": "TradeExecutor._execute_uniswap_v2",
        "is_async": true,
        "lineno": 440,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ExecutionResult",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_load_abi",
          "contract",
          "int",
          "time",
          "_get_weth_address",
          "to_wei",
          "call",
          "getAmountsOut",
          "int",
          "build_transaction",
          "swapExactETHForTokens",
          "get",
          "int",
          "get_transaction_count",
          "_get_weth_address",
          "int",
          "_approve_token",
          "call",
          "getAmountsOut",
          "int",
          "build_transaction",
          "swapExactTokensForETH",
          "get",
          "int",
          "get_transaction_count",
          "sign_transaction",
          "send_raw_transaction",
          "wait_for_transaction_receipt",
          "abs",
          "ExecutionResult",
          "hex",
          "ExecutionResult",
          "hex",
          "ExecutionResult",
          "str"
        ]
      },
      {
        "name": "_execute_1inch",
        "qualified_name": "TradeExecutor._execute_1inch",
        "is_async": true,
        "lineno": 555,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ExecutionResult",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_weth_address",
          "_get_weth_address",
          "to_wei",
          "int",
          "ClientSession",
          "get",
          "text",
          "Exception",
          "json",
          "get_transaction_count",
          "int",
          "sign_transaction",
          "send_raw_transaction",
          "wait_for_transaction_receipt",
          "ExecutionResult",
          "hex",
          "float",
          "float",
          "float",
          "get",
          "ExecutionResult",
          "hex",
          "ExecutionResult",
          "str"
        ]
      },
      {
        "name": "_apply_mev_protection",
        "qualified_name": "TradeExecutor._apply_mev_protection",
        "is_async": true,
        "lineno": 641,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TradeOrder",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "min",
          "int",
          "sleep",
          "uniform"
        ]
      },
      {
        "name": "_send_private_transaction",
        "qualified_name": "TradeExecutor._send_private_transaction",
        "is_async": true,
        "lineno": 666,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "signed_tx"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hex",
          "hex",
          "ClientSession",
          "post",
          "json",
          "hex",
          "send_raw_transaction"
        ]
      },
      {
        "name": "_approve_token",
        "qualified_name": "TradeExecutor._approve_token",
        "is_async": true,
        "lineno": 689,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "token_address",
          "spender",
          "amount"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_load_abi",
          "contract",
          "call",
          "allowance",
          "build_transaction",
          "approve",
          "get_transaction_count",
          "sign_transaction",
          "send_raw_transaction",
          "wait_for_transaction_receipt"
        ]
      },
      {
        "name": "_get_token_balance",
        "qualified_name": "TradeExecutor._get_token_balance",
        "is_async": true,
        "lineno": 713,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_load_abi",
          "contract",
          "call",
          "balanceOf",
          "call",
          "decimals"
        ]
      },
      {
        "name": "_verify_token_contract",
        "qualified_name": "TradeExecutor._verify_token_contract",
        "is_async": true,
        "lineno": 723,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "is_address",
          "get_code",
          "_load_abi",
          "contract",
          "call",
          "totalSupply",
          "call",
          "decimals"
        ]
      },
      {
        "name": "_post_execution_processing",
        "qualified_name": "TradeExecutor._post_execution_processing",
        "is_async": true,
        "lineno": 748,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order",
          "result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "print",
          "get",
          "print"
        ]
      },
      {
        "name": "_get_weth_address",
        "qualified_name": "TradeExecutor._get_weth_address",
        "is_async": false,
        "lineno": 761,
        "scope": "class:TradeExecutor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "_load_abi",
        "qualified_name": "TradeExecutor._load_abi",
        "is_async": false,
        "lineno": 773,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "contract_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "emergency_sell_all",
        "qualified_name": "TradeExecutor.emergency_sell_all",
        "is_async": true,
        "lineno": 861,
        "scope": "class:TradeExecutor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "print"
        ]
      },
      {
        "name": "get_stats",
        "qualified_name": "TradeExecutor.get_stats",
        "is_async": false,
        "lineno": 869,
        "scope": "class:TradeExecutor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "copy"
        ]
      },
      {
        "name": "execute_trade",
        "qualified_name": "TradeExecutor.execute_trade",
        "is_async": true,
        "lineno": 880,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "execute"
        ]
      },
      {
        "name": "cancel_order",
        "qualified_name": "TradeExecutor.cancel_order",
        "is_async": true,
        "lineno": 909,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "print",
          "get",
          "print",
          "append",
          "now",
          "print",
          "print"
        ]
      },
      {
        "name": "modify_order",
        "qualified_name": "TradeExecutor.modify_order",
        "is_async": true,
        "lineno": 949,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order_id",
          "updates"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "print",
          "get",
          "print",
          "keys",
          "print",
          "items",
          "now",
          "append",
          "now",
          "print",
          "print"
        ]
      },
      {
        "name": "validate_order",
        "qualified_name": "TradeExecutor.validate_order",
        "is_async": false,
        "lineno": 1003,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "print",
          "is_address",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print"
        ]
      },
      {
        "name": "get_order_status",
        "qualified_name": "TradeExecutor.get_order_status",
        "is_async": true,
        "lineno": 1064,
        "scope": "class:TradeExecutor",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "isinstance",
          "get",
          "get",
          "get",
          "get",
          "get",
          "str"
        ]
      },
      {
        "name": "test_web3_connection",
        "qualified_name": "test_web3_connection",
        "is_async": true,
        "lineno": 1118,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Web3",
          "HTTPProvider",
          "get",
          "is_connected",
          "print",
          "print",
          "print"
        ]
      }
    ],
    "found_classes": [
      "TradeOrder",
      "ExecutionResult",
      "ExecutionRoute",
      "TradeExecutor"
    ],
    "class_bases": {
      "TradeOrder": [],
      "ExecutionResult": [],
      "ExecutionRoute": [
        "Enum"
      ],
      "TradeExecutor": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "trading/executors/toxisol_api.py": {
    "path": "trading\\executors\\toxisol_api.py",
    "exists": true,
    "expected": [
      {
        "name": "initialize",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_quote",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_in",
          "token_out",
          "amount",
          "chain",
          "route_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "execute_trade",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order",
          "quote"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_execution_stats",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "estimate_gas",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_in",
          "token_out",
          "amount",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "ToxiSolAPIExecutor.__init__",
        "is_async": false,
        "lineno": 65,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "__init__",
          "super",
          "get",
          "get",
          "get",
          "Decimal",
          "str",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "EncryptionManager",
          "get",
          "Decimal",
          "Decimal",
          "info"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "ToxiSolAPIExecutor.initialize",
        "is_async": true,
        "lineno": 107,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ClientTimeout",
          "ClientSession",
          "_test_connection",
          "get",
          "create_task",
          "_maintain_websocket",
          "info",
          "error"
        ]
      },
      {
        "name": "_test_connection",
        "qualified_name": "ToxiSolAPIExecutor._test_connection",
        "is_async": true,
        "lineno": 136,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "json",
          "info",
          "get",
          "error",
          "error"
        ]
      },
      {
        "name": "_generate_signature",
        "qualified_name": "ToxiSolAPIExecutor._generate_signature",
        "is_async": false,
        "lineno": 151,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "payload",
          "timestamp"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hexdigest",
          "new",
          "encode",
          "encode"
        ]
      },
      {
        "name": "_rate_limit",
        "qualified_name": "ToxiSolAPIExecutor._rate_limit",
        "is_async": true,
        "lineno": 161,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "time",
          "sleep",
          "time"
        ]
      },
      {
        "name": "get_quote",
        "qualified_name": "ToxiSolAPIExecutor.get_quote",
        "is_async": true,
        "lineno": 173,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "token_in",
          "token_out",
          "amount",
          "chain",
          "route_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[ToxiSolQuote]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_rate_limit",
          "str",
          "int",
          "float",
          "get",
          "json",
          "ToxiSolQuote",
          "Decimal",
          "Decimal",
          "Decimal",
          "now",
          "timedelta",
          "get",
          "info",
          "error",
          "error"
        ]
      },
      {
        "name": "execute_trade",
        "qualified_name": "ToxiSolAPIExecutor.execute_trade",
        "is_async": true,
        "lineno": 237,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "order",
          "quote"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "validate_order",
          "get_quote",
          "now",
          "warning",
          "_build_toxisol_transaction",
          "_sign_transaction",
          "_execute_flashbots",
          "_execute_standard",
          "get",
          "max",
          "Decimal",
          "str",
          "get",
          "error",
          "str"
        ]
      },
      {
        "name": "_build_toxisol_transaction",
        "qualified_name": "ToxiSolAPIExecutor._build_toxisol_transaction",
        "is_async": true,
        "lineno": 322,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "order",
          "quote"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "float",
          "int",
          "timestamp",
          "now",
          "timedelta",
          "str",
          "int",
          "int",
          "time",
          "_generate_signature",
          "dumps",
          "str",
          "post",
          "json",
          "int",
          "_get_optimal_gas_price",
          "Exception",
          "error"
        ]
      },
      {
        "name": "_execute_flashbots",
        "qualified_name": "ToxiSolAPIExecutor._execute_flashbots",
        "is_async": true,
        "lineno": 379,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "signed_tx"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hex",
          "_get_block_number",
          "int",
          "time",
          "int",
          "time",
          "post",
          "_sign_flashbots_request",
          "json",
          "_wait_for_bundle",
          "error",
          "_execute_standard",
          "error",
          "_execute_standard"
        ]
      },
      {
        "name": "_execute_standard",
        "qualified_name": "ToxiSolAPIExecutor._execute_standard",
        "is_async": true,
        "lineno": 420,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "signed_tx"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_send_transaction",
          "_wait_for_confirmation",
          "error",
          "str"
        ]
      },
      {
        "name": "get_execution_stats",
        "qualified_name": "ToxiSolAPIExecutor.get_execution_stats",
        "is_async": true,
        "lineno": 448,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "estimate_gas",
        "qualified_name": "ToxiSolAPIExecutor.estimate_gas",
        "is_async": true,
        "lineno": 462,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "token_in",
          "token_out",
          "amount",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[int]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_quote"
        ]
      },
      {
        "name": "cleanup",
        "qualified_name": "ToxiSolAPIExecutor.cleanup",
        "is_async": true,
        "lineno": 473,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "close",
          "info"
        ]
      },
      {
        "name": "validate_order",
        "qualified_name": "ToxiSolAPIExecutor.validate_order",
        "is_async": true,
        "lineno": 487,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "error",
          "error",
          "error",
          "isAddress",
          "isAddress",
          "error",
          "error",
          "error",
          "error"
        ]
      },
      {
        "name": "get_order_status",
        "qualified_name": "ToxiSolAPIExecutor.get_order_status",
        "is_async": true,
        "lineno": 533,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "OrderStatus",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_transaction_receipt",
          "warning",
          "error"
        ]
      },
      {
        "name": "cancel_order",
        "qualified_name": "ToxiSolAPIExecutor.cancel_order",
        "is_async": true,
        "lineno": 570,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "error",
          "info",
          "warning",
          "warning",
          "error"
        ]
      },
      {
        "name": "modify_order",
        "qualified_name": "ToxiSolAPIExecutor.modify_order",
        "is_async": true,
        "lineno": 611,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "order_id",
          "modifications"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "error",
          "error",
          "items",
          "setattr",
          "info",
          "warning",
          "validate_order",
          "error",
          "error"
        ]
      },
      {
        "name": "_get_transaction_receipt",
        "qualified_name": "ToxiSolAPIExecutor._get_transaction_receipt",
        "is_async": true,
        "lineno": 663,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "tx_hash"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hasattr",
          "items",
          "get_transaction_receipt",
          "dict",
          "hasattr",
          "get_transaction_receipt",
          "dict",
          "debug"
        ]
      },
      {
        "name": "_check_bundle_status",
        "qualified_name": "ToxiSolAPIExecutor._check_bundle_status",
        "is_async": true,
        "lineno": 695,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "bundle_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "json",
          "get",
          "get",
          "error"
        ]
      },
      {
        "name": "_build_base_transaction",
        "qualified_name": "ToxiSolAPIExecutor._build_base_transaction",
        "is_async": true,
        "lineno": 729,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hasattr",
          "hasattr",
          "get_transaction_count"
        ]
      },
      {
        "name": "format_token_amount",
        "qualified_name": "ToxiSolAPIExecutor.format_token_amount",
        "is_async": false,
        "lineno": 751,
        "scope": "class:ToxiSolAPIExecutor",
        "params": [
          "amount",
          "decimals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "rstrip",
          "rstrip"
        ]
      }
    ],
    "found_classes": [
      "ToxiSolRoute",
      "ToxiSolQuote",
      "ToxiSolAPIExecutor"
    ],
    "class_bases": {
      "ToxiSolRoute": [
        "Enum"
      ],
      "ToxiSolQuote": [],
      "ToxiSolAPIExecutor": [
        "BaseExecutor"
      ]
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "trading/executors/direct_dex.py": {
    "path": "trading\\executors\\direct_dex.py",
    "exists": true,
    "expected": [
      {
        "name": "initialize",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_best_quote",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "token_in",
          "token_out",
          "amount",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "execute_trade",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "DirectDEXExecutor.__init__",
        "is_async": false,
        "lineno": 58,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "__init__",
          "super",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "info"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "DirectDEXExecutor.initialize",
        "is_async": true,
        "lineno": 95,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "Web3",
          "HTTPProvider",
          "inject",
          "isConnected",
          "info",
          "_initialize_dex_contracts",
          "warning",
          "error"
        ]
      },
      {
        "name": "_initialize_dex_contracts",
        "qualified_name": "DirectDEXExecutor._initialize_dex_contracts",
        "is_async": true,
        "lineno": 119,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "chain",
          "w3"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "lower",
          "contract",
          "toChecksumAddress",
          "info"
        ]
      },
      {
        "name": "get_best_quote",
        "qualified_name": "DirectDEXExecutor.get_best_quote",
        "is_async": true,
        "lineno": 144,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "token_in",
          "token_out",
          "amount",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[DEXQuote]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "get",
          "_get_dex_quote",
          "append",
          "warning",
          "max",
          "info",
          "format_token_amount",
          "format_token_amount",
          "error",
          "error",
          "error",
          "locals",
          "debug",
          "len"
        ]
      },
      {
        "name": "execute_trade",
        "qualified_name": "DirectDEXExecutor.execute_trade",
        "is_async": true,
        "lineno": 202,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_best_quote",
          "float",
          "_build_swap_transaction",
          "_apply_commit_reveal",
          "_randomize_gas_price",
          "sign_transaction",
          "_send_transaction_with_retry",
          "_wait_for_confirmation",
          "hex",
          "error",
          "str"
        ]
      },
      {
        "name": "_build_swap_transaction",
        "qualified_name": "DirectDEXExecutor._build_swap_transaction",
        "is_async": true,
        "lineno": 265,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "order",
          "quote"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "int",
          "float",
          "int",
          "timestamp",
          "now",
          "timedelta",
          "lower",
          "encodeABI",
          "_encode_v3_path",
          "ether_to_wei",
          "encodeABI",
          "ether_to_wei",
          "_get_optimal_gas_price",
          "int",
          "get_transaction_count",
          "error"
        ]
      },
      {
        "name": "_estimate_price_impact",
        "qualified_name": "DirectDEXExecutor._estimate_price_impact",
        "is_async": true,
        "lineno": 329,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "dex",
          "path",
          "amount",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_simulate_swap",
          "_simulate_swap",
          "max",
          "debug"
        ]
      },
      {
        "name": "_estimate_gas",
        "qualified_name": "DirectDEXExecutor._estimate_gas",
        "is_async": true,
        "lineno": 358,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "dex",
          "path",
          "amount",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "upper",
          "len"
        ]
      },
      {
        "name": "_get_liquidity",
        "qualified_name": "DirectDEXExecutor._get_liquidity",
        "is_async": true,
        "lineno": 382,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "token_a",
          "token_b",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal"
        ]
      },
      {
        "name": "_calculate_fee",
        "qualified_name": "DirectDEXExecutor._calculate_fee",
        "is_async": false,
        "lineno": 393,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "dex",
          "amount"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "get",
          "upper",
          "Decimal"
        ]
      },
      {
        "name": "_encode_v3_path",
        "qualified_name": "DirectDEXExecutor._encode_v3_path",
        "is_async": false,
        "lineno": 405,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "tokens"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bytes",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "enumerate",
          "fromhex",
          "len",
          "to_bytes"
        ]
      },
      {
        "name": "_randomize_gas_price",
        "qualified_name": "DirectDEXExecutor._randomize_gas_price",
        "is_async": false,
        "lineno": 416,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "tx"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "uniform",
          "int"
        ]
      },
      {
        "name": "_apply_commit_reveal",
        "qualified_name": "DirectDEXExecutor._apply_commit_reveal",
        "is_async": true,
        "lineno": 426,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "tx"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_send_transaction_with_retry",
        "qualified_name": "DirectDEXExecutor._send_transaction_with_retry",
        "is_async": true,
        "lineno": 432,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "signed_tx",
          "chain",
          "max_retries"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "range",
          "send_raw_transaction",
          "info",
          "hex",
          "str",
          "warning",
          "sleep",
          "sleep",
          "Exception"
        ]
      },
      {
        "name": "_wait_for_confirmation",
        "qualified_name": "DirectDEXExecutor._wait_for_confirmation",
        "is_async": true,
        "lineno": 459,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "tx_hash",
          "chain",
          "timeout"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "now",
          "now",
          "get_transaction_receipt",
          "sleep",
          "Exception"
        ]
      },
      {
        "name": "_get_optimal_gas_price",
        "qualified_name": "DirectDEXExecutor._get_optimal_gas_price",
        "is_async": true,
        "lineno": 482,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "min",
          "int"
        ]
      },
      {
        "name": "_quote_v3",
        "qualified_name": "DirectDEXExecutor._quote_v3",
        "is_async": true,
        "lineno": 498,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "contract",
          "path",
          "amount"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "int"
        ]
      },
      {
        "name": "cleanup",
        "qualified_name": "DirectDEXExecutor.cleanup",
        "is_async": true,
        "lineno": 509,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "clear",
          "clear",
          "info"
        ]
      },
      {
        "name": "_get_dex_quote",
        "qualified_name": "DirectDEXExecutor._get_dex_quote",
        "is_async": true,
        "lineno": 516,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "dex_name",
          "contract",
          "token_in",
          "token_out",
          "amount",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[DEXQuote]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_find_path",
          "ether_to_wei",
          "lower",
          "_quote_v3",
          "call",
          "getAmountsOut",
          "wei_to_ether",
          "_estimate_price_impact",
          "_estimate_gas",
          "DEXQuote",
          "upper",
          "_get_liquidity",
          "_calculate_fee",
          "debug"
        ]
      },
      {
        "name": "_find_path",
        "qualified_name": "DirectDEXExecutor._find_path",
        "is_async": true,
        "lineno": 597,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "dex",
          "token_in",
          "token_out",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[List[str]]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "toChecksumAddress",
          "toChecksumAddress",
          "get",
          "toChecksumAddress",
          "append",
          "get",
          "toChecksumAddress",
          "append",
          "_path_has_liquidity",
          "_simulate_swap",
          "ether_to_wei",
          "Decimal",
          "error"
        ]
      },
      {
        "name": "_path_has_liquidity",
        "qualified_name": "DirectDEXExecutor._path_has_liquidity",
        "is_async": true,
        "lineno": 658,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "path",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_simulate_swap",
        "qualified_name": "DirectDEXExecutor._simulate_swap",
        "is_async": true,
        "lineno": 664,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "dex",
          "path",
          "amount",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "lower",
          "_quote_v3",
          "call",
          "getAmountsOut"
        ]
      },
      {
        "name": "validate_order",
        "qualified_name": "DirectDEXExecutor.validate_order",
        "is_async": true,
        "lineno": 692,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "error",
          "error",
          "error",
          "isAddress",
          "isAddress",
          "error",
          "error",
          "error",
          "error"
        ]
      },
      {
        "name": "get_order_status",
        "qualified_name": "DirectDEXExecutor.get_order_status",
        "is_async": true,
        "lineno": 738,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "OrderStatus",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_get_transaction_receipt",
          "warning",
          "error"
        ]
      },
      {
        "name": "cancel_order",
        "qualified_name": "DirectDEXExecutor.cancel_order",
        "is_async": true,
        "lineno": 775,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "error",
          "info",
          "warning",
          "warning",
          "error"
        ]
      },
      {
        "name": "modify_order",
        "qualified_name": "DirectDEXExecutor.modify_order",
        "is_async": true,
        "lineno": 816,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "order_id",
          "modifications"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "error",
          "error",
          "items",
          "setattr",
          "info",
          "warning",
          "validate_order",
          "error",
          "error"
        ]
      },
      {
        "name": "_get_transaction_receipt",
        "qualified_name": "DirectDEXExecutor._get_transaction_receipt",
        "is_async": true,
        "lineno": 869,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "tx_hash"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hasattr",
          "items",
          "get_transaction_receipt",
          "dict",
          "hasattr",
          "get_transaction_receipt",
          "dict",
          "debug"
        ]
      },
      {
        "name": "_check_bundle_status",
        "qualified_name": "DirectDEXExecutor._check_bundle_status",
        "is_async": true,
        "lineno": 901,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "bundle_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "json",
          "get",
          "get",
          "error"
        ]
      },
      {
        "name": "_build_transaction",
        "qualified_name": "DirectDEXExecutor._build_transaction",
        "is_async": true,
        "lineno": 935,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hasattr",
          "hasattr",
          "get_transaction_count"
        ]
      },
      {
        "name": "format_token_amount",
        "qualified_name": "DirectDEXExecutor.format_token_amount",
        "is_async": false,
        "lineno": 957,
        "scope": "class:DirectDEXExecutor",
        "params": [
          "amount",
          "decimals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "rstrip",
          "rstrip"
        ]
      }
    ],
    "found_classes": [
      "DEXQuote",
      "DirectDEXExecutor"
    ],
    "class_bases": {
      "DEXQuote": [],
      "DirectDEXExecutor": [
        "BaseExecutor"
      ]
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "trading/executors/mev_protection.py": {
    "path": "trading\\executors\\mev_protection.py",
    "exists": true,
    "expected": [
      {
        "name": "protect_transaction",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ProtectedTransaction",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "execute_protected_trade",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_protection_stats",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "MEVProtectionLayer.__init__",
        "is_async": false,
        "lineno": 79,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "__init__",
          "super",
          "upper",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "Decimal",
          "EncryptionManager",
          "get",
          "info"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "MEVProtectionLayer.initialize",
        "is_async": true,
        "lineno": 134,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Web3",
          "HTTPProvider",
          "get",
          "from_key",
          "create",
          "info",
          "ClientSession",
          "create_task",
          "_monitor_mempool",
          "create_task",
          "_analyze_attack_patterns",
          "info",
          "error"
        ]
      },
      {
        "name": "protect_transaction",
        "qualified_name": "MEVProtectionLayer.protect_transaction",
        "is_async": true,
        "lineno": 164,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "order",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ProtectedTransaction",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "copy",
          "_analyze_mev_risk",
          "_apply_gas_randomization",
          "append",
          "_apply_time_delays",
          "append",
          "_apply_dynamic_routing",
          "append",
          "_create_flashbots_bundle",
          "append",
          "_route_private_mempool",
          "append",
          "_send_decoy_transactions",
          "append",
          "_apply_commit_reveal",
          "append",
          "_estimate_mev_savings",
          "ProtectedTransaction",
          "now",
          "_calculate_tx_hash",
          "info",
          "len",
          "error",
          "ProtectedTransaction",
          "Decimal"
        ]
      },
      {
        "name": "_analyze_mev_risk",
        "qualified_name": "MEVProtectionLayer._analyze_mev_risk",
        "is_async": true,
        "lineno": 241,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "order",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "min",
          "float",
          "append",
          "float",
          "min",
          "append",
          "_check_mempool_congestion",
          "append",
          "_check_attacker_activity",
          "append",
          "sum",
          "debug",
          "error"
        ]
      },
      {
        "name": "_apply_gas_randomization",
        "qualified_name": "MEVProtectionLayer._apply_gas_randomization",
        "is_async": false,
        "lineno": 278,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "uniform",
          "int",
          "int",
          "int",
          "uniform",
          "int",
          "error"
        ]
      },
      {
        "name": "_apply_time_delays",
        "qualified_name": "MEVProtectionLayer._apply_time_delays",
        "is_async": true,
        "lineno": 306,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "uniform",
          "sleep",
          "get_transaction_count",
          "error"
        ]
      },
      {
        "name": "_create_flashbots_bundle",
        "qualified_name": "MEVProtectionLayer._create_flashbots_bundle",
        "is_async": true,
        "lineno": 325,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "warning",
          "sign_transaction",
          "get",
          "hex",
          "int",
          "time",
          "_sign_flashbots_bundle",
          "post",
          "json",
          "get",
          "info",
          "error",
          "error"
        ]
      },
      {
        "name": "_sign_flashbots_bundle",
        "qualified_name": "MEVProtectionLayer._sign_flashbots_bundle",
        "is_async": false,
        "lineno": 377,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "bundle"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "dumps",
          "digest",
          "sha256",
          "encode",
          "signHash",
          "hex"
        ]
      },
      {
        "name": "_route_private_mempool",
        "qualified_name": "MEVProtectionLayer._route_private_mempool",
        "is_async": true,
        "lineno": 384,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "choice",
          "info",
          "error"
        ]
      },
      {
        "name": "_send_decoy_transactions",
        "qualified_name": "MEVProtectionLayer._send_decoy_transactions",
        "is_async": true,
        "lineno": 401,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "range",
          "Decimal",
          "get_transaction_count",
          "debug",
          "error"
        ]
      },
      {
        "name": "_apply_commit_reveal",
        "qualified_name": "MEVProtectionLayer._apply_commit_reveal",
        "is_async": true,
        "lineno": 424,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hexdigest",
          "sha256",
          "encode",
          "dumps",
          "error"
        ]
      },
      {
        "name": "_apply_dynamic_routing",
        "qualified_name": "MEVProtectionLayer._apply_dynamic_routing",
        "is_async": true,
        "lineno": 442,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "error"
        ]
      },
      {
        "name": "_check_mempool_congestion",
        "qualified_name": "MEVProtectionLayer._check_mempool_congestion",
        "is_async": true,
        "lineno": 456,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "uniform",
          "error"
        ]
      },
      {
        "name": "_check_attacker_activity",
        "qualified_name": "MEVProtectionLayer._check_attacker_activity",
        "is_async": true,
        "lineno": 467,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "uniform",
          "error"
        ]
      },
      {
        "name": "_estimate_mev_savings",
        "qualified_name": "MEVProtectionLayer._estimate_mev_savings",
        "is_async": true,
        "lineno": 478,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "original_tx",
          "protected_tx",
          "risk_score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "min",
          "Decimal",
          "str",
          "error",
          "Decimal"
        ]
      },
      {
        "name": "_calculate_tx_hash",
        "qualified_name": "MEVProtectionLayer._calculate_tx_hash",
        "is_async": false,
        "lineno": 518,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hexdigest",
          "sha256",
          "encode",
          "dumps"
        ]
      },
      {
        "name": "_monitor_mempool",
        "qualified_name": "MEVProtectionLayer._monitor_mempool",
        "is_async": true,
        "lineno": 524,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_block",
          "get_transaction",
          "_detect_mev_threat",
          "append",
          "_respond_to_threat",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_detect_mev_threat",
        "qualified_name": "MEVProtectionLayer._detect_mev_threat",
        "is_async": true,
        "lineno": 551,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[MEVThreat]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_is_sandwich_attack",
          "MEVThreat",
          "Decimal",
          "now",
          "hex",
          "_is_frontrun_attempt",
          "MEVThreat",
          "Decimal",
          "now",
          "hex",
          "error"
        ]
      },
      {
        "name": "_is_sandwich_attack",
        "qualified_name": "MEVProtectionLayer._is_sandwich_attack",
        "is_async": true,
        "lineno": 582,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_is_frontrun_attempt",
        "qualified_name": "MEVProtectionLayer._is_frontrun_attempt",
        "is_async": true,
        "lineno": 588,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_respond_to_threat",
        "qualified_name": "MEVProtectionLayer._respond_to_threat",
        "is_async": true,
        "lineno": 594,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "threat"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "warning",
          "error"
        ]
      },
      {
        "name": "_analyze_attack_patterns",
        "qualified_name": "MEVProtectionLayer._analyze_attack_patterns",
        "is_async": true,
        "lineno": 607,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "now",
          "append",
          "info",
          "len",
          "len",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "get_protection_stats",
        "qualified_name": "MEVProtectionLayer.get_protection_stats",
        "is_async": true,
        "lineno": 635,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "str",
          "len"
        ]
      },
      {
        "name": "execute_protected_trade",
        "qualified_name": "MEVProtectionLayer.execute_protected_trade",
        "is_async": true,
        "lineno": 647,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_build_transaction",
          "protect_transaction",
          "_execute_flashbots_bundle",
          "_execute_private_mempool",
          "_execute_standard",
          "get",
          "error",
          "str"
        ]
      },
      {
        "name": "_execute_flashbots_bundle",
        "qualified_name": "MEVProtectionLayer._execute_flashbots_bundle",
        "is_async": true,
        "lineno": 681,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "bundle_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "range",
          "get",
          "json",
          "get",
          "get",
          "info",
          "sleep",
          "get",
          "get",
          "sleep",
          "error",
          "str"
        ]
      },
      {
        "name": "_execute_private_mempool",
        "qualified_name": "MEVProtectionLayer._execute_private_mempool",
        "is_async": true,
        "lineno": 722,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "pop",
          "_calculate_tx_hash",
          "error",
          "str"
        ]
      },
      {
        "name": "_execute_standard",
        "qualified_name": "MEVProtectionLayer._execute_standard",
        "is_async": true,
        "lineno": 743,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "transaction"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sign_transaction",
          "pop",
          "send_raw_transaction",
          "wait_for_transaction_receipt",
          "hex",
          "error",
          "str"
        ]
      },
      {
        "name": "cleanup",
        "qualified_name": "MEVProtectionLayer.cleanup",
        "is_async": true,
        "lineno": 771,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "close",
          "clear",
          "clear",
          "info"
        ]
      },
      {
        "name": "execute_trade",
        "qualified_name": "MEVProtectionLayer.execute_trade",
        "is_async": true,
        "lineno": 785,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "execute_protected_trade"
        ]
      },
      {
        "name": "validate_order",
        "qualified_name": "MEVProtectionLayer.validate_order",
        "is_async": true,
        "lineno": 799,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "warning",
          "isConnected",
          "error",
          "error"
        ]
      },
      {
        "name": "get_order_status",
        "qualified_name": "MEVProtectionLayer.get_order_status",
        "is_async": true,
        "lineno": 832,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "OrderStatus",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "hasattr",
          "_check_bundle_status"
        ]
      },
      {
        "name": "cancel_order",
        "qualified_name": "MEVProtectionLayer.cancel_order",
        "is_async": true,
        "lineno": 857,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "warning"
        ]
      },
      {
        "name": "modify_order",
        "qualified_name": "MEVProtectionLayer.modify_order",
        "is_async": true,
        "lineno": 871,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "order_id",
          "modifications"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "warning"
        ]
      },
      {
        "name": "_get_transaction_receipt",
        "qualified_name": "MEVProtectionLayer._get_transaction_receipt",
        "is_async": true,
        "lineno": 891,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "tx_hash"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hasattr",
          "items",
          "get_transaction_receipt",
          "dict",
          "hasattr",
          "get_transaction_receipt",
          "dict",
          "debug"
        ]
      },
      {
        "name": "_check_bundle_status",
        "qualified_name": "MEVProtectionLayer._check_bundle_status",
        "is_async": true,
        "lineno": 923,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "bundle_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "json",
          "get",
          "get",
          "error"
        ]
      },
      {
        "name": "_build_transaction",
        "qualified_name": "MEVProtectionLayer._build_transaction",
        "is_async": true,
        "lineno": 957,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hasattr",
          "hasattr",
          "get_transaction_count"
        ]
      },
      {
        "name": "format_token_amount",
        "qualified_name": "MEVProtectionLayer.format_token_amount",
        "is_async": false,
        "lineno": 979,
        "scope": "class:MEVProtectionLayer",
        "params": [
          "amount",
          "decimals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "rstrip",
          "rstrip"
        ]
      }
    ],
    "found_classes": [
      "MEVProtectionLevel",
      "AttackType",
      "MEVThreat",
      "ProtectedTransaction",
      "MEVProtectionLayer"
    ],
    "class_bases": {
      "MEVProtectionLevel": [
        "Enum"
      ],
      "AttackType": [
        "Enum"
      ],
      "MEVThreat": [],
      "ProtectedTransaction": [],
      "MEVProtectionLayer": [
        "BaseExecutor"
      ]
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "trading/strategies/base_strategy.py": {
    "path": "trading\\strategies\\base_strategy.py",
    "exists": true,
    "expected": [
      {
        "name": "analyze",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_indicators",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "price_data",
          "volume_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "validate_signal",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "signal",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "execute",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "signal",
          "order_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_exit_conditions",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "position",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_position_size",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "signal",
          "account_balance",
          "current_price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_stop_loss",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "entry_price",
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_take_profit",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "entry_price",
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "backtest",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "historical_data",
          "initial_balance"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_performance_summary",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "BaseStrategy.__init__",
        "is_async": false,
        "lineno": 101,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "get",
          "get",
          "Decimal",
          "str",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "StrategyPerformance",
          "timedelta",
          "get",
          "info"
        ]
      },
      {
        "name": "analyze",
        "qualified_name": "BaseStrategy.analyze",
        "is_async": true,
        "lineno": 146,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[TradingSignal]",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "calculate_indicators",
        "qualified_name": "BaseStrategy.calculate_indicators",
        "is_async": true,
        "lineno": 162,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "price_data",
          "volume_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "validate_signal",
        "qualified_name": "BaseStrategy.validate_signal",
        "is_async": false,
        "lineno": 180,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "signal",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "execute",
        "qualified_name": "BaseStrategy.execute",
        "is_async": true,
        "lineno": 197,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "signal",
          "order_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "warning",
          "warning",
          "info",
          "_create_order_from_signal",
          "execute_immediate",
          "get",
          "_on_position_opened",
          "_on_position_failed",
          "get",
          "error",
          "str"
        ]
      },
      {
        "name": "check_exit_conditions",
        "qualified_name": "BaseStrategy.check_exit_conditions",
        "is_async": true,
        "lineno": 255,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "position",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[TradingSignal]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "get",
          "warning",
          "_create_exit_signal",
          "info",
          "_create_exit_signal",
          "now",
          "info",
          "_create_exit_signal",
          "_check_custom_exit_conditions"
        ]
      },
      {
        "name": "_check_custom_exit_conditions",
        "qualified_name": "BaseStrategy._check_custom_exit_conditions",
        "is_async": true,
        "lineno": 295,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "position",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[TradingSignal]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "calculate_position_size",
        "qualified_name": "BaseStrategy.calculate_position_size",
        "is_async": false,
        "lineno": 312,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "signal",
          "account_balance",
          "current_price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "_calculate_kelly_position",
          "min",
          "_get_strength_multiplier",
          "Decimal",
          "str",
          "get",
          "Decimal"
        ]
      },
      {
        "name": "_calculate_kelly_position",
        "qualified_name": "BaseStrategy._calculate_kelly_position",
        "is_async": false,
        "lineno": 354,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "confidence",
          "account_balance"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "float",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "max"
        ]
      },
      {
        "name": "_get_strength_multiplier",
        "qualified_name": "BaseStrategy._get_strength_multiplier",
        "is_async": false,
        "lineno": 381,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "strength"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "calculate_stop_loss",
        "qualified_name": "BaseStrategy.calculate_stop_loss",
        "is_async": false,
        "lineno": 392,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "entry_price",
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "get",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "get"
        ]
      },
      {
        "name": "calculate_take_profit",
        "qualified_name": "BaseStrategy.calculate_take_profit",
        "is_async": false,
        "lineno": 422,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "entry_price",
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "get",
          "calculate_stop_loss"
        ]
      },
      {
        "name": "_create_order_from_signal",
        "qualified_name": "BaseStrategy._create_order_from_signal",
        "is_async": false,
        "lineno": 450,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_create_exit_signal",
        "qualified_name": "BaseStrategy._create_exit_signal",
        "is_async": false,
        "lineno": 466,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "position",
          "reason",
          "current_price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TradingSignal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "TradingSignal",
          "calculate_percentage_change"
        ]
      },
      {
        "name": "_on_position_opened",
        "qualified_name": "BaseStrategy._on_position_opened",
        "is_async": true,
        "lineno": 488,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "signal",
          "result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "now",
          "append",
          "info"
        ]
      },
      {
        "name": "_on_position_failed",
        "qualified_name": "BaseStrategy._on_position_failed",
        "is_async": true,
        "lineno": 510,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "signal",
          "result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "append",
          "error",
          "get"
        ]
      },
      {
        "name": "_on_position_closed",
        "qualified_name": "BaseStrategy._on_position_closed",
        "is_async": true,
        "lineno": 527,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "position",
          "exit_price",
          "reason"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "now",
          "timedelta",
          "calculate_percentage_change",
          "Decimal",
          "_update_performance",
          "now",
          "append",
          "info"
        ]
      },
      {
        "name": "_update_performance",
        "qualified_name": "BaseStrategy._update_performance",
        "is_async": false,
        "lineno": 575,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "pnl_amount",
          "pnl_percent",
          "duration"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "max",
          "max",
          "abs",
          "min",
          "max",
          "abs",
          "float",
          "sum",
          "timedelta"
        ]
      },
      {
        "name": "should_analyze",
        "qualified_name": "BaseStrategy.should_analyze",
        "is_async": false,
        "lineno": 634,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "token_address",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "now",
          "get",
          "len",
          "get",
          "get"
        ]
      },
      {
        "name": "get_performance_summary",
        "qualified_name": "BaseStrategy.get_performance_summary",
        "is_async": false,
        "lineno": 684,
        "scope": "class:BaseStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len"
        ]
      },
      {
        "name": "calculate_sharpe_ratio",
        "qualified_name": "BaseStrategy.calculate_sharpe_ratio",
        "is_async": false,
        "lineno": 701,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "returns",
          "risk_free_rate"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "array",
          "std",
          "mean",
          "std",
          "float",
          "sqrt"
        ]
      },
      {
        "name": "calculate_max_drawdown",
        "qualified_name": "BaseStrategy.calculate_max_drawdown",
        "is_async": false,
        "lineno": 719,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "equity_curve"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "max"
        ]
      },
      {
        "name": "backtest",
        "qualified_name": "BaseStrategy.backtest",
        "is_async": true,
        "lineno": 736,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "historical_data",
          "initial_balance"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "StrategyPerformance",
          "clear",
          "clear",
          "clear",
          "float",
          "enumerate",
          "list",
          "items",
          "check_exit_conditions",
          "Decimal",
          "str",
          "calculate_percentage_change",
          "Decimal",
          "_on_position_closed",
          "should_analyze",
          "get",
          "analyze",
          "validate_signal",
          "calculate_position_size",
          "Decimal",
          "str",
          "calculate_stop_loss",
          "calculate_take_profit",
          "append",
          "append",
          "float",
          "len",
          "append",
          "items",
          "Decimal",
          "str",
          "calculate_percentage_change",
          "Decimal",
          "calculate_sharpe_ratio",
          "calculate_max_drawdown"
        ]
      },
      {
        "name": "reset",
        "qualified_name": "BaseStrategy.reset",
        "is_async": false,
        "lineno": 845,
        "scope": "class:BaseStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "clear",
          "clear",
          "clear",
          "info"
        ]
      },
      {
        "name": "stop",
        "qualified_name": "BaseStrategy.stop",
        "is_async": false,
        "lineno": 853,
        "scope": "class:BaseStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info"
        ]
      },
      {
        "name": "start",
        "qualified_name": "BaseStrategy.start",
        "is_async": false,
        "lineno": 858,
        "scope": "class:BaseStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info"
        ]
      },
      {
        "name": "get_active_positions",
        "qualified_name": "BaseStrategy.get_active_positions",
        "is_async": false,
        "lineno": 864,
        "scope": "class:BaseStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[TradingSignal]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "list",
          "values"
        ]
      },
      {
        "name": "get_signal_history",
        "qualified_name": "BaseStrategy.get_signal_history",
        "is_async": false,
        "lineno": 868,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "limit"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[TradingSignal]",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "get_trade_history",
        "qualified_name": "BaseStrategy.get_trade_history",
        "is_async": false,
        "lineno": 877,
        "scope": "class:BaseStrategy",
        "params": [
          "self",
          "limit"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": []
      }
    ],
    "found_classes": [
      "SignalType",
      "SignalStrength",
      "StrategyState",
      "TradingSignal",
      "StrategyPerformance",
      "BaseStrategy"
    ],
    "class_bases": {
      "SignalType": [
        "Enum"
      ],
      "SignalStrength": [
        "Enum"
      ],
      "StrategyState": [
        "Enum"
      ],
      "TradingSignal": [],
      "StrategyPerformance": [],
      "BaseStrategy": [
        "ABC"
      ]
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "trading/strategies/momentum.py": {
    "path": "trading\\strategies\\momentum.py",
    "exists": true,
    "expected": [
      {
        "name": "analyze",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TradingSignal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_momentum",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "identify_entry_points",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "momentum_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_position_size",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "execute",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "MomentumStrategy.__init__",
        "is_async": false,
        "lineno": 70,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_default_config",
          "deque",
          "_initialize_parameters"
        ]
      },
      {
        "name": "_default_config",
        "qualified_name": "MomentumStrategy._default_config",
        "is_async": false,
        "lineno": 78,
        "scope": "class:MomentumStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_initialize_parameters",
        "qualified_name": "MomentumStrategy._initialize_parameters",
        "is_async": false,
        "lineno": 119,
        "scope": "class:MomentumStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "analyze",
        "qualified_name": "MomentumStrategy.analyze",
        "is_async": true,
        "lineno": 125,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[MomentumSignal]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "_calculate_momentum_metrics",
          "gather",
          "_check_breakout_momentum",
          "_check_trend_momentum",
          "_check_volume_momentum",
          "_check_smart_money_momentum",
          "isinstance",
          "_select_best_signal",
          "_validate_signal",
          "_enhance_signal",
          "append",
          "error"
        ]
      },
      {
        "name": "_calculate_momentum_metrics",
        "qualified_name": "MomentumStrategy._calculate_momentum_metrics",
        "is_async": true,
        "lineno": 174,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "MomentumMetrics",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "_calculate_rsi_momentum",
          "get",
          "_calculate_macd_momentum",
          "get",
          "_calculate_volume_ratio",
          "get",
          "_calculate_price_velocity",
          "_calculate_trend_strength",
          "_calculate_breakout_probability",
          "get",
          "_calculate_smart_money_score",
          "MomentumMetrics",
          "error",
          "MomentumMetrics"
        ]
      },
      {
        "name": "_check_breakout_momentum",
        "qualified_name": "MomentumStrategy._check_breakout_momentum",
        "is_async": true,
        "lineno": 220,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "market_data",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[MomentumSignal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_find_resistance_levels",
          "Decimal",
          "str",
          "get",
          "any",
          "Decimal",
          "str",
          "Decimal",
          "_calculate_breakout_targets",
          "_calculate_breakout_stop_loss",
          "MomentumSignal",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "_check_trend_momentum",
        "qualified_name": "MomentumStrategy._check_trend_momentum",
        "is_async": true,
        "lineno": 286,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "market_data",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[MomentumSignal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "_check_ma_alignment",
          "Decimal",
          "str",
          "get",
          "_calculate_trend_targets",
          "_calculate_trend_stop_loss",
          "MomentumSignal",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "_check_volume_momentum",
        "qualified_name": "MomentumStrategy._check_volume_momentum",
        "is_async": true,
        "lineno": 345,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "market_data",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[MomentumSignal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_analyze_volume_pattern",
          "Decimal",
          "str",
          "get",
          "_calculate_volume_targets",
          "Decimal",
          "MomentumSignal",
          "utcnow",
          "min",
          "min",
          "error"
        ]
      },
      {
        "name": "_check_smart_money_momentum",
        "qualified_name": "MomentumStrategy._check_smart_money_momentum",
        "is_async": true,
        "lineno": 399,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "market_data",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[MomentumSignal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "_calculate_smart_money_velocity",
          "Decimal",
          "str",
          "get",
          "_calculate_smart_money_targets",
          "_calculate_smart_money_stop_loss",
          "MomentumSignal",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "_calculate_rsi_momentum",
        "qualified_name": "MomentumStrategy._calculate_rsi_momentum",
        "is_async": false,
        "lineno": 461,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "rsi"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "max"
        ]
      },
      {
        "name": "_calculate_macd_momentum",
        "qualified_name": "MomentumStrategy._calculate_macd_momentum",
        "is_async": false,
        "lineno": 471,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "macd"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "min",
          "abs"
        ]
      },
      {
        "name": "_calculate_volume_ratio",
        "qualified_name": "MomentumStrategy._calculate_volume_ratio",
        "is_async": true,
        "lineno": 483,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "volume_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get"
        ]
      },
      {
        "name": "_calculate_price_velocity",
        "qualified_name": "MomentumStrategy._calculate_price_velocity",
        "is_async": false,
        "lineno": 496,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "price_history"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "len",
          "range",
          "len",
          "mean"
        ]
      },
      {
        "name": "_calculate_trend_strength",
        "qualified_name": "MomentumStrategy._calculate_trend_strength",
        "is_async": true,
        "lineno": 519,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "_calculate_ma_trend",
          "min"
        ]
      },
      {
        "name": "_calculate_breakout_probability",
        "qualified_name": "MomentumStrategy._calculate_breakout_probability",
        "is_async": true,
        "lineno": 538,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "len",
          "_detect_consolidation",
          "_detect_volume_buildup",
          "_detect_range_tightening",
          "min"
        ]
      },
      {
        "name": "_calculate_smart_money_score",
        "qualified_name": "MomentumStrategy._calculate_smart_money_score",
        "is_async": false,
        "lineno": 562,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "smart_money"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "min",
          "min"
        ]
      },
      {
        "name": "_find_resistance_levels",
        "qualified_name": "MomentumStrategy._find_resistance_levels",
        "is_async": true,
        "lineno": 580,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "len",
          "range",
          "len",
          "append",
          "_cluster_price_levels",
          "sorted"
        ]
      },
      {
        "name": "_cluster_price_levels",
        "qualified_name": "MomentumStrategy._cluster_price_levels",
        "is_async": false,
        "lineno": 602,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "levels",
          "threshold"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "abs",
          "append",
          "append",
          "mean",
          "append",
          "mean"
        ]
      },
      {
        "name": "_select_best_signal",
        "qualified_name": "MomentumStrategy._select_best_signal",
        "is_async": false,
        "lineno": 622,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "signals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "MomentumSignal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "sort"
        ]
      },
      {
        "name": "_validate_signal",
        "qualified_name": "MomentumStrategy._validate_signal",
        "is_async": true,
        "lineno": 639,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "signal",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "warning",
          "error"
        ]
      },
      {
        "name": "_enhance_signal",
        "qualified_name": "MomentumStrategy._enhance_signal",
        "is_async": true,
        "lineno": 669,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "signal",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "MomentumSignal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "_calculate_position_size",
          "float",
          "error"
        ]
      },
      {
        "name": "_calculate_position_size",
        "qualified_name": "MomentumStrategy._calculate_position_size",
        "is_async": false,
        "lineno": 706,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "confidence",
          "risk_score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "min"
        ]
      },
      {
        "name": "_calculate_breakout_targets",
        "qualified_name": "MomentumStrategy._calculate_breakout_targets",
        "is_async": false,
        "lineno": 722,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "entry_price",
          "resistance_levels",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Decimal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "float",
          "append",
          "Decimal",
          "str",
          "append",
          "Decimal",
          "append",
          "Decimal",
          "Decimal",
          "Decimal",
          "str",
          "append",
          "sorted"
        ]
      },
      {
        "name": "_calculate_breakout_stop_loss",
        "qualified_name": "MomentumStrategy._calculate_breakout_stop_loss",
        "is_async": false,
        "lineno": 755,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "entry_price",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "min",
          "Decimal",
          "str",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "update_signal",
        "qualified_name": "MomentumStrategy.update_signal",
        "is_async": true,
        "lineno": 770,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "token_address",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "get",
          "float",
          "enumerate",
          "len",
          "Decimal",
          "get",
          "Decimal",
          "Decimal",
          "str",
          "_calculate_momentum_metrics",
          "_check_reversal_signals",
          "error"
        ]
      },
      {
        "name": "_check_reversal_signals",
        "qualified_name": "MomentumStrategy._check_reversal_signals",
        "is_async": true,
        "lineno": 853,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_calculate_ma_trend",
        "qualified_name": "MomentumStrategy._calculate_ma_trend",
        "is_async": false,
        "lineno": 878,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "ma_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "all"
        ]
      },
      {
        "name": "_detect_consolidation",
        "qualified_name": "MomentumStrategy._detect_consolidation",
        "is_async": false,
        "lineno": 898,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "candles"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "max",
          "min",
          "mean"
        ]
      },
      {
        "name": "_detect_volume_buildup",
        "qualified_name": "MomentumStrategy._detect_volume_buildup",
        "is_async": false,
        "lineno": 922,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "candles"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "mean",
          "mean",
          "min"
        ]
      },
      {
        "name": "_detect_range_tightening",
        "qualified_name": "MomentumStrategy._detect_range_tightening",
        "is_async": false,
        "lineno": 943,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "candles"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "_calculate_range",
          "_calculate_range",
          "max",
          "min"
        ]
      },
      {
        "name": "_calculate_range",
        "qualified_name": "MomentumStrategy._calculate_range",
        "is_async": false,
        "lineno": 962,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "candles"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "max",
          "min"
        ]
      },
      {
        "name": "_check_ma_alignment",
        "qualified_name": "MomentumStrategy._check_ma_alignment",
        "is_async": true,
        "lineno": 972,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_calculate_trend_targets",
        "qualified_name": "MomentumStrategy._calculate_trend_targets",
        "is_async": false,
        "lineno": 987,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "entry_price",
          "trend_strength",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Decimal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "append",
          "append",
          "Decimal",
          "append",
          "Decimal"
        ]
      },
      {
        "name": "_calculate_trend_stop_loss",
        "qualified_name": "MomentumStrategy._calculate_trend_stop_loss",
        "is_async": false,
        "lineno": 1006,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "entry_price",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "len",
          "min",
          "Decimal",
          "str",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "_analyze_volume_pattern",
        "qualified_name": "MomentumStrategy._analyze_volume_pattern",
        "is_async": true,
        "lineno": 1021,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "len",
          "mean",
          "sum",
          "all",
          "mean"
        ]
      },
      {
        "name": "_calculate_volume_targets",
        "qualified_name": "MomentumStrategy._calculate_volume_targets",
        "is_async": false,
        "lineno": 1060,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "entry_price",
          "volume_ratio",
          "volume_pattern"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Decimal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "min",
          "append",
          "Decimal",
          "Decimal",
          "str",
          "append",
          "Decimal",
          "Decimal",
          "str",
          "append",
          "Decimal",
          "Decimal",
          "str",
          "append",
          "Decimal",
          "append",
          "Decimal",
          "append",
          "Decimal"
        ]
      },
      {
        "name": "_calculate_smart_money_velocity",
        "qualified_name": "MomentumStrategy._calculate_smart_money_velocity",
        "is_async": true,
        "lineno": 1085,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "smart_money"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "len",
          "len",
          "sum",
          "sum",
          "len",
          "sum",
          "sum",
          "min"
        ]
      },
      {
        "name": "_calculate_smart_money_targets",
        "qualified_name": "MomentumStrategy._calculate_smart_money_targets",
        "is_async": false,
        "lineno": 1108,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "entry_price",
          "smart_money",
          "smart_score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Decimal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "extend",
          "Decimal",
          "str",
          "append",
          "Decimal",
          "str",
          "append",
          "Decimal",
          "str",
          "sorted",
          "set"
        ]
      },
      {
        "name": "_calculate_smart_money_stop_loss",
        "qualified_name": "MomentumStrategy._calculate_smart_money_stop_loss",
        "is_async": false,
        "lineno": 1131,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "entry_price",
          "whale_activity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "float",
          "Decimal",
          "str",
          "max",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "get_performance_metrics",
        "qualified_name": "MomentumStrategy.get_performance_metrics",
        "is_async": false,
        "lineno": 1148,
        "scope": "class:MomentumStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "len",
          "_get_signal_distribution",
          "_calculate_average_strength",
          "_calculate_success_rate"
        ]
      },
      {
        "name": "_get_signal_distribution",
        "qualified_name": "MomentumStrategy._get_signal_distribution",
        "is_async": false,
        "lineno": 1159,
        "scope": "class:MomentumStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "_calculate_average_strength",
        "qualified_name": "MomentumStrategy._calculate_average_strength",
        "is_async": false,
        "lineno": 1167,
        "scope": "class:MomentumStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "mean"
        ]
      },
      {
        "name": "_calculate_success_rate",
        "qualified_name": "MomentumStrategy._calculate_success_rate",
        "is_async": false,
        "lineno": 1173,
        "scope": "class:MomentumStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "calculate_momentum",
        "qualified_name": "MomentumStrategy.calculate_momentum",
        "is_async": false,
        "lineno": 1182,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_calculate_momentum"
        ]
      },
      {
        "name": "identify_entry_points",
        "qualified_name": "MomentumStrategy.identify_entry_points",
        "is_async": false,
        "lineno": 1195,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "momentum_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "append",
          "get",
          "get",
          "get",
          "append",
          "get",
          "get",
          "get",
          "append",
          "get",
          "min",
          "get",
          "sort"
        ]
      },
      {
        "name": "calculate_position_size",
        "qualified_name": "MomentumStrategy.calculate_position_size",
        "is_async": false,
        "lineno": 1239,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "hasattr",
          "Decimal",
          "str",
          "_calculate_position_size",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "get",
          "min"
        ]
      },
      {
        "name": "execute",
        "qualified_name": "MomentumStrategy.execute",
        "is_async": true,
        "lineno": 1272,
        "scope": "class:MomentumStrategy",
        "params": [
          "self",
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "calculate_position_size",
          "float",
          "float",
          "float",
          "float",
          "info",
          "id",
          "isoformat",
          "error",
          "str"
        ]
      }
    ],
    "found_classes": [
      "MomentumType",
      "TimeFrame",
      "MomentumSignal",
      "MomentumMetrics",
      "MomentumStrategy"
    ],
    "class_bases": {
      "MomentumType": [
        "Enum"
      ],
      "TimeFrame": [
        "Enum"
      ],
      "MomentumSignal": [],
      "MomentumMetrics": [],
      "MomentumStrategy": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "trading/strategies/scalping.py": {
    "path": "trading\\strategies\\scalping.py",
    "exists": true,
    "expected": [
      {
        "name": "analyze",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "execute",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "opportunity",
          "order_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "ScalpingStrategy.__init__",
        "is_async": false,
        "lineno": 54,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "Decimal",
          "str",
          "get",
          "get",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "analyze",
        "qualified_name": "ScalpingStrategy.analyze",
        "is_async": true,
        "lineno": 86,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[ScalpingOpportunity]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_validate_market_conditions",
          "get",
          "get",
          "len",
          "_calculate_indicators",
          "_identify_signal",
          "Decimal",
          "str",
          "_calculate_entry_price",
          "_calculate_target_price",
          "_calculate_stop_loss",
          "_analyze_volume_profile",
          "_calculate_confidence",
          "_calculate_expected_profit",
          "_assess_risk",
          "_determine_time_window",
          "ScalpingOpportunity",
          "get",
          "get",
          "now",
          "error"
        ]
      },
      {
        "name": "_validate_market_conditions",
        "qualified_name": "ScalpingStrategy._validate_market_conditions",
        "is_async": false,
        "lineno": 158,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_calculate_indicators",
        "qualified_name": "ScalpingStrategy._calculate_indicators",
        "is_async": true,
        "lineno": 182,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "prices",
          "volumes"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "calculate_ema",
          "calculate_ema",
          "_calculate_rsi",
          "_calculate_macd",
          "_calculate_bollinger_bands",
          "calculate_moving_average",
          "tuple",
          "calculate_percentage_change",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "len",
          "calculate_percentage_change",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "Decimal",
          "_identify_support_resistance",
          "_calculate_momentum"
        ]
      },
      {
        "name": "_calculate_rsi",
        "qualified_name": "ScalpingStrategy._calculate_rsi",
        "is_async": false,
        "lineno": 219,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "prices",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "range",
          "len",
          "sum",
          "sum"
        ]
      },
      {
        "name": "_calculate_macd",
        "qualified_name": "ScalpingStrategy._calculate_macd",
        "is_async": false,
        "lineno": 239,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[List[float], List[float], List[float]]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "calculate_ema",
          "calculate_ema",
          "range",
          "len",
          "calculate_ema",
          "range",
          "len"
        ]
      },
      {
        "name": "_calculate_bollinger_bands",
        "qualified_name": "ScalpingStrategy._calculate_bollinger_bands",
        "is_async": false,
        "lineno": 250,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "prices",
          "period",
          "std_dev"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[List[float], List[float], List[float]]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "range",
          "len",
          "mean",
          "std",
          "append",
          "append",
          "append"
        ]
      },
      {
        "name": "_calculate_momentum",
        "qualified_name": "ScalpingStrategy._calculate_momentum",
        "is_async": false,
        "lineno": 270,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "prices",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len"
        ]
      },
      {
        "name": "_identify_support_resistance",
        "qualified_name": "ScalpingStrategy._identify_support_resistance",
        "is_async": false,
        "lineno": 277,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[float, float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "min",
          "max",
          "percentile",
          "percentile"
        ]
      },
      {
        "name": "_analyze_volume_profile",
        "qualified_name": "ScalpingStrategy._analyze_volume_profile",
        "is_async": true,
        "lineno": 289,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "volumes",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "mean",
          "len",
          "mean",
          "mean",
          "range",
          "min",
          "len",
          "len",
          "sum",
          "range",
          "len",
          "sum",
          "range",
          "len"
        ]
      },
      {
        "name": "_identify_signal",
        "qualified_name": "ScalpingStrategy._identify_signal",
        "is_async": false,
        "lineno": 329,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "indicators",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ScalpingSignal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "append",
          "append",
          "get",
          "get",
          "len",
          "append",
          "append",
          "len",
          "append",
          "append",
          "get",
          "len",
          "append",
          "len",
          "append",
          "get",
          "get",
          "append",
          "get",
          "append",
          "get",
          "sum",
          "sum"
        ]
      },
      {
        "name": "_calculate_entry_price",
        "qualified_name": "ScalpingStrategy._calculate_entry_price",
        "is_async": false,
        "lineno": 387,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "current_price",
          "signal",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "get",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "round_to_significant_digits"
        ]
      },
      {
        "name": "_calculate_target_price",
        "qualified_name": "ScalpingStrategy._calculate_target_price",
        "is_async": false,
        "lineno": 401,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "entry_price",
          "signal",
          "indicators"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal",
          "get",
          "abs",
          "Decimal",
          "abs",
          "Decimal",
          "Decimal",
          "Decimal",
          "round_to_significant_digits"
        ]
      },
      {
        "name": "_calculate_stop_loss",
        "qualified_name": "ScalpingStrategy._calculate_stop_loss",
        "is_async": false,
        "lineno": 429,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "entry_price",
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal",
          "round_to_significant_digits"
        ]
      },
      {
        "name": "_calculate_confidence",
        "qualified_name": "ScalpingStrategy._calculate_confidence",
        "is_async": false,
        "lineno": 438,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "indicators",
          "volume_profile",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "abs",
          "get",
          "abs",
          "get",
          "min"
        ]
      },
      {
        "name": "_calculate_expected_profit",
        "qualified_name": "ScalpingStrategy._calculate_expected_profit",
        "is_async": false,
        "lineno": 471,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "entry_price",
          "target_price",
          "stop_loss",
          "confidence"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "abs",
          "abs",
          "Decimal",
          "Decimal",
          "str",
          "Decimal"
        ]
      },
      {
        "name": "_assess_risk",
        "qualified_name": "ScalpingStrategy._assess_risk",
        "is_async": false,
        "lineno": 489,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "market_data",
          "indicators",
          "volume_profile"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "min"
        ]
      },
      {
        "name": "_determine_time_window",
        "qualified_name": "ScalpingStrategy._determine_time_window",
        "is_async": false,
        "lineno": 520,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "indicators",
          "volume_profile"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "abs",
          "get",
          "get",
          "int",
          "min"
        ]
      },
      {
        "name": "execute",
        "qualified_name": "ScalpingStrategy.execute",
        "is_async": true,
        "lineno": 537,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "opportunity",
          "order_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "str",
          "_calculate_position_size",
          "str",
          "str",
          "str",
          "execute_order",
          "get",
          "now",
          "create_task",
          "_monitor_position",
          "error",
          "str"
        ]
      },
      {
        "name": "_calculate_position_size",
        "qualified_name": "ScalpingStrategy._calculate_position_size",
        "is_async": false,
        "lineno": 580,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_monitor_position",
        "qualified_name": "ScalpingStrategy._monitor_position",
        "is_async": true,
        "lineno": 586,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "order_id",
          "opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "now",
          "now",
          "_close_position",
          "sleep",
          "error"
        ]
      },
      {
        "name": "_close_position",
        "qualified_name": "ScalpingStrategy._close_position",
        "is_async": true,
        "lineno": 607,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self",
          "order_id",
          "reason"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "pop",
          "append",
          "now",
          "now",
          "_update_statistics"
        ]
      },
      {
        "name": "_update_statistics",
        "qualified_name": "ScalpingStrategy._update_statistics",
        "is_async": false,
        "lineno": 623,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sum",
          "get",
          "len",
          "get",
          "Decimal",
          "str",
          "sum",
          "len",
          "Decimal"
        ]
      },
      {
        "name": "get_statistics",
        "qualified_name": "ScalpingStrategy.get_statistics",
        "is_async": false,
        "lineno": 636,
        "scope": "class:ScalpingStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "len",
          "float",
          "float"
        ]
      }
    ],
    "found_classes": [
      "ScalpingSignal",
      "ScalpingOpportunity",
      "ScalpingStrategy"
    ],
    "class_bases": {
      "ScalpingSignal": [
        "Enum"
      ],
      "ScalpingOpportunity": [],
      "ScalpingStrategy": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "trading/strategies/ai_strategy.py": {
    "path": "trading\\strategies\\ai_strategy.py",
    "exists": true,
    "expected": [
      {
        "name": "initialize",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "analyze",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_indicators",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "price_data",
          "volume_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "validate_signal",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "signal",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "update_prediction_outcome",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "signal_id",
          "outcome"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "explain_prediction",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_feature_importance",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "AIStrategy.__init__",
        "is_async": false,
        "lineno": 33,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "__init__",
          "super",
          "StandardScaler",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "timedelta",
          "get",
          "now",
          "info"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "AIStrategy.initialize",
        "is_async": true,
        "lineno": 79,
        "scope": "class:AIStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "info",
          "EnsembleModel",
          "get",
          "PumpPredictor",
          "get",
          "RugClassifier",
          "get",
          "PatternAnalyzer",
          "get",
          "_load_models",
          "info"
        ]
      },
      {
        "name": "analyze",
        "qualified_name": "AIStrategy.analyze",
        "is_async": true,
        "lineno": 94,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[TradingSignal]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "should_analyze",
          "now",
          "_extract_features",
          "debug",
          "_check_rug_probability",
          "warning",
          "_get_ml_predictions",
          "_generate_signal_from_predictions",
          "validate_signal",
          "_record_prediction",
          "error"
        ]
      },
      {
        "name": "calculate_indicators",
        "qualified_name": "AIStrategy.calculate_indicators",
        "is_async": true,
        "lineno": 155,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "price_data",
          "volume_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "_calculate_returns",
          "_calculate_log_returns",
          "_calculate_volatility",
          "_calculate_momentum",
          "_calculate_volume_ratio",
          "_calculate_momentum",
          "_calculate_vwap",
          "_calculate_skewness",
          "_calculate_kurtosis",
          "_calculate_hurst_exponent",
          "_estimate_spread",
          "_calculate_order_imbalance",
          "_calculate_rsi",
          "_calculate_macd_signal",
          "_calculate_bb_position",
          "_detect_pattern_strength",
          "_calculate_support_distance",
          "_calculate_resistance_distance"
        ]
      },
      {
        "name": "validate_signal",
        "qualified_name": "AIStrategy.validate_signal",
        "is_async": false,
        "lineno": 207,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "signal",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "debug",
          "debug",
          "get",
          "debug",
          "get",
          "debug"
        ]
      },
      {
        "name": "_extract_features",
        "qualified_name": "AIStrategy._extract_features",
        "is_async": true,
        "lineno": 246,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[np.ndarray]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "len",
          "calculate_indicators",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "isinstance",
          "extend",
          "append",
          "append",
          "get",
          "append",
          "get",
          "reshape",
          "array",
          "len",
          "transform",
          "fit_transform",
          "error"
        ]
      },
      {
        "name": "_check_rug_probability",
        "qualified_name": "AIStrategy._check_rug_probability",
        "is_async": true,
        "lineno": 302,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "features",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "predict",
          "warning",
          "error"
        ]
      },
      {
        "name": "_get_ml_predictions",
        "qualified_name": "AIStrategy._get_ml_predictions",
        "is_async": true,
        "lineno": 338,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "features",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "predict",
          "get",
          "get",
          "_prepare_pump_features",
          "predict_pump_probability",
          "get",
          "analyze_patterns",
          "_calculate_technical_score"
        ]
      },
      {
        "name": "_generate_signal_from_predictions",
        "qualified_name": "AIStrategy._generate_signal_from_predictions",
        "is_async": true,
        "lineno": 374,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "predictions",
          "market_data",
          "rug_probability"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[TradingSignal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "_determine_signal_strength",
          "_calculate_model_agreement",
          "TradingSignal",
          "get",
          "get",
          "Decimal",
          "str",
          "get",
          "get",
          "_assess_feature_quality",
          "get",
          "now",
          "timedelta"
        ]
      },
      {
        "name": "_determine_signal_strength",
        "qualified_name": "AIStrategy._determine_signal_strength",
        "is_async": false,
        "lineno": 441,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "SignalStrength",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_model_agreement",
        "qualified_name": "AIStrategy._calculate_model_agreement",
        "is_async": false,
        "lineno": 454,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "predictions"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "append",
          "append",
          "get",
          "std",
          "min"
        ]
      },
      {
        "name": "_assess_feature_quality",
        "qualified_name": "AIStrategy._assess_feature_quality",
        "is_async": false,
        "lineno": 479,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "now",
          "timedelta",
          "get",
          "array",
          "any",
          "any",
          "isnan",
          "max"
        ]
      },
      {
        "name": "_prepare_pump_features",
        "qualified_name": "AIStrategy._prepare_pump_features",
        "is_async": false,
        "lineno": 506,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "features",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "np.ndarray",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "len",
          "mean",
          "mean",
          "append",
          "get",
          "len",
          "mean",
          "mean",
          "append",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "append",
          "get",
          "extend",
          "flatten",
          "reshape",
          "array"
        ]
      },
      {
        "name": "_calculate_technical_score",
        "qualified_name": "AIStrategy._calculate_technical_score",
        "is_async": true,
        "lineno": 545,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "features",
          "market_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "len",
          "_calculate_rsi",
          "_calculate_macd_signal",
          "len",
          "mean",
          "mean",
          "_calculate_trend",
          "_calculate_trend",
          "min",
          "max"
        ]
      },
      {
        "name": "_calculate_returns",
        "qualified_name": "AIStrategy._calculate_returns",
        "is_async": false,
        "lineno": 588,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "range",
          "len",
          "append"
        ]
      },
      {
        "name": "_calculate_log_returns",
        "qualified_name": "AIStrategy._calculate_log_returns",
        "is_async": false,
        "lineno": 601,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[float]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "range",
          "len",
          "log",
          "append"
        ]
      },
      {
        "name": "_calculate_volatility",
        "qualified_name": "AIStrategy._calculate_volatility",
        "is_async": false,
        "lineno": 614,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices",
          "window"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_calculate_returns",
          "len",
          "std",
          "sqrt"
        ]
      },
      {
        "name": "_calculate_momentum",
        "qualified_name": "AIStrategy._calculate_momentum",
        "is_async": false,
        "lineno": 622,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "data",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len"
        ]
      },
      {
        "name": "_calculate_volume_ratio",
        "qualified_name": "AIStrategy._calculate_volume_ratio",
        "is_async": false,
        "lineno": 629,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "volumes",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "mean",
          "mean"
        ]
      },
      {
        "name": "_calculate_vwap",
        "qualified_name": "AIStrategy._calculate_vwap",
        "is_async": false,
        "lineno": 639,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices",
          "volumes"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "len",
          "len",
          "sum",
          "mean",
          "sum",
          "zip"
        ]
      },
      {
        "name": "_calculate_skewness",
        "qualified_name": "AIStrategy._calculate_skewness",
        "is_async": false,
        "lineno": 651,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_calculate_returns",
          "len",
          "mean",
          "std",
          "mean"
        ]
      },
      {
        "name": "_calculate_kurtosis",
        "qualified_name": "AIStrategy._calculate_kurtosis",
        "is_async": false,
        "lineno": 666,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_calculate_returns",
          "len",
          "mean",
          "std",
          "mean"
        ]
      },
      {
        "name": "_calculate_hurst_exponent",
        "qualified_name": "AIStrategy._calculate_hurst_exponent",
        "is_async": false,
        "lineno": 681,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "range",
          "min",
          "len",
          "range",
          "len",
          "append",
          "std",
          "len",
          "log",
          "list",
          "log",
          "polyfit",
          "max",
          "min"
        ]
      },
      {
        "name": "_estimate_spread",
        "qualified_name": "AIStrategy._estimate_spread",
        "is_async": true,
        "lineno": 707,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "diff",
          "len",
          "cov",
          "sqrt",
          "mean",
          "mean"
        ]
      },
      {
        "name": "_calculate_order_imbalance",
        "qualified_name": "AIStrategy._calculate_order_imbalance",
        "is_async": true,
        "lineno": 725,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "volumes"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "sum",
          "sum"
        ]
      },
      {
        "name": "_calculate_rsi",
        "qualified_name": "AIStrategy._calculate_rsi",
        "is_async": false,
        "lineno": 741,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "range",
          "len",
          "append",
          "append",
          "append",
          "append",
          "abs",
          "mean",
          "mean"
        ]
      },
      {
        "name": "_calculate_macd_signal",
        "qualified_name": "AIStrategy._calculate_macd_signal",
        "is_async": false,
        "lineno": 769,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "calculate_ema",
          "calculate_ema"
        ]
      },
      {
        "name": "_calculate_bb_position",
        "qualified_name": "AIStrategy._calculate_bb_position",
        "is_async": false,
        "lineno": 781,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "mean",
          "std"
        ]
      },
      {
        "name": "_detect_pattern_strength",
        "qualified_name": "AIStrategy._detect_pattern_strength",
        "is_async": true,
        "lineno": 804,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "analyze_patterns",
          "get"
        ]
      },
      {
        "name": "_calculate_support_distance",
        "qualified_name": "AIStrategy._calculate_support_distance",
        "is_async": false,
        "lineno": 816,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "min"
        ]
      },
      {
        "name": "_calculate_resistance_distance",
        "qualified_name": "AIStrategy._calculate_resistance_distance",
        "is_async": false,
        "lineno": 826,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "max"
        ]
      },
      {
        "name": "_calculate_trend",
        "qualified_name": "AIStrategy._calculate_trend",
        "is_async": false,
        "lineno": 836,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "prices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "arange",
          "len",
          "polyfit",
          "mean"
        ]
      },
      {
        "name": "_record_prediction",
        "qualified_name": "AIStrategy._record_prediction",
        "is_async": true,
        "lineno": 852,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "signal",
          "predictions"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "now",
          "len"
        ]
      },
      {
        "name": "update_prediction_outcome",
        "qualified_name": "AIStrategy.update_prediction_outcome",
        "is_async": true,
        "lineno": 870,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "signal_id",
          "outcome"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_check_retrain"
        ]
      },
      {
        "name": "_check_retrain",
        "qualified_name": "AIStrategy._check_retrain",
        "is_async": true,
        "lineno": 885,
        "scope": "class:AIStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "now",
          "len",
          "info",
          "_retrain_models",
          "now"
        ]
      },
      {
        "name": "_retrain_models",
        "qualified_name": "AIStrategy._retrain_models",
        "is_async": true,
        "lineno": 903,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "training_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "append",
          "append",
          "append",
          "info",
          "len",
          "error"
        ]
      },
      {
        "name": "_load_models",
        "qualified_name": "AIStrategy._load_models",
        "is_async": true,
        "lineno": 929,
        "scope": "class:AIStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "info",
          "warning"
        ]
      },
      {
        "name": "get_feature_importance",
        "qualified_name": "AIStrategy.get_feature_importance",
        "is_async": false,
        "lineno": 941,
        "scope": "class:AIStrategy",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, float]",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "explain_prediction",
        "qualified_name": "AIStrategy.explain_prediction",
        "is_async": true,
        "lineno": 946,
        "scope": "class:AIStrategy",
        "params": [
          "self",
          "signal"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "append",
          "get",
          "append",
          "get",
          "append"
        ]
      }
    ],
    "found_classes": [
      "AIStrategy"
    ],
    "class_bases": {
      "AIStrategy": [
        "BaseStrategy"
      ]
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "trading/orders/order_manager.py": {
    "path": "trading\\orders\\order_manager.py",
    "exists": true,
    "expected": [
      {
        "name": "create_order",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "execute_order",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "cancel_order",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "execute_immediate",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "execute_twap",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order",
          "duration",
          "slices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "execute_sniper",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "order",
          "trigger_price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_open_orders",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "build_order",
        "qualified_name": "Order.build_order",
        "is_async": false,
        "lineno": 96,
        "scope": "class:Order",
        "params": [
          "token_address",
          "side",
          "amount",
          "order_type"
        ],
        "has_varargs": false,
        "has_varkw": true,
        "returns": "Order",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Order",
          "str",
          "uuid4",
          "get",
          "get",
          "utcnow",
          "utcnow",
          "get",
          "get",
          "get",
          "Decimal",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "OrderManager.__init__",
        "is_async": false,
        "lineno": 173,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_default_config",
          "set",
          "defaultdict",
          "Decimal",
          "_initialize_components"
        ]
      },
      {
        "name": "_default_config",
        "qualified_name": "OrderManager._default_config",
        "is_async": false,
        "lineno": 195,
        "scope": "class:OrderManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_initialize_components",
        "qualified_name": "OrderManager._initialize_components",
        "is_async": false,
        "lineno": 234,
        "scope": "class:OrderManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "ExecutionEngine",
          "OrderRiskMonitor",
          "SettlementProcessor",
          "create_task",
          "_monitor_orders",
          "create_task",
          "_cleanup_expired_orders"
        ]
      },
      {
        "name": "create_order",
        "qualified_name": "OrderManager.create_order",
        "is_async": true,
        "lineno": 255,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "add",
          "info"
        ]
      },
      {
        "name": "execute_order",
        "qualified_name": "OrderManager.execute_order",
        "is_async": true,
        "lineno": 280,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "submit_order",
          "get",
          "error"
        ]
      },
      {
        "name": "create_order_from_params",
        "qualified_name": "OrderManager.create_order_from_params",
        "is_async": true,
        "lineno": 297,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "token_address",
          "side",
          "amount",
          "order_type",
          "price",
          "execution_strategy"
        ],
        "has_varargs": false,
        "has_varkw": true,
        "returns": "Order",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_validate_order_params",
          "check_order_risk",
          "ValueError",
          "Order",
          "str",
          "uuid4",
          "get",
          "utcnow",
          "utcnow",
          "get",
          "Decimal",
          "str",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "add",
          "info",
          "error"
        ]
      },
      {
        "name": "submit_order",
        "qualified_name": "OrderManager.submit_order",
        "is_async": true,
        "lineno": 374,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "ValueError",
          "ValueError",
          "_update_order_book",
          "_execute_immediate",
          "_execute_twap",
          "_execute_vwap",
          "_execute_iceberg",
          "_execute_sniper",
          "ValueError",
          "get",
          "utcnow",
          "create_task",
          "_monitor_order_confirmation",
          "get",
          "error",
          "str"
        ]
      },
      {
        "name": "cancel_order",
        "qualified_name": "OrderManager.cancel_order",
        "is_async": true,
        "lineno": 428,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "cancel_transaction",
          "Decimal",
          "warning",
          "utcnow",
          "discard",
          "cancel_order",
          "info",
          "error"
        ]
      },
      {
        "name": "modify_order",
        "qualified_name": "OrderManager.modify_order",
        "is_async": true,
        "lineno": 474,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order_id",
          "modifications"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "warning",
          "items",
          "setattr",
          "utcnow",
          "info",
          "error"
        ]
      },
      {
        "name": "get_order_status",
        "qualified_name": "OrderManager.get_order_status",
        "is_async": true,
        "lineno": 517,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "str",
          "str",
          "str",
          "str",
          "isoformat",
          "isoformat",
          "str",
          "str",
          "isoformat",
          "get"
        ]
      },
      {
        "name": "_validate_order_params",
        "qualified_name": "OrderManager._validate_order_params",
        "is_async": true,
        "lineno": 553,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "token_address",
          "side",
          "amount",
          "order_type",
          "price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "ValueError",
          "ValueError",
          "float",
          "ValueError",
          "ValueError",
          "len",
          "ValueError",
          "sum",
          "values",
          "ValueError"
        ]
      },
      {
        "name": "_execute_immediate",
        "qualified_name": "OrderManager._execute_immediate",
        "is_async": true,
        "lineno": 592,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_prepare_transaction",
          "get",
          "submit_flashbots_bundle",
          "submit_transaction",
          "error",
          "str"
        ]
      },
      {
        "name": "_execute_twap",
        "qualified_name": "OrderManager._execute_twap",
        "is_async": true,
        "lineno": 613,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "total_seconds",
          "utcnow",
          "range",
          "create_order",
          "append",
          "append",
          "create_task",
          "_execute_twap_intervals",
          "len",
          "error",
          "str"
        ]
      },
      {
        "name": "_execute_twap_intervals",
        "qualified_name": "OrderManager._execute_twap_intervals",
        "is_async": true,
        "lineno": 650,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "child_orders",
          "interval_duration"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "submit_order",
          "sleep",
          "error"
        ]
      },
      {
        "name": "_execute_vwap",
        "qualified_name": "OrderManager._execute_vwap",
        "is_async": true,
        "lineno": 663,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_volume_profile",
          "Decimal",
          "str",
          "create_order",
          "Decimal",
          "str",
          "append",
          "append",
          "create_task",
          "submit_order",
          "len",
          "error",
          "str"
        ]
      },
      {
        "name": "_execute_iceberg",
        "qualified_name": "OrderManager._execute_iceberg",
        "is_async": true,
        "lineno": 705,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "create_order",
          "append",
          "submit_order",
          "create_task",
          "_monitor_iceberg_refill",
          "error",
          "str"
        ]
      },
      {
        "name": "_execute_sniper",
        "qualified_name": "OrderManager._execute_sniper",
        "is_async": true,
        "lineno": 740,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_prepare_transaction",
          "str",
          "Decimal",
          "submit_private_transaction",
          "submit_flashbots_bundle",
          "error",
          "str"
        ]
      },
      {
        "name": "_prepare_transaction",
        "qualified_name": "OrderManager._prepare_transaction",
        "is_async": true,
        "lineno": 769,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_market_data",
          "str",
          "str",
          "str",
          "int",
          "timestamp"
        ]
      },
      {
        "name": "_monitor_order_confirmation",
        "qualified_name": "OrderManager._monitor_order_confirmation",
        "is_async": true,
        "lineno": 797,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "utcnow",
          "total_seconds",
          "utcnow",
          "get_transaction_status",
          "_process_order_fill",
          "get",
          "get",
          "sleep",
          "warning",
          "discard",
          "error"
        ]
      },
      {
        "name": "_process_order_fill",
        "qualified_name": "OrderManager._process_order_fill",
        "is_async": true,
        "lineno": 837,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order",
          "tx_status"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "get",
          "Fill",
          "str",
          "uuid4",
          "utcnow",
          "append",
          "get",
          "sum",
          "Decimal",
          "str",
          "_trigger_follow_up_orders",
          "utcnow",
          "float",
          "abs",
          "_update_slippage_metric",
          "info",
          "error"
        ]
      },
      {
        "name": "_trigger_follow_up_orders",
        "qualified_name": "OrderManager._trigger_follow_up_orders",
        "is_async": true,
        "lineno": 900,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "enumerate",
          "len",
          "create_order",
          "create_task",
          "submit_order",
          "create_order",
          "create_task",
          "_monitor_stop_order",
          "create_task",
          "_monitor_trailing_stop",
          "error"
        ]
      },
      {
        "name": "_monitor_stop_order",
        "qualified_name": "OrderManager._monitor_stop_order",
        "is_async": true,
        "lineno": 943,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "stop_order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_market_data",
          "Decimal",
          "str",
          "submit_order",
          "sleep",
          "error"
        ]
      },
      {
        "name": "_monitor_trailing_stop",
        "qualified_name": "OrderManager._monitor_trailing_stop",
        "is_async": true,
        "lineno": 969,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "_get_market_data",
          "Decimal",
          "str",
          "Decimal",
          "info",
          "Decimal",
          "info",
          "_execute_stop_loss",
          "sleep",
          "error"
        ]
      },
      {
        "name": "_execute_stop_loss",
        "qualified_name": "OrderManager._execute_stop_loss",
        "is_async": true,
        "lineno": 1014,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "create_order",
          "submit_order",
          "error"
        ]
      },
      {
        "name": "_update_order_book",
        "qualified_name": "OrderManager._update_order_book",
        "is_async": true,
        "lineno": 1032,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_order_book",
          "OrderBook",
          "utcnow",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "get",
          "get",
          "Decimal",
          "str",
          "get",
          "error"
        ]
      },
      {
        "name": "_get_market_data",
        "qualified_name": "OrderManager._get_market_data",
        "is_async": true,
        "lineno": 1052,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "float",
          "float",
          "float",
          "_update_order_book",
          "_get_market_data"
        ]
      },
      {
        "name": "_get_volume_profile",
        "qualified_name": "OrderManager._get_volume_profile",
        "is_async": true,
        "lineno": 1068,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "range",
          "append"
        ]
      },
      {
        "name": "_monitor_iceberg_refill",
        "qualified_name": "OrderManager._monitor_iceberg_refill",
        "is_async": true,
        "lineno": 1081,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "parent_order",
          "visible_order",
          "hidden_amount"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_order_status",
          "min",
          "Decimal",
          "str",
          "create_order",
          "append",
          "submit_order",
          "sleep",
          "error"
        ]
      },
      {
        "name": "_update_slippage_metric",
        "qualified_name": "OrderManager._update_slippage_metric",
        "is_async": false,
        "lineno": 1124,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "slippage"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_monitor_orders",
        "qualified_name": "OrderManager._monitor_orders",
        "is_async": true,
        "lineno": 1134,
        "scope": "class:OrderManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "list",
          "get",
          "utcnow",
          "discard",
          "info",
          "get_transaction_status",
          "get",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_cleanup_expired_orders",
        "qualified_name": "OrderManager._cleanup_expired_orders",
        "is_async": true,
        "lineno": 1163,
        "scope": "class:OrderManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sleep",
          "utcnow",
          "list",
          "keys",
          "total_seconds",
          "append",
          "discard",
          "info",
          "error"
        ]
      },
      {
        "name": "get_metrics",
        "qualified_name": "OrderManager.get_metrics",
        "is_async": false,
        "lineno": 1190,
        "scope": "class:OrderManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "len",
          "len"
        ]
      },
      {
        "name": "get_active_orders",
        "qualified_name": "OrderManager.get_active_orders",
        "is_async": false,
        "lineno": 1199,
        "scope": "class:OrderManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "append",
          "str",
          "isoformat"
        ]
      },
      {
        "name": "execute_immediate",
        "qualified_name": "OrderManager.execute_immediate",
        "is_async": true,
        "lineno": 1218,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_execute_immediate"
        ]
      },
      {
        "name": "execute_twap",
        "qualified_name": "OrderManager.execute_twap",
        "is_async": true,
        "lineno": 1230,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order",
          "duration",
          "slices"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "_execute_twap"
        ]
      },
      {
        "name": "execute_sniper",
        "qualified_name": "OrderManager.execute_sniper",
        "is_async": true,
        "lineno": 1257,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order",
          "trigger_price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "str",
          "create_task",
          "_monitor_sniper_trigger",
          "str"
        ]
      },
      {
        "name": "_monitor_sniper_trigger",
        "qualified_name": "OrderManager._monitor_sniper_trigger",
        "is_async": true,
        "lineno": 1280,
        "scope": "class:OrderManager",
        "params": [
          "self",
          "order",
          "trigger_price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_market_data",
          "Decimal",
          "str",
          "_execute_sniper",
          "info",
          "sleep",
          "error"
        ]
      },
      {
        "name": "get_open_orders",
        "qualified_name": "OrderManager.get_open_orders",
        "is_async": true,
        "lineno": 1306,
        "scope": "class:OrderManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Order]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "append"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "ExecutionEngine.__init__",
        "is_async": false,
        "lineno": 1326,
        "scope": "class:ExecutionEngine",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "submit_transaction",
        "qualified_name": "ExecutionEngine.submit_transaction",
        "is_async": true,
        "lineno": 1329,
        "scope": "class:ExecutionEngine",
        "params": [
          "self",
          "tx_params"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "submit_flashbots_bundle",
        "qualified_name": "ExecutionEngine.submit_flashbots_bundle",
        "is_async": true,
        "lineno": 1334,
        "scope": "class:ExecutionEngine",
        "params": [
          "self",
          "tx_params",
          "gas_price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "submit_private_transaction",
        "qualified_name": "ExecutionEngine.submit_private_transaction",
        "is_async": true,
        "lineno": 1339,
        "scope": "class:ExecutionEngine",
        "params": [
          "self",
          "tx_params",
          "gas_price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "cancel_transaction",
        "qualified_name": "ExecutionEngine.cancel_transaction",
        "is_async": true,
        "lineno": 1344,
        "scope": "class:ExecutionEngine",
        "params": [
          "self",
          "tx_hash",
          "gas_price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "get_transaction_status",
        "qualified_name": "ExecutionEngine.get_transaction_status",
        "is_async": true,
        "lineno": 1349,
        "scope": "class:ExecutionEngine",
        "params": [
          "self",
          "tx_hash"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "get_order_book",
        "qualified_name": "ExecutionEngine.get_order_book",
        "is_async": true,
        "lineno": 1354,
        "scope": "class:ExecutionEngine",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "__init__",
        "qualified_name": "OrderRiskMonitor.__init__",
        "is_async": false,
        "lineno": 1363,
        "scope": "class:OrderRiskMonitor",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "check_order_risk",
        "qualified_name": "OrderRiskMonitor.check_order_risk",
        "is_async": true,
        "lineno": 1366,
        "scope": "class:OrderRiskMonitor",
        "params": [
          "self",
          "token_address",
          "side",
          "amount",
          "existing_orders"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "__init__",
        "qualified_name": "SettlementProcessor.__init__",
        "is_async": false,
        "lineno": 1381,
        "scope": "class:SettlementProcessor",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "process_settlement",
        "qualified_name": "SettlementProcessor.process_settlement",
        "is_async": true,
        "lineno": 1384,
        "scope": "class:SettlementProcessor",
        "params": [
          "self",
          "order",
          "fill"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": []
      }
    ],
    "found_classes": [
      "OrderStatus",
      "OrderType",
      "OrderSide",
      "ExecutionStrategy",
      "Order",
      "OrderBook",
      "Fill",
      "OrderManager",
      "ExecutionEngine",
      "OrderRiskMonitor",
      "SettlementProcessor"
    ],
    "class_bases": {
      "OrderStatus": [
        "Enum"
      ],
      "OrderType": [
        "Enum"
      ],
      "OrderSide": [
        "Enum"
      ],
      "ExecutionStrategy": [
        "Enum"
      ],
      "Order": [],
      "OrderBook": [],
      "Fill": [],
      "OrderManager": [],
      "ExecutionEngine": [],
      "OrderRiskMonitor": [],
      "SettlementProcessor": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "trading/orders/position_tracker.py": {
    "path": "trading\\orders\\position_tracker.py",
    "exists": true,
    "expected": [
      {
        "name": "open_position",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "close_position",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "position_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "update_position",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "position_id",
          "updates"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_active_positions",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_pnl",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "position_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_stop_loss",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "position_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "build_position",
        "qualified_name": "Position.build_position",
        "is_async": false,
        "lineno": 103,
        "scope": "class:Position",
        "params": [
          "token_address",
          "token_symbol",
          "position_type",
          "entry_price",
          "entry_amount"
        ],
        "has_varargs": false,
        "has_varkw": true,
        "returns": "Position",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Position",
          "strftime",
          "utcnow",
          "utcnow",
          "get",
          "Decimal",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "PositionTracker.__init__",
        "is_async": false,
        "lineno": 197,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_default_config",
          "deque",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "_initialize_performance_metrics",
          "create_task",
          "_monitor_positions",
          "create_task",
          "_calculate_portfolio_metrics"
        ]
      },
      {
        "name": "_default_config",
        "qualified_name": "PositionTracker._default_config",
        "is_async": false,
        "lineno": 228,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_initialize_performance_metrics",
        "qualified_name": "PositionTracker._initialize_performance_metrics",
        "is_async": false,
        "lineno": 259,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "PerformanceMetrics",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "PerformanceMetrics",
          "Decimal",
          "Decimal",
          "Decimal",
          "timedelta",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "open_position",
        "qualified_name": "PositionTracker.open_position",
        "is_async": true,
        "lineno": 292,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_check_position_limits",
          "ValueError",
          "_calculate_position_risk",
          "_determine_risk_level",
          "_update_portfolio_value",
          "info"
        ]
      },
      {
        "name": "open_position_from_params",
        "qualified_name": "PositionTracker.open_position_from_params",
        "is_async": true,
        "lineno": 325,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "token_address",
          "token_symbol",
          "position_type",
          "entry_price",
          "entry_amount",
          "order_ids"
        ],
        "has_varargs": false,
        "has_varkw": true,
        "returns": "Position",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_check_position_limits",
          "ValueError",
          "float",
          "ValueError",
          "Position",
          "strftime",
          "utcnow",
          "utcnow",
          "Decimal",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "Decimal",
          "Decimal",
          "str",
          "Decimal",
          "Decimal",
          "str",
          "_calculate_position_risk",
          "_determine_risk_level",
          "_update_portfolio_value",
          "info",
          "error"
        ]
      },
      {
        "name": "update_position",
        "qualified_name": "PositionTracker.update_position",
        "is_async": true,
        "lineno": 432,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "position_id",
          "updates"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "pop",
          "update_position_with_price",
          "Decimal",
          "str",
          "items",
          "hasattr",
          "setattr",
          "error"
        ]
      },
      {
        "name": "update_position_with_price",
        "qualified_name": "PositionTracker.update_position_with_price",
        "is_async": true,
        "lineno": 472,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "position_id",
          "current_price"
        ],
        "has_varargs": false,
        "has_varkw": true,
        "returns": "Optional[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "float",
          "float",
          "max",
          "items",
          "hasattr",
          "setattr",
          "_check_position_rules",
          "_calculate_position_risk",
          "_determine_risk_level",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "close_position",
        "qualified_name": "PositionTracker.close_position",
        "is_async": true,
        "lineno": 549,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "position_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "close_position_with_details",
          "str",
          "str"
        ]
      },
      {
        "name": "close_position_with_details",
        "qualified_name": "PositionTracker.close_position_with_details",
        "is_async": true,
        "lineno": 587,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "position_id",
          "exit_price",
          "exit_amount",
          "order_ids",
          "reason"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Position]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "utcnow",
          "extend",
          "float",
          "append",
          "_update_performance_metrics",
          "info",
          "info",
          "append",
          "utcnow",
          "_update_portfolio_value",
          "error"
        ]
      },
      {
        "name": "_check_position_limits",
        "qualified_name": "PositionTracker._check_position_limits",
        "is_async": true,
        "lineno": 690,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "token_address",
          "amount"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "warning",
          "values",
          "warning",
          "values",
          "_calculate_correlation",
          "warning",
          "_calculate_portfolio_risk",
          "warning",
          "error"
        ]
      },
      {
        "name": "_check_position_rules",
        "qualified_name": "PositionTracker._check_position_rules",
        "is_async": true,
        "lineno": 737,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "enumerate",
          "len",
          "len",
          "Decimal",
          "Decimal",
          "str",
          "get",
          "timedelta",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "_calculate_position_risk",
        "qualified_name": "PositionTracker._calculate_position_risk",
        "is_async": true,
        "lineno": 818,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "min",
          "min",
          "min",
          "min",
          "abs",
          "min",
          "min",
          "error"
        ]
      },
      {
        "name": "_determine_risk_level",
        "qualified_name": "PositionTracker._determine_risk_level",
        "is_async": false,
        "lineno": 851,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "risk_score"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "RiskLevel",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_correlation",
        "qualified_name": "PositionTracker._calculate_correlation",
        "is_async": true,
        "lineno": 862,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "token1",
          "token2"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_portfolio_risk",
        "qualified_name": "PositionTracker._calculate_portfolio_risk",
        "is_async": true,
        "lineno": 875,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "values",
          "sum",
          "max",
          "float",
          "mean",
          "all",
          "values",
          "values",
          "min",
          "error"
        ]
      },
      {
        "name": "_update_portfolio_value",
        "qualified_name": "PositionTracker._update_portfolio_value",
        "is_async": true,
        "lineno": 907,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sum",
          "values",
          "sum",
          "values",
          "PortfolioSnapshot",
          "utcnow",
          "len",
          "len",
          "len",
          "sum",
          "_calculate_portfolio_risk",
          "append",
          "error"
        ]
      },
      {
        "name": "_update_performance_metrics",
        "qualified_name": "PositionTracker._update_performance_metrics",
        "is_async": true,
        "lineno": 945,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "closed_position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "max",
          "max",
          "abs",
          "sum",
          "len",
          "Decimal",
          "sum",
          "len",
          "Decimal",
          "sum",
          "Decimal",
          "sum",
          "Decimal",
          "float",
          "sum",
          "timedelta",
          "len",
          "sum",
          "sum",
          "Decimal",
          "float",
          "len",
          "float",
          "mean",
          "len",
          "stdev",
          "float",
          "max",
          "error"
        ]
      },
      {
        "name": "_monitor_positions",
        "qualified_name": "PositionTracker._monitor_positions",
        "is_async": true,
        "lineno": 1066,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "list",
          "items",
          "_get_current_price",
          "update_position",
          "_execute_position_actions",
          "_update_portfolio_value",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_calculate_portfolio_metrics",
        "qualified_name": "PositionTracker._calculate_portfolio_metrics",
        "is_async": true,
        "lineno": 1097,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sleep",
          "_calculate_value_at_risk",
          "_calculate_portfolio_beta",
          "_calculate_portfolio_volatility",
          "_update_correlation_matrix",
          "_check_portfolio_alerts",
          "error"
        ]
      },
      {
        "name": "_get_current_price",
        "qualified_name": "PositionTracker._get_current_price",
        "is_async": true,
        "lineno": 1124,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Decimal]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "total_seconds",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "_execute_position_actions",
        "qualified_name": "PositionTracker._execute_position_actions",
        "is_async": true,
        "lineno": 1141,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "position",
          "actions"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "close_position",
          "get",
          "close_position",
          "get",
          "get",
          "info",
          "warning",
          "info",
          "error"
        ]
      },
      {
        "name": "_calculate_value_at_risk",
        "qualified_name": "PositionTracker._calculate_value_at_risk",
        "is_async": true,
        "lineno": 1185,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "range",
          "len",
          "float",
          "append",
          "sorted",
          "int",
          "len",
          "Decimal",
          "str",
          "abs",
          "Decimal",
          "str",
          "abs",
          "mean",
          "error"
        ]
      },
      {
        "name": "_calculate_portfolio_beta",
        "qualified_name": "PositionTracker._calculate_portfolio_beta",
        "is_async": true,
        "lineno": 1216,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_calculate_portfolio_volatility",
        "qualified_name": "PositionTracker._calculate_portfolio_volatility",
        "is_async": true,
        "lineno": 1225,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "range",
          "min",
          "len",
          "float",
          "float",
          "append",
          "len",
          "stdev",
          "error"
        ]
      },
      {
        "name": "_update_correlation_matrix",
        "qualified_name": "PositionTracker._update_correlation_matrix",
        "is_async": true,
        "lineno": 1248,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "list",
          "values",
          "enumerate",
          "enumerate",
          "_calculate_correlation",
          "max",
          "max",
          "error"
        ]
      },
      {
        "name": "_check_portfolio_alerts",
        "qualified_name": "PositionTracker._check_portfolio_alerts",
        "is_async": true,
        "lineno": 1272,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "warning",
          "_calculate_portfolio_risk",
          "warning",
          "max",
          "values",
          "warning",
          "error"
        ]
      },
      {
        "name": "get_open_positions",
        "qualified_name": "PositionTracker.get_open_positions",
        "is_async": false,
        "lineno": 1296,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "str",
          "str",
          "str",
          "str",
          "utcnow",
          "values"
        ]
      },
      {
        "name": "get_portfolio_summary",
        "qualified_name": "PositionTracker.get_portfolio_summary",
        "is_async": false,
        "lineno": 1313,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "str",
          "str",
          "str",
          "len",
          "str",
          "str"
        ]
      },
      {
        "name": "get_performance_report",
        "qualified_name": "PositionTracker.get_performance_report",
        "is_async": false,
        "lineno": 1330,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "str",
          "str",
          "str",
          "str",
          "str",
          "str",
          "str",
          "str"
        ]
      },
      {
        "name": "get_active_positions",
        "qualified_name": "PositionTracker.get_active_positions",
        "is_async": true,
        "lineno": 1365,
        "scope": "class:PositionTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_open_positions"
        ]
      },
      {
        "name": "calculate_pnl",
        "qualified_name": "PositionTracker.calculate_pnl",
        "is_async": true,
        "lineno": 1375,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "position_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "str",
          "str",
          "str",
          "str"
        ]
      },
      {
        "name": "check_stop_loss",
        "qualified_name": "PositionTracker.check_stop_loss",
        "is_async": true,
        "lineno": 1400,
        "scope": "class:PositionTracker",
        "params": [
          "self",
          "position_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get"
        ]
      }
    ],
    "found_classes": [
      "PositionStatus",
      "PositionType",
      "RiskLevel",
      "Position",
      "PortfolioSnapshot",
      "PerformanceMetrics",
      "PositionTracker"
    ],
    "class_bases": {
      "PositionStatus": [
        "Enum"
      ],
      "PositionType": [
        "Enum"
      ],
      "RiskLevel": [
        "Enum"
      ],
      "Position": [],
      "PortfolioSnapshot": [],
      "PerformanceMetrics": [],
      "PositionTracker": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "monitoring/alerts.py": {
    "path": "monitoring\\alerts.py",
    "exists": true,
    "expected": [
      {
        "name": "send_alert",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "alert_type",
          "message",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "send_telegram",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "send_discord",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "send_email",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "subject",
          "body"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "format_alert",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "alert_type",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "AlertsSystem.__init__",
        "is_async": false,
        "lineno": 126,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_default_config",
          "Queue",
          "deque",
          "defaultdict",
          "defaultdict",
          "deque",
          "defaultdict",
          "get",
          "defaultdict",
          "defaultdict",
          "defaultdict",
          "_initialize_channels",
          "create_task",
          "_process_alerts",
          "create_task",
          "_aggregate_alerts"
        ]
      },
      {
        "name": "_default_config",
        "qualified_name": "AlertsSystem._default_config",
        "is_async": false,
        "lineno": 159,
        "scope": "class:AlertsSystem",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_initialize_channels",
        "qualified_name": "AlertsSystem._initialize_channels",
        "is_async": false,
        "lineno": 222,
        "scope": "class:AlertsSystem",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "ChannelConfig",
          "get",
          "ChannelConfig",
          "get",
          "ChannelConfig",
          "get",
          "ChannelConfig",
          "get",
          "ChannelConfig"
        ]
      },
      {
        "name": "send_alert",
        "qualified_name": "AlertsSystem.send_alert",
        "is_async": true,
        "lineno": 274,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert_type",
          "message",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "upper",
          "lower",
          "lower",
          "lower",
          "len",
          "send_alert_internal"
        ]
      },
      {
        "name": "send_alert_internal",
        "qualified_name": "AlertsSystem.send_alert_internal",
        "is_async": true,
        "lineno": 308,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert_type",
          "title",
          "message",
          "priority",
          "data",
          "channels"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Alert",
          "_generate_alert_id",
          "utcnow",
          "_get_channels_for_priority",
          "_should_send_alert",
          "debug",
          "put",
          "_notify_subscribers",
          "error"
        ]
      },
      {
        "name": "send_trading_alert",
        "qualified_name": "AlertsSystem.send_trading_alert",
        "is_async": true,
        "lineno": 366,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "event_type",
          "position"
        ],
        "has_varargs": false,
        "has_varkw": true,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "_get_emoji",
          "_format_position_opened",
          "_format_position_closed",
          "get",
          "_format_stop_loss",
          "get",
          "_format_take_profit",
          "get",
          "dumps",
          "send_alert",
          "error"
        ]
      },
      {
        "name": "send_opportunity_alert",
        "qualified_name": "AlertsSystem.send_opportunity_alert",
        "is_async": true,
        "lineno": 420,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "opportunity_type",
          "data",
          "confidence"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_format_arbitrage_opportunity",
          "_format_whale_movement",
          "_format_volume_surge",
          "_format_signal",
          "dumps",
          "send_alert",
          "error"
        ]
      },
      {
        "name": "send_risk_alert",
        "qualified_name": "AlertsSystem.send_risk_alert",
        "is_async": true,
        "lineno": 470,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "risk_type",
          "severity",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "_format_drawdown_alert",
          "_format_correlation_warning",
          "_format_risk_warning",
          "_format_margin_call",
          "dumps",
          "send_alert",
          "error"
        ]
      },
      {
        "name": "send_performance_summary",
        "qualified_name": "AlertsSystem.send_performance_summary",
        "is_async": true,
        "lineno": 522,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "period",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_format_daily_summary",
          "_format_weekly_report",
          "title",
          "_format_performance_metrics",
          "send_alert",
          "error"
        ]
      },
      {
        "name": "_process_alerts",
        "qualified_name": "AlertsSystem._process_alerts",
        "is_async": true,
        "lineno": 557,
        "scope": "class:AlertsSystem",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "append",
          "_send_alert_to_channels",
          "append",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_aggregate_alerts",
        "qualified_name": "AlertsSystem._aggregate_alerts",
        "is_async": true,
        "lineno": 580,
        "scope": "class:AlertsSystem",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sleep",
          "list",
          "items",
          "len",
          "_format_aggregated_alerts",
          "Alert",
          "_generate_alert_id",
          "utcnow",
          "len",
          "_send_alert_to_channels",
          "error"
        ]
      },
      {
        "name": "_send_alert_to_channels",
        "qualified_name": "AlertsSystem._send_alert_to_channels",
        "is_async": true,
        "lineno": 622,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_check_rate_limit",
          "warning",
          "_send_to_channel",
          "utcnow",
          "sleep",
          "put",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "_send_to_channel",
        "qualified_name": "AlertsSystem._send_to_channel",
        "is_async": true,
        "lineno": 669,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert",
          "channel"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_send_telegram",
          "_send_discord",
          "_send_email",
          "_send_webhook",
          "_send_sms",
          "_send_slack",
          "_send_pushover",
          "error"
        ]
      },
      {
        "name": "send_telegram",
        "qualified_name": "AlertsSystem.send_telegram",
        "is_async": true,
        "lineno": 700,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Alert",
          "_generate_alert_id",
          "utcnow",
          "_send_telegram"
        ]
      },
      {
        "name": "send_discord",
        "qualified_name": "AlertsSystem.send_discord",
        "is_async": true,
        "lineno": 721,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Alert",
          "_generate_alert_id",
          "utcnow",
          "_send_discord"
        ]
      },
      {
        "name": "send_email",
        "qualified_name": "AlertsSystem.send_email",
        "is_async": true,
        "lineno": 742,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "subject",
          "body"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Alert",
          "_generate_alert_id",
          "utcnow",
          "_send_email"
        ]
      },
      {
        "name": "format_alert",
        "qualified_name": "AlertsSystem.format_alert",
        "is_async": false,
        "lineno": 764,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert_type",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_format_position_opened",
          "_format_position_closed",
          "get",
          "_format_stop_loss",
          "get",
          "_format_take_profit",
          "get",
          "_format_arbitrage_opportunity",
          "_format_whale_movement",
          "_format_volume_surge",
          "_format_signal",
          "get",
          "_format_drawdown_alert",
          "_format_risk_warning",
          "_format_daily_summary",
          "items",
          "append",
          "join"
        ]
      },
      {
        "name": "_send_telegram",
        "qualified_name": "AlertsSystem._send_telegram",
        "is_async": true,
        "lineno": 806,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "strftime",
          "ClientSession",
          "post",
          "error"
        ]
      },
      {
        "name": "_send_discord",
        "qualified_name": "AlertsSystem._send_discord",
        "is_async": true,
        "lineno": 839,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "_get_color_for_priority",
          "isoformat",
          "list",
          "items",
          "append",
          "title",
          "replace",
          "str",
          "ClientSession",
          "post",
          "error"
        ]
      },
      {
        "name": "_send_email",
        "qualified_name": "AlertsSystem._send_email",
        "is_async": true,
        "lineno": 878,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_send_webhook",
        "qualified_name": "AlertsSystem._send_webhook",
        "is_async": true,
        "lineno": 883,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "isoformat",
          "hexdigest",
          "new",
          "encode",
          "encode",
          "dumps",
          "ClientSession",
          "post",
          "error"
        ]
      },
      {
        "name": "_send_sms",
        "qualified_name": "AlertsSystem._send_sms",
        "is_async": true,
        "lineno": 922,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_send_slack",
        "qualified_name": "AlertsSystem._send_slack",
        "is_async": true,
        "lineno": 927,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_send_pushover",
        "qualified_name": "AlertsSystem._send_pushover",
        "is_async": true,
        "lineno": 932,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_emoji",
        "qualified_name": "AlertsSystem._get_emoji",
        "is_async": false,
        "lineno": 937,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "_get_color_for_priority",
        "qualified_name": "AlertsSystem._get_color_for_priority",
        "is_async": false,
        "lineno": 962,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "priority"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "_get_channels_for_priority",
        "qualified_name": "AlertsSystem._get_channels_for_priority",
        "is_async": false,
        "lineno": 972,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "priority"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[NotificationChannel]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "_should_send_alert",
        "qualified_name": "AlertsSystem._should_send_alert",
        "is_async": false,
        "lineno": 979,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "reversed",
          "total_seconds"
        ]
      },
      {
        "name": "_check_rate_limit",
        "qualified_name": "AlertsSystem._check_rate_limit",
        "is_async": false,
        "lineno": 995,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "channel"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "utcnow",
          "total_seconds",
          "popleft",
          "len",
          "append"
        ]
      },
      {
        "name": "_generate_alert_id",
        "qualified_name": "AlertsSystem._generate_alert_id",
        "is_async": false,
        "lineno": 1018,
        "scope": "class:AlertsSystem",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "strftime",
          "utcnow"
        ]
      },
      {
        "name": "_format_position_opened",
        "qualified_name": "AlertsSystem._format_position_opened",
        "is_async": false,
        "lineno": 1023,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_format_position_closed",
        "qualified_name": "AlertsSystem._format_position_closed",
        "is_async": false,
        "lineno": 1036,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "position",
          "pnl"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_format_stop_loss",
        "qualified_name": "AlertsSystem._format_stop_loss",
        "is_async": false,
        "lineno": 1050,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "position",
          "loss"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "abs"
        ]
      },
      {
        "name": "_format_take_profit",
        "qualified_name": "AlertsSystem._format_take_profit",
        "is_async": false,
        "lineno": 1061,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "position",
          "profit"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_format_arbitrage_opportunity",
        "qualified_name": "AlertsSystem._format_arbitrage_opportunity",
        "is_async": false,
        "lineno": 1072,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_format_whale_movement",
        "qualified_name": "AlertsSystem._format_whale_movement",
        "is_async": false,
        "lineno": 1085,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_format_volume_surge",
        "qualified_name": "AlertsSystem._format_volume_surge",
        "is_async": false,
        "lineno": 1098,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_format_signal",
        "qualified_name": "AlertsSystem._format_signal",
        "is_async": false,
        "lineno": 1110,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "data",
          "confidence"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_format_drawdown_alert",
        "qualified_name": "AlertsSystem._format_drawdown_alert",
        "is_async": false,
        "lineno": 1124,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_format_correlation_warning",
        "qualified_name": "AlertsSystem._format_correlation_warning",
        "is_async": false,
        "lineno": 1136,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_format_risk_warning",
        "qualified_name": "AlertsSystem._format_risk_warning",
        "is_async": false,
        "lineno": 1147,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_format_margin_call",
        "qualified_name": "AlertsSystem._format_margin_call",
        "is_async": false,
        "lineno": 1159,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_format_daily_summary",
        "qualified_name": "AlertsSystem._format_daily_summary",
        "is_async": false,
        "lineno": 1173,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "strftime",
          "utcnow",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "_format_weekly_report",
        "qualified_name": "AlertsSystem._format_weekly_report",
        "is_async": false,
        "lineno": 1192,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "strftime",
          "utcnow",
          "timedelta",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "join",
          "get"
        ]
      },
      {
        "name": "_format_performance_metrics",
        "qualified_name": "AlertsSystem._format_performance_metrics",
        "is_async": false,
        "lineno": 1216,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "title",
          "replace",
          "isinstance",
          "append",
          "append",
          "append",
          "append",
          "join"
        ]
      },
      {
        "name": "_format_aggregated_alerts",
        "qualified_name": "AlertsSystem._format_aggregated_alerts",
        "is_async": false,
        "lineno": 1232,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alerts"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "defaultdict",
          "append",
          "len",
          "items",
          "append",
          "len",
          "append",
          "join"
        ]
      },
      {
        "name": "_notify_subscribers",
        "qualified_name": "AlertsSystem._notify_subscribers",
        "is_async": true,
        "lineno": 1251,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "callback",
          "error"
        ]
      },
      {
        "name": "subscribe_to_alerts",
        "qualified_name": "AlertsSystem.subscribe_to_alerts",
        "is_async": false,
        "lineno": 1260,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "alert_type",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append"
        ]
      },
      {
        "name": "add_rule",
        "qualified_name": "AlertsSystem.add_rule",
        "is_async": false,
        "lineno": 1268,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "name",
          "condition",
          "alert_type",
          "priority",
          "channels",
          "cooldown"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AlertRule",
          "strftime",
          "utcnow",
          "_get_channels_for_priority"
        ]
      },
      {
        "name": "check_rules",
        "qualified_name": "AlertsSystem.check_rules",
        "is_async": true,
        "lineno": 1291,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "values",
          "total_seconds",
          "utcnow",
          "condition",
          "send_alert",
          "utcnow",
          "error"
        ]
      },
      {
        "name": "get_alert_stats",
        "qualified_name": "AlertsSystem.get_alert_stats",
        "is_async": false,
        "lineno": 1323,
        "scope": "class:AlertsSystem",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isoformat",
          "items",
          "isoformat",
          "items",
          "isoformat",
          "list"
        ]
      },
      {
        "name": "set_channel_enabled",
        "qualified_name": "AlertsSystem.set_channel_enabled",
        "is_async": false,
        "lineno": 1358,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "channel",
          "enabled"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "update_channel_config",
        "qualified_name": "AlertsSystem.update_channel_config",
        "is_async": false,
        "lineno": 1367,
        "scope": "class:AlertsSystem",
        "params": [
          "self",
          "channel",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "update",
          "ChannelConfig",
          "get"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "AlertManager.__init__",
        "is_async": false,
        "lineno": 1391,
        "scope": "class:AlertManager",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "AlertsSystem"
        ]
      },
      {
        "name": "send_critical",
        "qualified_name": "AlertManager.send_critical",
        "is_async": true,
        "lineno": 1396,
        "scope": "class:AlertManager",
        "params": [
          "self",
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "send_alert"
        ]
      },
      {
        "name": "send_error",
        "qualified_name": "AlertManager.send_error",
        "is_async": true,
        "lineno": 1404,
        "scope": "class:AlertManager",
        "params": [
          "self",
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "send_alert"
        ]
      },
      {
        "name": "send_warning",
        "qualified_name": "AlertManager.send_warning",
        "is_async": true,
        "lineno": 1412,
        "scope": "class:AlertManager",
        "params": [
          "self",
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "send_alert"
        ]
      },
      {
        "name": "send_info",
        "qualified_name": "AlertManager.send_info",
        "is_async": true,
        "lineno": 1420,
        "scope": "class:AlertManager",
        "params": [
          "self",
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "send_alert"
        ]
      },
      {
        "name": "send_trade_alert",
        "qualified_name": "AlertManager.send_trade_alert",
        "is_async": true,
        "lineno": 1428,
        "scope": "class:AlertManager",
        "params": [
          "self",
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "send_trading_alert"
        ]
      }
    ],
    "found_classes": [
      "AlertPriority",
      "AlertType",
      "NotificationChannel",
      "Alert",
      "AlertRule",
      "ChannelConfig",
      "AlertsSystem",
      "AlertManager"
    ],
    "class_bases": {
      "AlertPriority": [
        "Enum"
      ],
      "AlertType": [
        "Enum"
      ],
      "NotificationChannel": [
        "Enum"
      ],
      "Alert": [],
      "AlertRule": [],
      "ChannelConfig": [],
      "AlertsSystem": [],
      "AlertManager": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "monitoring/dashboard.py": {
    "path": "monitoring\\dashboard.py",
    "exists": true,
    "expected": [
      {
        "name": "start_dashboard",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "port"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "update_metrics",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_dashboard_data",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "generate_charts",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "Dashboard.__init__",
        "is_async": false,
        "lineno": 64,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "host",
          "port",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_default_config",
          "Application",
          "AsyncServer",
          "attach",
          "set",
          "Environment",
          "FileSystemLoader",
          "select_autoescape",
          "_setup_routes",
          "_setup_socketio_handlers",
          "create_task",
          "_update_dashboard_data",
          "create_task",
          "_broadcast_updates"
        ]
      },
      {
        "name": "_default_config",
        "qualified_name": "Dashboard._default_config",
        "is_async": false,
        "lineno": 106,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_setup_routes",
        "qualified_name": "Dashboard._setup_routes",
        "is_async": false,
        "lineno": 137,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "add_static",
          "add_get",
          "add_get",
          "add_get",
          "add_get",
          "add_get",
          "add_get",
          "add_get",
          "add_get",
          "add_get",
          "add_post",
          "add_post",
          "add_post",
          "add_post",
          "add_post",
          "add_post",
          "add_get",
          "setup",
          "ResourceOptions",
          "list",
          "routes",
          "add"
        ]
      },
      {
        "name": "_setup_socketio_handlers",
        "qualified_name": "Dashboard._setup_socketio_handlers",
        "is_async": false,
        "lineno": 179,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "add",
          "info",
          "emit",
          "_serialize_dashboard_data",
          "discard",
          "info",
          "get",
          "emit",
          "asdict",
          "get",
          "get",
          "_execute_action",
          "emit",
          "get",
          "get"
        ]
      },
      {
        "name": "connect",
        "qualified_name": "Dashboard.connect",
        "is_async": true,
        "lineno": 183,
        "scope": "class:Dashboard",
        "params": [
          "sid",
          "environ"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "add",
          "info",
          "emit",
          "_serialize_dashboard_data"
        ]
      },
      {
        "name": "disconnect",
        "qualified_name": "Dashboard.disconnect",
        "is_async": true,
        "lineno": 198,
        "scope": "class:Dashboard",
        "params": [
          "sid"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "discard",
          "info"
        ]
      },
      {
        "name": "subscribe_chart",
        "qualified_name": "Dashboard.subscribe_chart",
        "is_async": true,
        "lineno": 204,
        "scope": "class:Dashboard",
        "params": [
          "sid",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "emit",
          "asdict"
        ]
      },
      {
        "name": "execute_action",
        "qualified_name": "Dashboard.execute_action",
        "is_async": true,
        "lineno": 214,
        "scope": "class:Dashboard",
        "params": [
          "sid",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "_execute_action",
          "emit",
          "get",
          "get"
        ]
      },
      {
        "name": "index_handler",
        "qualified_name": "Dashboard.index_handler",
        "is_async": true,
        "lineno": 227,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_template",
          "render",
          "Response",
          "error",
          "Response"
        ]
      },
      {
        "name": "dashboard_handler",
        "qualified_name": "Dashboard.dashboard_handler",
        "is_async": true,
        "lineno": 240,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_template",
          "render",
          "_serialize_dashboard_data",
          "Response",
          "error",
          "Response"
        ]
      },
      {
        "name": "status_handler",
        "qualified_name": "Dashboard.status_handler",
        "is_async": true,
        "lineno": 254,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "json_response",
          "isoformat",
          "utcnow",
          "_serialize_dashboard_data",
          "len"
        ]
      },
      {
        "name": "positions_handler",
        "qualified_name": "Dashboard.positions_handler",
        "is_async": true,
        "lineno": 263,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "json_response",
          "len",
          "sum",
          "get"
        ]
      },
      {
        "name": "orders_handler",
        "qualified_name": "Dashboard.orders_handler",
        "is_async": true,
        "lineno": 271,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "json_response",
          "len",
          "sum",
          "get"
        ]
      },
      {
        "name": "performance_handler",
        "qualified_name": "Dashboard.performance_handler",
        "is_async": true,
        "lineno": 279,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "json_response"
        ]
      },
      {
        "name": "risk_handler",
        "qualified_name": "Dashboard.risk_handler",
        "is_async": true,
        "lineno": 283,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "json_response"
        ]
      },
      {
        "name": "alerts_handler",
        "qualified_name": "Dashboard.alerts_handler",
        "is_async": true,
        "lineno": 287,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "int",
          "get",
          "json_response",
          "len",
          "sum",
          "get"
        ]
      },
      {
        "name": "chart_handler",
        "qualified_name": "Dashboard.chart_handler",
        "is_async": true,
        "lineno": 296,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "json_response",
          "asdict",
          "json_response"
        ]
      },
      {
        "name": "close_position_handler",
        "qualified_name": "Dashboard.close_position_handler",
        "is_async": true,
        "lineno": 303,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "json",
          "get",
          "_close_position",
          "json_response",
          "json_response",
          "str"
        ]
      },
      {
        "name": "modify_position_handler",
        "qualified_name": "Dashboard.modify_position_handler",
        "is_async": true,
        "lineno": 316,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "json",
          "get",
          "get",
          "_modify_position",
          "json_response",
          "json_response",
          "str"
        ]
      },
      {
        "name": "cancel_order_handler",
        "qualified_name": "Dashboard.cancel_order_handler",
        "is_async": true,
        "lineno": 330,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "json",
          "get",
          "_cancel_order",
          "json_response",
          "json_response",
          "str"
        ]
      },
      {
        "name": "modify_order_handler",
        "qualified_name": "Dashboard.modify_order_handler",
        "is_async": true,
        "lineno": 343,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "json",
          "get",
          "get",
          "_modify_order",
          "json_response",
          "json_response",
          "str"
        ]
      },
      {
        "name": "toggle_strategy_handler",
        "qualified_name": "Dashboard.toggle_strategy_handler",
        "is_async": true,
        "lineno": 357,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "json",
          "get",
          "get",
          "_toggle_strategy",
          "json_response",
          "json_response",
          "str"
        ]
      },
      {
        "name": "dismiss_alert_handler",
        "qualified_name": "Dashboard.dismiss_alert_handler",
        "is_async": true,
        "lineno": 371,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "json",
          "get",
          "get",
          "json_response",
          "json_response",
          "str"
        ]
      },
      {
        "name": "sse_handler",
        "qualified_name": "Dashboard.sse_handler",
        "is_async": true,
        "lineno": 387,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "request"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "sse_response",
          "send",
          "dumps",
          "_serialize_dashboard_data",
          "send",
          "dumps",
          "sleep"
        ]
      },
      {
        "name": "update_dashboard_data",
        "qualified_name": "Dashboard.update_dashboard_data",
        "is_async": false,
        "lineno": 410,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "portfolio_value",
          "cash_balance",
          "positions_value",
          "daily_pnl",
          "total_pnl",
          "open_positions",
          "pending_orders",
          "win_rate",
          "sharpe_ratio",
          "max_drawdown",
          "active_alerts"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DashboardData",
          "utcnow"
        ]
      },
      {
        "name": "update_positions",
        "qualified_name": "Dashboard.update_positions",
        "is_async": false,
        "lineno": 440,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "positions"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "update_orders",
        "qualified_name": "Dashboard.update_orders",
        "is_async": false,
        "lineno": 444,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "orders"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "update_performance",
        "qualified_name": "Dashboard.update_performance",
        "is_async": false,
        "lineno": 448,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "performance"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "update_risk",
        "qualified_name": "Dashboard.update_risk",
        "is_async": false,
        "lineno": 452,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "risk"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "add_alert",
        "qualified_name": "Dashboard.add_alert",
        "is_async": false,
        "lineno": 456,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "alert"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append",
          "isoformat",
          "utcnow",
          "len"
        ]
      },
      {
        "name": "start_dashboard",
        "qualified_name": "Dashboard.start_dashboard",
        "is_async": true,
        "lineno": 470,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "port"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "start"
        ]
      },
      {
        "name": "update_metrics",
        "qualified_name": "Dashboard.update_metrics",
        "is_async": true,
        "lineno": 480,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "update_dashboard_data",
          "Decimal",
          "get",
          "Decimal",
          "get",
          "Decimal",
          "get",
          "Decimal",
          "get",
          "Decimal",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "update_performance",
          "update_risk",
          "update_positions",
          "update_orders"
        ]
      },
      {
        "name": "get_dashboard_data",
        "qualified_name": "Dashboard.get_dashboard_data",
        "is_async": true,
        "lineno": 519,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_serialize_dashboard_data",
          "items"
        ]
      },
      {
        "name": "generate_charts",
        "qualified_name": "Dashboard.generate_charts",
        "is_async": false,
        "lineno": 543,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "add_chart",
          "append",
          "get",
          "get",
          "add_chart",
          "create_win_rate_chart",
          "add_chart",
          "create_risk_gauge"
        ]
      },
      {
        "name": "add_chart",
        "qualified_name": "Dashboard.add_chart",
        "is_async": false,
        "lineno": 607,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "chart_id",
          "chart_type",
          "title",
          "data",
          "options",
          "update_interval"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ChartData"
        ]
      },
      {
        "name": "update_chart_data",
        "qualified_name": "Dashboard.update_chart_data",
        "is_async": false,
        "lineno": 626,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "chart_id",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_update_dashboard_data",
        "qualified_name": "Dashboard._update_dashboard_data",
        "is_async": true,
        "lineno": 632,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "utcnow",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_broadcast_updates",
        "qualified_name": "Dashboard._broadcast_updates",
        "is_async": true,
        "lineno": 647,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "emit",
          "_serialize_dashboard_data",
          "emit",
          "get",
          "emit",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_serialize_dashboard_data",
        "qualified_name": "Dashboard._serialize_dashboard_data",
        "is_async": false,
        "lineno": 679,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "isoformat",
          "float",
          "float",
          "float",
          "float",
          "float"
        ]
      },
      {
        "name": "_execute_action",
        "qualified_name": "Dashboard._execute_action",
        "is_async": true,
        "lineno": 699,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "action",
          "params"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_close_position",
        "qualified_name": "Dashboard._close_position",
        "is_async": true,
        "lineno": 708,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "position_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_modify_position",
        "qualified_name": "Dashboard._modify_position",
        "is_async": true,
        "lineno": 712,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "position_id",
          "mods"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_cancel_order",
        "qualified_name": "Dashboard._cancel_order",
        "is_async": true,
        "lineno": 716,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "order_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_modify_order",
        "qualified_name": "Dashboard._modify_order",
        "is_async": true,
        "lineno": 720,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "order_id",
          "mods"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_toggle_strategy",
        "qualified_name": "Dashboard._toggle_strategy",
        "is_async": true,
        "lineno": 724,
        "scope": "class:Dashboard",
        "params": [
          "self",
          "strategy",
          "enabled"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "start",
        "qualified_name": "Dashboard.start",
        "is_async": true,
        "lineno": 729,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AppRunner",
          "setup",
          "TCPSite",
          "start",
          "info"
        ]
      },
      {
        "name": "create_portfolio_chart",
        "qualified_name": "Dashboard.create_portfolio_chart",
        "is_async": false,
        "lineno": 737,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "range",
          "utcnow",
          "timedelta",
          "append",
          "isoformat",
          "add_chart"
        ]
      },
      {
        "name": "create_positions_chart",
        "qualified_name": "Dashboard.create_positions_chart",
        "is_async": false,
        "lineno": 767,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append",
          "get",
          "get",
          "get",
          "add_chart"
        ]
      },
      {
        "name": "create_win_rate_chart",
        "qualified_name": "Dashboard.create_win_rate_chart",
        "is_async": false,
        "lineno": 795,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "add_chart"
        ]
      },
      {
        "name": "create_volume_chart",
        "qualified_name": "Dashboard.create_volume_chart",
        "is_async": false,
        "lineno": 819,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "range",
          "utcnow",
          "timedelta",
          "append",
          "isoformat",
          "add_chart"
        ]
      },
      {
        "name": "create_risk_gauge",
        "qualified_name": "Dashboard.create_risk_gauge",
        "is_async": false,
        "lineno": 846,
        "scope": "class:Dashboard",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "add_chart"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "DashboardManager.__init__",
        "is_async": false,
        "lineno": 881,
        "scope": "class:DashboardManager",
        "params": [
          "self",
          "dashboard"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "connect_to_trading_system",
        "qualified_name": "DashboardManager.connect_to_trading_system",
        "is_async": true,
        "lineno": 886,
        "scope": "class:DashboardManager",
        "params": [
          "self",
          "engine",
          "portfolio_manager",
          "order_manager",
          "alerts_system"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "create_task",
          "_update_portfolio_data",
          "create_task",
          "_update_positions_data",
          "create_task",
          "_update_orders_data",
          "create_task",
          "_update_alerts_data",
          "create_task",
          "_update_performance_data",
          "create_task",
          "_update_risk_data"
        ]
      },
      {
        "name": "_update_portfolio_data",
        "qualified_name": "DashboardManager._update_portfolio_data",
        "is_async": true,
        "lineno": 909,
        "scope": "class:DashboardManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_portfolio_summary",
          "update_dashboard_data",
          "Decimal",
          "get",
          "Decimal",
          "get",
          "Decimal",
          "get",
          "Decimal",
          "get",
          "Decimal",
          "get",
          "get",
          "len",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "len",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_update_positions_data",
        "qualified_name": "DashboardManager._update_positions_data",
        "is_async": true,
        "lineno": 936,
        "scope": "class:DashboardManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_open_positions",
          "update_positions",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_update_orders_data",
        "qualified_name": "DashboardManager._update_orders_data",
        "is_async": true,
        "lineno": 950,
        "scope": "class:DashboardManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_active_orders",
          "update_orders",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_update_alerts_data",
        "qualified_name": "DashboardManager._update_alerts_data",
        "is_async": true,
        "lineno": 964,
        "scope": "class:DashboardManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "add_alert",
          "get_alert_stats",
          "get",
          "add_alert",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "alert_callback",
        "qualified_name": "DashboardManager.alert_callback",
        "is_async": true,
        "lineno": 970,
        "scope": "class:DashboardManager",
        "params": [
          "alert"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "add_alert"
        ]
      },
      {
        "name": "_update_performance_data",
        "qualified_name": "DashboardManager._update_performance_data",
        "is_async": true,
        "lineno": 990,
        "scope": "class:DashboardManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get_performance_report",
          "update_performance",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_update_risk_data",
        "qualified_name": "DashboardManager._update_risk_data",
        "is_async": true,
        "lineno": 1004,
        "scope": "class:DashboardManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "str",
          "get",
          "str",
          "get",
          "get",
          "get",
          "update_risk",
          "sleep",
          "error",
          "sleep"
        ]
      }
    ],
    "found_classes": [
      "DashboardSection",
      "DashboardData",
      "ChartData",
      "Dashboard",
      "DashboardManager"
    ],
    "class_bases": {
      "DashboardSection": [
        "Enum"
      ],
      "DashboardData": [],
      "ChartData": [],
      "Dashboard": [],
      "DashboardManager": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "monitoring/performance.py": {
    "path": "monitoring\\performance.py",
    "exists": true,
    "expected": [
      {
        "name": "track_trade",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_metrics",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_sharpe_ratio",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "returns"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_max_drawdown",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "equity_curve"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "generate_report",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "PerformanceTracker.__init__",
        "is_async": false,
        "lineno": 127,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_default_config",
          "defaultdict",
          "defaultdict",
          "deque",
          "deque",
          "deque",
          "deque",
          "_initialize_metrics",
          "Path",
          "_init_database",
          "create_task",
          "_calculate_snapshots",
          "create_task",
          "_persist_data"
        ]
      },
      {
        "name": "_default_config",
        "qualified_name": "PerformanceTracker._default_config",
        "is_async": false,
        "lineno": 153,
        "scope": "class:PerformanceTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_initialize_metrics",
        "qualified_name": "PerformanceTracker._initialize_metrics",
        "is_async": false,
        "lineno": 169,
        "scope": "class:PerformanceTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "timedelta"
        ]
      },
      {
        "name": "_init_database",
        "qualified_name": "PerformanceTracker._init_database",
        "is_async": false,
        "lineno": 197,
        "scope": "class:PerformanceTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "mkdir",
          "connect",
          "str",
          "cursor",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "commit",
          "close"
        ]
      },
      {
        "name": "record_trade",
        "qualified_name": "PerformanceTracker.record_trade",
        "is_async": false,
        "lineno": 274,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append",
          "append",
          "date",
          "append",
          "_update_metrics",
          "_log_trade",
          "error"
        ]
      },
      {
        "name": "_update_metrics",
        "qualified_name": "PerformanceTracker._update_metrics",
        "is_async": false,
        "lineno": 291,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "max",
          "sum",
          "len",
          "Decimal",
          "max",
          "max",
          "abs",
          "abs",
          "sum",
          "len",
          "Decimal",
          "min",
          "sum",
          "abs",
          "sum",
          "float",
          "sum",
          "timedelta",
          "len",
          "float",
          "max",
          "len",
          "float",
          "len",
          "mean",
          "stdev",
          "sqrt",
          "Decimal",
          "sum",
          "len",
          "float",
          "mean"
        ]
      },
      {
        "name": "_log_trade",
        "qualified_name": "PerformanceTracker._log_trade",
        "is_async": false,
        "lineno": 399,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "log"
        ]
      },
      {
        "name": "_calculate_snapshots",
        "qualified_name": "PerformanceTracker._calculate_snapshots",
        "is_async": true,
        "lineno": 415,
        "scope": "class:PerformanceTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "utcnow",
          "total_seconds",
          "_create_snapshot",
          "append",
          "total_seconds",
          "_create_snapshot",
          "append",
          "total_seconds",
          "_create_snapshot",
          "append",
          "total_seconds",
          "_create_snapshot",
          "append",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_create_snapshot",
        "qualified_name": "PerformanceTracker._create_snapshot",
        "is_async": false,
        "lineno": 451,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "PerformanceSnapshot",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "utcnow",
          "timedelta",
          "utcnow",
          "timedelta",
          "utcnow",
          "timedelta",
          "utcnow",
          "timedelta",
          "sum",
          "float",
          "float",
          "len",
          "stdev",
          "len",
          "stdev",
          "sqrt",
          "sorted",
          "int",
          "len",
          "len",
          "abs",
          "abs",
          "mean",
          "sum",
          "len",
          "len",
          "sum",
          "abs",
          "sum",
          "float",
          "len",
          "Decimal",
          "sum",
          "sum",
          "sum",
          "timedelta",
          "len",
          "len",
          "max",
          "total_seconds",
          "utcnow",
          "items",
          "len",
          "float",
          "sum",
          "sum",
          "len",
          "mean",
          "PerformanceSnapshot",
          "utcnow",
          "float",
          "Decimal",
          "len"
        ]
      },
      {
        "name": "_persist_data",
        "qualified_name": "PerformanceTracker._persist_data",
        "is_async": true,
        "lineno": 562,
        "scope": "class:PerformanceTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sleep",
          "connect",
          "str",
          "cursor",
          "execute",
          "isoformat",
          "isoformat",
          "float",
          "float",
          "float",
          "float",
          "isoformat",
          "float",
          "float",
          "float",
          "float",
          "float",
          "int",
          "total_seconds",
          "float",
          "float",
          "dumps",
          "list",
          "list",
          "list",
          "list",
          "execute",
          "isoformat",
          "float",
          "float",
          "float",
          "float",
          "float",
          "int",
          "total_seconds",
          "dumps",
          "commit",
          "close",
          "error"
        ]
      },
      {
        "name": "get_performance_report",
        "qualified_name": "PerformanceTracker.get_performance_report",
        "is_async": false,
        "lineno": 643,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "date",
          "today",
          "today",
          "timedelta",
          "weekday",
          "today",
          "date",
          "replace",
          "today",
          "date",
          "len",
          "float",
          "sum",
          "sum",
          "len",
          "mean",
          "float"
        ]
      },
      {
        "name": "track_trade",
        "qualified_name": "PerformanceTracker.track_trade",
        "is_async": true,
        "lineno": 684,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "TradeRecord",
          "get",
          "str",
          "uuid4",
          "get",
          "utcnow",
          "get",
          "get",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "get",
          "get",
          "get",
          "timedelta",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "get",
          "get",
          "get",
          "get",
          "record_trade",
          "record_trade"
        ]
      },
      {
        "name": "calculate_metrics",
        "qualified_name": "PerformanceTracker.calculate_metrics",
        "is_async": true,
        "lineno": 724,
        "scope": "class:PerformanceTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "float",
          "calculate_sharpe_ratio",
          "Decimal",
          "sorted",
          "append",
          "float",
          "calculate_max_drawdown",
          "copy"
        ]
      },
      {
        "name": "calculate_sharpe_ratio",
        "qualified_name": "PerformanceTracker.calculate_sharpe_ratio",
        "is_async": false,
        "lineno": 752,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "returns"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "mean",
          "stdev",
          "get",
          "sqrt"
        ]
      },
      {
        "name": "calculate_max_drawdown",
        "qualified_name": "PerformanceTracker.calculate_max_drawdown",
        "is_async": false,
        "lineno": 776,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "equity_curve"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "max"
        ]
      },
      {
        "name": "generate_report",
        "qualified_name": "PerformanceTracker.generate_report",
        "is_async": true,
        "lineno": 801,
        "scope": "class:PerformanceTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "calculate_metrics",
          "isoformat",
          "utcnow",
          "float",
          "float",
          "float",
          "float",
          "get",
          "get",
          "get",
          "get",
          "_calculate_var",
          "get",
          "get",
          "float",
          "get",
          "float"
        ]
      },
      {
        "name": "_calculate_var",
        "qualified_name": "PerformanceTracker._calculate_var",
        "is_async": false,
        "lineno": 890,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "confidence_level"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sorted",
          "float",
          "int",
          "len",
          "len",
          "abs"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "StructuredLogger.__init__",
        "is_async": false,
        "lineno": 909,
        "scope": "class:StructuredLogger",
        "params": [
          "self",
          "name",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_default_config",
          "setup_logging"
        ]
      },
      {
        "name": "_default_config",
        "qualified_name": "StructuredLogger._default_config",
        "is_async": false,
        "lineno": 915,
        "scope": "class:StructuredLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "setup_logging",
        "qualified_name": "StructuredLogger.setup_logging",
        "is_async": false,
        "lineno": 928,
        "scope": "class:StructuredLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Path",
          "mkdir",
          "getLogger",
          "setLevel",
          "getattr",
          "StreamHandler",
          "setFormatter",
          "_get_formatter",
          "addHandler",
          "RotatingFileHandler",
          "setFormatter",
          "_get_formatter",
          "addHandler",
          "RotatingFileHandler",
          "setLevel",
          "setFormatter",
          "_get_formatter",
          "addHandler",
          "RotatingFileHandler",
          "setLevel",
          "setFormatter",
          "_get_formatter",
          "addHandler"
        ]
      },
      {
        "name": "_get_formatter",
        "qualified_name": "StructuredLogger._get_formatter",
        "is_async": false,
        "lineno": 980,
        "scope": "class:StructuredLogger",
        "params": [
          "self",
          "output_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "JsonFormatter",
          "TradeFormatter",
          "ColoredFormatter",
          "StandardFormatter"
        ]
      },
      {
        "name": "format",
        "qualified_name": "JsonFormatter.format",
        "is_async": false,
        "lineno": 993,
        "scope": "class:JsonFormatter",
        "params": [
          "self",
          "record"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isoformat",
          "utcnow",
          "getMessage",
          "formatException",
          "hasattr",
          "dumps"
        ]
      },
      {
        "name": "format",
        "qualified_name": "ColoredFormatter.format",
        "is_async": false,
        "lineno": 1028,
        "scope": "class:ColoredFormatter",
        "params": [
          "self",
          "record"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "format",
          "super"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "StandardFormatter.__init__",
        "is_async": false,
        "lineno": 1037,
        "scope": "class:StandardFormatter",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "__init__",
          "super"
        ]
      },
      {
        "name": "format",
        "qualified_name": "TradeFormatter.format",
        "is_async": false,
        "lineno": 1047,
        "scope": "class:TradeFormatter",
        "params": [
          "self",
          "record"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "hasattr",
          "format",
          "super"
        ]
      }
    ],
    "found_classes": [
      "MetricType",
      "TradeRecord",
      "PerformanceSnapshot",
      "PerformanceTracker",
      "StructuredLogger",
      "JsonFormatter",
      "ColoredFormatter",
      "StandardFormatter",
      "TradeFormatter"
    ],
    "class_bases": {
      "MetricType": [
        "Enum"
      ],
      "TradeRecord": [],
      "PerformanceSnapshot": [],
      "PerformanceTracker": [],
      "StructuredLogger": [],
      "JsonFormatter": [
        "Formatter"
      ],
      "ColoredFormatter": [
        "Formatter"
      ],
      "StandardFormatter": [
        "Formatter"
      ],
      "TradeFormatter": [
        "Formatter"
      ]
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "monitoring/logger.py": {
    "path": "monitoring\\logger.py",
    "exists": true,
    "expected": [
      {
        "name": "log_trade",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "log_error",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "error",
          "context"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "log_performance",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "setup_logging",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "PerformanceTracker.__init__",
        "is_async": false,
        "lineno": 128,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_default_config",
          "defaultdict",
          "defaultdict",
          "deque",
          "deque",
          "deque",
          "deque",
          "_initialize_metrics",
          "Path",
          "_init_database",
          "create_task",
          "_calculate_snapshots",
          "create_task",
          "_persist_data"
        ]
      },
      {
        "name": "_default_config",
        "qualified_name": "PerformanceTracker._default_config",
        "is_async": false,
        "lineno": 154,
        "scope": "class:PerformanceTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_initialize_metrics",
        "qualified_name": "PerformanceTracker._initialize_metrics",
        "is_async": false,
        "lineno": 170,
        "scope": "class:PerformanceTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "timedelta"
        ]
      },
      {
        "name": "_init_database",
        "qualified_name": "PerformanceTracker._init_database",
        "is_async": false,
        "lineno": 198,
        "scope": "class:PerformanceTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "mkdir",
          "connect",
          "str",
          "cursor",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "commit",
          "close"
        ]
      },
      {
        "name": "record_trade",
        "qualified_name": "PerformanceTracker.record_trade",
        "is_async": false,
        "lineno": 275,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append",
          "append",
          "date",
          "append",
          "_update_metrics",
          "_log_trade",
          "error"
        ]
      },
      {
        "name": "_update_metrics",
        "qualified_name": "PerformanceTracker._update_metrics",
        "is_async": false,
        "lineno": 292,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "max",
          "sum",
          "len",
          "Decimal",
          "max",
          "max",
          "abs",
          "abs",
          "sum",
          "len",
          "Decimal",
          "min",
          "sum",
          "abs",
          "sum",
          "float",
          "sum",
          "timedelta",
          "len",
          "float",
          "max",
          "len",
          "float",
          "len",
          "mean",
          "stdev",
          "sqrt",
          "Decimal",
          "sum",
          "len",
          "float",
          "mean"
        ]
      },
      {
        "name": "_log_trade",
        "qualified_name": "PerformanceTracker._log_trade",
        "is_async": false,
        "lineno": 400,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "log"
        ]
      },
      {
        "name": "_calculate_snapshots",
        "qualified_name": "PerformanceTracker._calculate_snapshots",
        "is_async": true,
        "lineno": 416,
        "scope": "class:PerformanceTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "utcnow",
          "total_seconds",
          "_create_snapshot",
          "append",
          "total_seconds",
          "_create_snapshot",
          "append",
          "total_seconds",
          "_create_snapshot",
          "append",
          "total_seconds",
          "_create_snapshot",
          "append",
          "sleep",
          "error",
          "sleep"
        ]
      },
      {
        "name": "_create_snapshot",
        "qualified_name": "PerformanceTracker._create_snapshot",
        "is_async": false,
        "lineno": 452,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "PerformanceSnapshot",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "utcnow",
          "timedelta",
          "utcnow",
          "timedelta",
          "utcnow",
          "timedelta",
          "utcnow",
          "timedelta",
          "sum",
          "float",
          "float",
          "len",
          "stdev",
          "len",
          "stdev",
          "sqrt",
          "sorted",
          "int",
          "len",
          "len",
          "abs",
          "abs",
          "mean",
          "sum",
          "len",
          "len",
          "sum",
          "abs",
          "sum",
          "float",
          "len",
          "Decimal",
          "sum",
          "sum",
          "sum",
          "timedelta",
          "len",
          "len",
          "max",
          "total_seconds",
          "utcnow",
          "items",
          "len",
          "float",
          "sum",
          "sum",
          "len",
          "mean",
          "PerformanceSnapshot",
          "utcnow",
          "float",
          "Decimal",
          "len"
        ]
      },
      {
        "name": "_persist_data",
        "qualified_name": "PerformanceTracker._persist_data",
        "is_async": true,
        "lineno": 563,
        "scope": "class:PerformanceTracker",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sleep",
          "connect",
          "str",
          "cursor",
          "execute",
          "isoformat",
          "isoformat",
          "float",
          "float",
          "float",
          "float",
          "isoformat",
          "float",
          "float",
          "float",
          "float",
          "float",
          "int",
          "total_seconds",
          "float",
          "float",
          "dumps",
          "list",
          "list",
          "list",
          "list",
          "execute",
          "isoformat",
          "float",
          "float",
          "float",
          "float",
          "float",
          "int",
          "total_seconds",
          "dumps",
          "commit",
          "close",
          "error"
        ]
      },
      {
        "name": "get_performance_report",
        "qualified_name": "PerformanceTracker.get_performance_report",
        "is_async": false,
        "lineno": 644,
        "scope": "class:PerformanceTracker",
        "params": [
          "self",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "date",
          "today",
          "today",
          "timedelta",
          "weekday",
          "today",
          "date",
          "replace",
          "today",
          "date",
          "len",
          "float",
          "sum",
          "sum",
          "len",
          "mean",
          "float"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "StructuredLogger.__init__",
        "is_async": false,
        "lineno": 691,
        "scope": "class:StructuredLogger",
        "params": [
          "self",
          "name",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_default_config",
          "setup_logging"
        ]
      },
      {
        "name": "_default_config",
        "qualified_name": "StructuredLogger._default_config",
        "is_async": false,
        "lineno": 697,
        "scope": "class:StructuredLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_get_formatter",
        "qualified_name": "StructuredLogger._get_formatter",
        "is_async": false,
        "lineno": 711,
        "scope": "class:StructuredLogger",
        "params": [
          "self",
          "output_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "JsonFormatter",
          "TradeFormatter",
          "ColoredFormatter",
          "StandardFormatter"
        ]
      },
      {
        "name": "log_trade",
        "qualified_name": "StructuredLogger.log_trade",
        "is_async": false,
        "lineno": 720,
        "scope": "class:StructuredLogger",
        "params": [
          "self",
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "getLogger",
          "get",
          "str",
          "uuid4",
          "isoformat",
          "get",
          "utcnow",
          "get",
          "get",
          "get",
          "float",
          "get",
          "float",
          "get",
          "get",
          "float",
          "get",
          "float",
          "get",
          "float",
          "get",
          "makeRecord",
          "handle",
          "info",
          "info"
        ]
      },
      {
        "name": "log_error",
        "qualified_name": "StructuredLogger.log_error",
        "is_async": false,
        "lineno": 771,
        "scope": "class:StructuredLogger",
        "params": [
          "self",
          "error",
          "context"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "getLogger",
          "type",
          "str",
          "isoformat",
          "utcnow",
          "format_exc",
          "isinstance",
          "isinstance",
          "warning",
          "get",
          "isinstance",
          "error",
          "get",
          "error",
          "get",
          "get",
          "_save_error_to_file"
        ]
      },
      {
        "name": "log_performance",
        "qualified_name": "StructuredLogger.log_performance",
        "is_async": false,
        "lineno": 814,
        "scope": "class:StructuredLogger",
        "params": [
          "self",
          "metrics"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "getLogger",
          "isoformat",
          "utcnow",
          "get",
          "get",
          "get",
          "get",
          "float",
          "get",
          "get",
          "float",
          "get",
          "info",
          "warning",
          "warning"
        ]
      },
      {
        "name": "setup_logging",
        "qualified_name": "StructuredLogger.setup_logging",
        "is_async": false,
        "lineno": 857,
        "scope": "class:StructuredLogger",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "update",
          "Path",
          "mkdir",
          "getLogger",
          "setLevel",
          "getattr",
          "StreamHandler",
          "setFormatter",
          "_get_formatter",
          "addHandler",
          "RotatingFileHandler",
          "setFormatter",
          "_get_formatter",
          "addHandler",
          "RotatingFileHandler",
          "setLevel",
          "setFormatter",
          "_get_formatter",
          "addHandler",
          "RotatingFileHandler",
          "setLevel",
          "setFormatter",
          "_get_formatter",
          "addHandler",
          "info"
        ]
      },
      {
        "name": "_save_error_to_file",
        "qualified_name": "StructuredLogger._save_error_to_file",
        "is_async": false,
        "lineno": 921,
        "scope": "class:StructuredLogger",
        "params": [
          "self",
          "error_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Path",
          "exists",
          "open",
          "load",
          "append",
          "open",
          "dump",
          "error"
        ]
      },
      {
        "name": "format",
        "qualified_name": "JsonFormatter.format",
        "is_async": false,
        "lineno": 950,
        "scope": "class:JsonFormatter",
        "params": [
          "self",
          "record"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isoformat",
          "utcnow",
          "getMessage",
          "formatException",
          "hasattr",
          "dumps"
        ]
      },
      {
        "name": "format",
        "qualified_name": "ColoredFormatter.format",
        "is_async": false,
        "lineno": 985,
        "scope": "class:ColoredFormatter",
        "params": [
          "self",
          "record"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "format",
          "super"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "StandardFormatter.__init__",
        "is_async": false,
        "lineno": 994,
        "scope": "class:StandardFormatter",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "__init__",
          "super"
        ]
      },
      {
        "name": "format",
        "qualified_name": "TradeFormatter.format",
        "is_async": false,
        "lineno": 1004,
        "scope": "class:TradeFormatter",
        "params": [
          "self",
          "record"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "hasattr",
          "format",
          "super"
        ]
      }
    ],
    "found_classes": [
      "MetricType",
      "TradeRecord",
      "PerformanceSnapshot",
      "PerformanceTracker",
      "StructuredLogger",
      "JsonFormatter",
      "ColoredFormatter",
      "StandardFormatter",
      "TradeFormatter"
    ],
    "class_bases": {
      "MetricType": [
        "Enum"
      ],
      "TradeRecord": [],
      "PerformanceSnapshot": [],
      "PerformanceTracker": [],
      "StructuredLogger": [],
      "JsonFormatter": [
        "Formatter"
      ],
      "ColoredFormatter": [
        "Formatter"
      ],
      "StandardFormatter": [
        "Formatter"
      ],
      "TradeFormatter": [
        "Formatter"
      ]
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "security/__init__.py": {
    "path": "security\\__init__.py",
    "exists": true,
    "expected": [],
    "found_methods": [],
    "found_classes": [],
    "class_bases": {},
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "security/encryption.py": {
    "path": "security\\encryption.py",
    "exists": true,
    "expected": [
      {
        "name": "encrypt_data",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "decrypt_data",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "encrypted",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "generate_key",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "hash_password",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "password"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "verify_password",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "password",
          "hash"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "EncryptionManager.__init__",
        "is_async": false,
        "lineno": 21,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_or_create_master_key",
          "Fernet",
          "get",
          "utcnow"
        ]
      },
      {
        "name": "_get_or_create_master_key",
        "qualified_name": "EncryptionManager._get_or_create_master_key",
        "is_async": false,
        "lineno": 28,
        "scope": "class:EncryptionManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bytes",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "exists",
          "open",
          "read",
          "generate_key",
          "open",
          "write",
          "chmod",
          "info"
        ]
      },
      {
        "name": "encrypt_sensitive_data",
        "qualified_name": "EncryptionManager.encrypt_sensitive_data",
        "is_async": false,
        "lineno": 49,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "dumps",
          "isinstance",
          "str",
          "encrypt",
          "encode",
          "decode",
          "b64encode",
          "error"
        ]
      },
      {
        "name": "decrypt_sensitive_data",
        "qualified_name": "EncryptionManager.decrypt_sensitive_data",
        "is_async": false,
        "lineno": 68,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "encrypted_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Union[str, Dict, List]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "b64decode",
          "encode",
          "decode",
          "decrypt",
          "loads",
          "error"
        ]
      },
      {
        "name": "encrypt_api_key",
        "qualified_name": "EncryptionManager.encrypt_api_key",
        "is_async": false,
        "lineno": 87,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "api_key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "encrypt_sensitive_data",
          "_generate_key_id",
          "isoformat",
          "utcnow"
        ]
      },
      {
        "name": "decrypt_api_key",
        "qualified_name": "EncryptionManager.decrypt_api_key",
        "is_async": false,
        "lineno": 98,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "encrypted_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "decrypt_sensitive_data"
        ]
      },
      {
        "name": "encrypt_wallet_key",
        "qualified_name": "EncryptionManager.encrypt_wallet_key",
        "is_async": false,
        "lineno": 102,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "private_key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "token_hex",
          "encrypt_sensitive_data",
          "_generate_key_id",
          "isoformat",
          "utcnow"
        ]
      },
      {
        "name": "decrypt_wallet_key",
        "qualified_name": "EncryptionManager.decrypt_wallet_key",
        "is_async": false,
        "lineno": 117,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "encrypted_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "decrypt_sensitive_data",
          "split"
        ]
      },
      {
        "name": "rotate_encryption_key",
        "qualified_name": "EncryptionManager.rotate_encryption_key",
        "is_async": false,
        "lineno": 127,
        "scope": "class:EncryptionManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "utcnow",
          "generate_key",
          "Fernet",
          "utcnow",
          "get",
          "open",
          "write",
          "info",
          "error"
        ]
      },
      {
        "name": "_generate_key_id",
        "qualified_name": "EncryptionManager._generate_key_id",
        "is_async": false,
        "lineno": 159,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "hexdigest",
          "sha256",
          "encode"
        ]
      },
      {
        "name": "secure_delete",
        "qualified_name": "EncryptionManager.secure_delete",
        "is_async": false,
        "lineno": 163,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "len",
          "isinstance",
          "len"
        ]
      },
      {
        "name": "encrypt_data",
        "qualified_name": "EncryptionManager.encrypt_data",
        "is_async": false,
        "lineno": 175,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "data",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "PBKDF2",
          "SHA256",
          "default_backend",
          "urlsafe_b64encode",
          "derive",
          "encode",
          "Fernet",
          "Fernet",
          "encode",
          "encrypt",
          "encode",
          "decode",
          "b64encode"
        ]
      },
      {
        "name": "decrypt_data",
        "qualified_name": "EncryptionManager.decrypt_data",
        "is_async": false,
        "lineno": 198,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "encrypted",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "PBKDF2",
          "SHA256",
          "default_backend",
          "urlsafe_b64encode",
          "derive",
          "encode",
          "Fernet",
          "Fernet",
          "encode",
          "b64decode",
          "encode",
          "decrypt",
          "decode"
        ]
      },
      {
        "name": "generate_key",
        "qualified_name": "EncryptionManager.generate_key",
        "is_async": false,
        "lineno": 221,
        "scope": "class:EncryptionManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "decode",
          "generate_key"
        ]
      },
      {
        "name": "hash_password",
        "qualified_name": "EncryptionManager.hash_password",
        "is_async": false,
        "lineno": 227,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "password"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "token_bytes",
          "PBKDF2",
          "SHA256",
          "default_backend",
          "derive",
          "encode",
          "decode",
          "b64encode"
        ]
      },
      {
        "name": "verify_password",
        "qualified_name": "EncryptionManager.verify_password",
        "is_async": false,
        "lineno": 247,
        "scope": "class:EncryptionManager",
        "params": [
          "self",
          "password",
          "hash"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "b64decode",
          "encode",
          "PBKDF2",
          "SHA256",
          "default_backend",
          "derive",
          "encode"
        ]
      }
    ],
    "found_classes": [
      "EncryptionManager"
    ],
    "class_bases": {
      "EncryptionManager": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "security/api_security.py": {
    "path": "security\\api_security.py",
    "exists": true,
    "expected": [
      {
        "name": "generate_api_key",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "validate_api_key",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "rate_limit_check",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "ip"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "generate_jwt",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "payload"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "verify_jwt",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "APISecurityManager.__init__",
        "is_async": false,
        "lineno": 18,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "token_hex",
          "get",
          "defaultdict",
          "set",
          "get",
          "set",
          "get",
          "_load_api_keys"
        ]
      },
      {
        "name": "validate_request",
        "qualified_name": "APISecurityManager.validate_request",
        "is_async": true,
        "lineno": 38,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "request_data",
          "endpoint",
          "method"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[bool, Optional[str]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "_check_ip_access",
          "get",
          "_validate_api_key",
          "get",
          "get",
          "_validate_signature",
          "check_rate_limit",
          "_check_permissions",
          "_log_request",
          "error"
        ]
      },
      {
        "name": "check_rate_limit",
        "qualified_name": "APISecurityManager.check_rate_limit",
        "is_async": true,
        "lineno": 99,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "identifier",
          "endpoint_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[bool, Optional[str]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "time",
          "len",
          "append",
          "error"
        ]
      },
      {
        "name": "generate_api_key",
        "qualified_name": "APISecurityManager.generate_api_key",
        "is_async": false,
        "lineno": 134,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "user_id",
          "permissions",
          "expires_days"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "token_urlsafe",
          "token_hex",
          "isoformat",
          "utcnow",
          "isoformat",
          "utcnow",
          "timedelta",
          "_save_api_keys"
        ]
      },
      {
        "name": "revoke_api_key",
        "qualified_name": "APISecurityManager.revoke_api_key",
        "is_async": false,
        "lineno": 168,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "api_key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isoformat",
          "utcnow",
          "_save_api_keys"
        ]
      },
      {
        "name": "generate_jwt_token",
        "qualified_name": "APISecurityManager.generate_jwt_token",
        "is_async": false,
        "lineno": 177,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "user_id",
          "expires_minutes"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "utcnow",
          "timedelta",
          "utcnow",
          "encode"
        ]
      },
      {
        "name": "validate_jwt_token",
        "qualified_name": "APISecurityManager.validate_jwt_token",
        "is_async": false,
        "lineno": 191,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[bool, Optional[Dict]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "decode"
        ]
      },
      {
        "name": "add_ip_whitelist",
        "qualified_name": "APISecurityManager.add_ip_whitelist",
        "is_async": false,
        "lineno": 205,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "ip"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ip_address",
          "add"
        ]
      },
      {
        "name": "add_ip_blacklist",
        "qualified_name": "APISecurityManager.add_ip_blacklist",
        "is_async": false,
        "lineno": 215,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "ip"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ip_address",
          "add",
          "discard"
        ]
      },
      {
        "name": "_check_ip_access",
        "qualified_name": "APISecurityManager._check_ip_access",
        "is_async": false,
        "lineno": 227,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "ip"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[bool, Optional[str]]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_validate_api_key",
        "qualified_name": "APISecurityManager._validate_api_key",
        "is_async": false,
        "lineno": 237,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "api_key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[bool, Optional[str]]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "fromisoformat",
          "utcnow"
        ]
      },
      {
        "name": "_validate_signature",
        "qualified_name": "APISecurityManager._validate_signature",
        "is_async": false,
        "lineno": 254,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "request_data",
          "signature",
          "api_key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get",
          "get",
          "hexdigest",
          "new",
          "encode",
          "encode",
          "compare_digest"
        ]
      },
      {
        "name": "_check_permissions",
        "qualified_name": "APISecurityManager._check_permissions",
        "is_async": false,
        "lineno": 288,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "api_key",
          "endpoint",
          "method"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[bool, Optional[str]]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "lower",
          "split",
          "range",
          "len",
          "join",
          "lower"
        ]
      },
      {
        "name": "_load_api_keys",
        "qualified_name": "APISecurityManager._load_api_keys",
        "is_async": false,
        "lineno": 317,
        "scope": "class:APISecurityManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_save_api_keys",
        "qualified_name": "APISecurityManager._save_api_keys",
        "is_async": false,
        "lineno": 322,
        "scope": "class:APISecurityManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_log_request",
        "qualified_name": "APISecurityManager._log_request",
        "is_async": true,
        "lineno": 327,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "api_key",
          "endpoint",
          "success"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "validate_api_key",
        "qualified_name": "APISecurityManager.validate_api_key",
        "is_async": false,
        "lineno": 339,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_validate_api_key"
        ]
      },
      {
        "name": "rate_limit_check",
        "qualified_name": "APISecurityManager.rate_limit_check",
        "is_async": true,
        "lineno": 347,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "ip"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "check_rate_limit"
        ]
      },
      {
        "name": "generate_jwt",
        "qualified_name": "APISecurityManager.generate_jwt",
        "is_async": false,
        "lineno": 356,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "payload"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "utcnow",
          "utcnow",
          "timedelta",
          "encode"
        ]
      },
      {
        "name": "verify_jwt",
        "qualified_name": "APISecurityManager.verify_jwt",
        "is_async": false,
        "lineno": 368,
        "scope": "class:APISecurityManager",
        "params": [
          "self",
          "token"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "decode"
        ]
      }
    ],
    "found_classes": [
      "APISecurityManager"
    ],
    "class_bases": {
      "APISecurityManager": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "security/wallet_security.py": {
    "path": "security\\wallet_security.py",
    "exists": true,
    "expected": [
      {
        "name": "initialize",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "create_wallet",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "wallet_type",
          "security_level",
          "derivation_path"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "sign_transaction",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "wallet_id",
          "transaction_data",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "emergency_stop",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "reason"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "rotate_keys",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "wallet_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "encrypt_private_key",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "private_key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "WalletSecurityManager.__init__",
        "is_async": false,
        "lineno": 78,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "EncryptionManager",
          "get",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "info"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "WalletSecurityManager.initialize",
        "is_async": true,
        "lineno": 104,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_load_wallet_configurations",
          "_initialize_web3_connections",
          "_load_security_policies",
          "_setup_hardware_wallets",
          "info",
          "error"
        ]
      },
      {
        "name": "_load_wallet_configurations",
        "qualified_name": "WalletSecurityManager._load_wallet_configurations",
        "is_async": true,
        "lineno": 118,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "items",
          "decrypt_sensitive_data",
          "WalletConfig",
          "WalletType",
          "get",
          "SecurityLevel",
          "get",
          "Decimal",
          "str",
          "get",
          "Decimal",
          "str",
          "get",
          "get",
          "get",
          "get",
          "error"
        ]
      },
      {
        "name": "_initialize_web3_connections",
        "qualified_name": "WalletSecurityManager._initialize_web3_connections",
        "is_async": true,
        "lineno": 142,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "items",
          "get",
          "Web3",
          "HTTPProvider",
          "get",
          "inject",
          "is_connected",
          "info",
          "warning",
          "error"
        ]
      },
      {
        "name": "_load_security_policies",
        "qualified_name": "WalletSecurityManager._load_security_policies",
        "is_async": true,
        "lineno": 165,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "_setup_hardware_wallets",
        "qualified_name": "WalletSecurityManager._setup_hardware_wallets",
        "is_async": true,
        "lineno": 184,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "_verify_hardware_wallet",
          "error"
        ]
      },
      {
        "name": "_verify_hardware_wallet",
        "qualified_name": "WalletSecurityManager._verify_hardware_wallet",
        "is_async": true,
        "lineno": 194,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id",
          "wallet_config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "info",
          "sleep",
          "error"
        ]
      },
      {
        "name": "create_wallet",
        "qualified_name": "WalletSecurityManager.create_wallet",
        "is_async": true,
        "lineno": 210,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_type",
          "security_level",
          "derivation_path"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[str, str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "token_hex",
          "HDWallet",
          "generate_mnemonic",
          "from_mnemonic",
          "from_path",
          "private_key",
          "address",
          "encrypt_wallet_key",
          "encrypt_sensitive_data",
          "isoformat",
          "utcnow",
          "_save_wallet_data",
          "_setup_hardware_wallet_address",
          "ValueError",
          "WalletConfig",
          "info",
          "error"
        ]
      },
      {
        "name": "create_wallet_simple",
        "qualified_name": "WalletSecurityManager.create_wallet_simple",
        "is_async": true,
        "lineno": 279,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_type",
          "security_level"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[str, str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "create_wallet"
        ]
      },
      {
        "name": "_save_wallet_data",
        "qualified_name": "WalletSecurityManager._save_wallet_data",
        "is_async": true,
        "lineno": 298,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id",
          "wallet_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "encrypt_sensitive_data"
        ]
      },
      {
        "name": "_setup_hardware_wallet_address",
        "qualified_name": "WalletSecurityManager._setup_hardware_wallet_address",
        "is_async": true,
        "lineno": 306,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_type",
          "derivation_path"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "token_hex"
        ]
      },
      {
        "name": "sign_transaction",
        "qualified_name": "WalletSecurityManager.sign_transaction",
        "is_async": true,
        "lineno": 312,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id",
          "transaction_data",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_perform_security_checks",
          "ValueError",
          "get",
          "ValueError",
          "_check_transaction_limits",
          "get",
          "ValueError",
          "_sign_hot_wallet_transaction",
          "_sign_hardware_wallet_transaction",
          "_sign_multisig_transaction",
          "ValueError",
          "_log_transaction",
          "error"
        ]
      },
      {
        "name": "_perform_security_checks",
        "qualified_name": "WalletSecurityManager._perform_security_checks",
        "is_async": true,
        "lineno": 364,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id",
          "transaction_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "Decimal",
          "str",
          "get",
          "lower",
          "get",
          "lower",
          "_check_rate_limits"
        ]
      },
      {
        "name": "_check_transaction_limits",
        "qualified_name": "WalletSecurityManager._check_transaction_limits",
        "is_async": true,
        "lineno": 399,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id",
          "transaction_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "get",
          "date",
          "utcnow",
          "Decimal",
          "ValueError"
        ]
      },
      {
        "name": "_check_rate_limits",
        "qualified_name": "WalletSecurityManager._check_rate_limits",
        "is_async": true,
        "lineno": 416,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "utcnow",
          "timedelta",
          "get",
          "len",
          "append"
        ]
      },
      {
        "name": "_sign_hot_wallet_transaction",
        "qualified_name": "WalletSecurityManager._sign_hot_wallet_transaction",
        "is_async": true,
        "lineno": 438,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id",
          "transaction_data",
          "w3"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_wallet_data",
          "decrypt_wallet_key",
          "from_key",
          "get_transaction_count",
          "get",
          "int",
          "get",
          "get",
          "sign_transaction",
          "hex",
          "hex"
        ]
      },
      {
        "name": "_sign_hardware_wallet_transaction",
        "qualified_name": "WalletSecurityManager._sign_hardware_wallet_transaction",
        "is_async": true,
        "lineno": 467,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id",
          "transaction_data",
          "w3"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "info",
          "sleep",
          "token_hex",
          "token_hex"
        ]
      },
      {
        "name": "_sign_multisig_transaction",
        "qualified_name": "WalletSecurityManager._sign_multisig_transaction",
        "is_async": true,
        "lineno": 483,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id",
          "transaction_data",
          "w3"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "info",
          "token_hex",
          "token_hex"
        ]
      },
      {
        "name": "_get_wallet_data",
        "qualified_name": "WalletSecurityManager._get_wallet_data",
        "is_async": true,
        "lineno": 497,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_log_transaction",
        "qualified_name": "WalletSecurityManager._log_transaction",
        "is_async": true,
        "lineno": 506,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id",
          "transaction_data",
          "signed_tx"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "isoformat",
          "utcnow",
          "get",
          "get",
          "get",
          "get",
          "append",
          "info",
          "get"
        ]
      },
      {
        "name": "emergency_stop",
        "qualified_name": "WalletSecurityManager.emergency_stop",
        "is_async": true,
        "lineno": 521,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "reason"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "critical",
          "_lock_wallet",
          "_notify_emergency_contacts",
          "isoformat",
          "utcnow",
          "list",
          "keys",
          "append",
          "error"
        ]
      },
      {
        "name": "_lock_wallet",
        "qualified_name": "WalletSecurityManager._lock_wallet",
        "is_async": true,
        "lineno": 546,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id",
          "reason"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "warning"
        ]
      },
      {
        "name": "_notify_emergency_contacts",
        "qualified_name": "WalletSecurityManager._notify_emergency_contacts",
        "is_async": true,
        "lineno": 551,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "reason"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "info"
        ]
      },
      {
        "name": "rotate_keys",
        "qualified_name": "WalletSecurityManager.rotate_keys",
        "is_async": true,
        "lineno": 557,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "ValueError",
          "create",
          "hex",
          "encrypt_wallet_key",
          "isoformat",
          "utcnow",
          "_save_wallet_data",
          "info",
          "warning",
          "error"
        ]
      },
      {
        "name": "backup_wallet",
        "qualified_name": "WalletSecurityManager.backup_wallet",
        "is_async": true,
        "lineno": 596,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id",
          "backup_location"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "ValueError",
          "_get_wallet_data",
          "isoformat",
          "utcnow",
          "encrypt_sensitive_data",
          "info",
          "error"
        ]
      },
      {
        "name": "get_wallet_status",
        "qualified_name": "WalletSecurityManager.get_wallet_status",
        "is_async": false,
        "lineno": 628,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "wallet_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "date",
          "utcnow",
          "get",
          "Decimal",
          "utcnow",
          "len",
          "get",
          "float",
          "float",
          "float"
        ]
      },
      {
        "name": "cleanup",
        "qualified_name": "WalletSecurityManager.cleanup",
        "is_async": true,
        "lineno": 657,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "clear",
          "clear",
          "clear",
          "clear",
          "info",
          "error"
        ]
      },
      {
        "name": "encrypt_private_key",
        "qualified_name": "WalletSecurityManager.encrypt_private_key",
        "is_async": false,
        "lineno": 671,
        "scope": "class:WalletSecurityManager",
        "params": [
          "self",
          "private_key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "encrypt_wallet_key"
        ]
      }
    ],
    "found_classes": [
      "WalletType",
      "SecurityLevel",
      "WalletConfig",
      "TransactionApproval",
      "WalletSecurityManager"
    ],
    "class_bases": {
      "WalletType": [
        "Enum"
      ],
      "SecurityLevel": [
        "Enum"
      ],
      "WalletConfig": [],
      "TransactionApproval": [],
      "WalletSecurityManager": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "security/audit_logger.py": {
    "path": "security\\audit_logger.py",
    "exists": true,
    "expected": [
      {
        "name": "log_security_event",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "log_access",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "user",
          "resource",
          "action"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "log_transaction",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "tx_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_audit_trail",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "filters"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "AuditLogger.__init__",
        "is_async": false,
        "lineno": 89,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Path",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "urandom",
          "get",
          "get",
          "get",
          "utcnow",
          "mkdir",
          "info"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "AuditLogger.initialize",
        "is_async": true,
        "lineno": 130,
        "scope": "class:AuditLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "_load_compliance_rules",
          "_load_risk_patterns",
          "_start_background_tasks",
          "log_event",
          "info",
          "error"
        ]
      },
      {
        "name": "_load_compliance_rules",
        "qualified_name": "AuditLogger._load_compliance_rules",
        "is_async": true,
        "lineno": 154,
        "scope": "class:AuditLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "_load_risk_patterns",
        "qualified_name": "AuditLogger._load_risk_patterns",
        "is_async": true,
        "lineno": 180,
        "scope": "class:AuditLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_start_background_tasks",
        "qualified_name": "AuditLogger._start_background_tasks",
        "is_async": true,
        "lineno": 202,
        "scope": "class:AuditLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "create_task",
          "_flush_buffer_periodically",
          "create_task",
          "_cleanup_old_logs_periodically"
        ]
      },
      {
        "name": "_flush_buffer_periodically",
        "qualified_name": "AuditLogger._flush_buffer_periodically",
        "is_async": true,
        "lineno": 207,
        "scope": "class:AuditLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sleep",
          "_flush_buffer",
          "error"
        ]
      },
      {
        "name": "_cleanup_old_logs_periodically",
        "qualified_name": "AuditLogger._cleanup_old_logs_periodically",
        "is_async": true,
        "lineno": 219,
        "scope": "class:AuditLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sleep",
          "_cleanup_old_logs",
          "error"
        ]
      },
      {
        "name": "log_event",
        "qualified_name": "AuditLogger.log_event",
        "is_async": true,
        "lineno": 231,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "event_type",
          "severity",
          "status",
          "source",
          "action",
          "resource",
          "details",
          "user_id",
          "session_id",
          "ip_address",
          "user_agent",
          "correlation_id",
          "parent_event_id",
          "tags"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "str",
          "uuid4",
          "_calculate_risk_score",
          "AuditEvent",
          "utcnow",
          "_calculate_checksum",
          "append",
          "get",
          "get",
          "_check_compliance_rules",
          "_send_immediate_alert",
          "len",
          "_flush_buffer",
          "error"
        ]
      },
      {
        "name": "_calculate_risk_score",
        "qualified_name": "AuditLogger._calculate_risk_score",
        "is_async": true,
        "lineno": 314,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "event_type",
          "severity",
          "source",
          "action",
          "details",
          "ip_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "_check_risk_patterns",
          "min",
          "round"
        ]
      },
      {
        "name": "_check_risk_patterns",
        "qualified_name": "AuditLogger._check_risk_patterns",
        "is_async": true,
        "lineno": 352,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "event_type",
          "source",
          "details",
          "ip_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "utcnow",
          "get",
          "min"
        ]
      },
      {
        "name": "_calculate_checksum",
        "qualified_name": "AuditLogger._calculate_checksum",
        "is_async": false,
        "lineno": 379,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "asdict",
          "pop",
          "dumps",
          "HMAC",
          "SHA256",
          "default_backend",
          "update",
          "encode",
          "hex",
          "finalize"
        ]
      },
      {
        "name": "_verify_checksum",
        "qualified_name": "AuditLogger._verify_checksum",
        "is_async": false,
        "lineno": 394,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_calculate_checksum"
        ]
      },
      {
        "name": "_check_compliance_rules",
        "qualified_name": "AuditLogger._check_compliance_rules",
        "is_async": true,
        "lineno": 403,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_handle_compliance_violation",
          "error"
        ]
      },
      {
        "name": "_handle_compliance_violation",
        "qualified_name": "AuditLogger._handle_compliance_violation",
        "is_async": true,
        "lineno": 413,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "event",
          "rule"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "AuditEvent",
          "str",
          "uuid4",
          "utcnow",
          "_calculate_checksum",
          "append",
          "warning"
        ]
      },
      {
        "name": "_send_immediate_alert",
        "qualified_name": "AuditLogger._send_immediate_alert",
        "is_async": true,
        "lineno": 446,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "isoformat",
          "critical",
          "dumps",
          "error"
        ]
      },
      {
        "name": "_flush_buffer",
        "qualified_name": "AuditLogger._flush_buffer",
        "is_async": true,
        "lineno": 470,
        "scope": "class:AuditLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_get_current_log_file",
          "open",
          "dumps",
          "asdict",
          "write",
          "debug",
          "len",
          "clear",
          "utcnow",
          "error",
          "len"
        ]
      },
      {
        "name": "_get_current_log_file",
        "qualified_name": "AuditLogger._get_current_log_file",
        "is_async": true,
        "lineno": 495,
        "scope": "class:AuditLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Path",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "strftime",
          "utcnow",
          "exists",
          "stat",
          "strftime",
          "utcnow",
          "rename",
          "_compress_log_file"
        ]
      },
      {
        "name": "_compress_log_file",
        "qualified_name": "AuditLogger._compress_log_file",
        "is_async": true,
        "lineno": 513,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "log_file"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "with_suffix",
          "open",
          "open",
          "writelines",
          "unlink",
          "info",
          "error"
        ]
      },
      {
        "name": "_cleanup_old_logs",
        "qualified_name": "AuditLogger._cleanup_old_logs",
        "is_async": true,
        "lineno": 530,
        "scope": "class:AuditLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "utcnow",
          "timedelta",
          "glob",
          "split",
          "len",
          "strptime",
          "unlink",
          "info",
          "error"
        ]
      },
      {
        "name": "search_events",
        "qualified_name": "AuditLogger.search_events",
        "is_async": true,
        "lineno": 554,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "start_time",
          "end_time",
          "event_type",
          "severity",
          "user_id",
          "source",
          "ip_address",
          "correlation_id",
          "limit"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[AuditEvent]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "sorted",
          "glob",
          "len",
          "open",
          "open",
          "len",
          "loads",
          "strip",
          "AuditEvent",
          "_verify_checksum",
          "warning",
          "matches_criteria",
          "append",
          "warning",
          "error",
          "error"
        ]
      },
      {
        "name": "matches_criteria",
        "qualified_name": "AuditLogger.matches_criteria",
        "is_async": false,
        "lineno": 569,
        "scope": "class:AuditLogger",
        "params": [
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "generate_compliance_report",
        "qualified_name": "AuditLogger.generate_compliance_report",
        "is_async": true,
        "lineno": 633,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "start_date",
          "end_date",
          "report_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "search_events",
          "str",
          "uuid4",
          "isoformat",
          "utcnow",
          "isoformat",
          "isoformat",
          "len",
          "get",
          "get",
          "append",
          "asdict",
          "append",
          "asdict",
          "append",
          "asdict",
          "append",
          "asdict",
          "append",
          "append",
          "error"
        ]
      },
      {
        "name": "get_metrics",
        "qualified_name": "AuditLogger.get_metrics",
        "is_async": false,
        "lineno": 710,
        "scope": "class:AuditLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "copy",
          "len",
          "len",
          "str"
        ]
      },
      {
        "name": "cleanup",
        "qualified_name": "AuditLogger.cleanup",
        "is_async": true,
        "lineno": 721,
        "scope": "class:AuditLogger",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "cancel",
          "cancel",
          "_flush_buffer",
          "log_event",
          "_flush_buffer",
          "info",
          "error"
        ]
      },
      {
        "name": "log_security_event",
        "qualified_name": "AuditLogger.log_security_event",
        "is_async": true,
        "lineno": 761,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "event"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "log_event",
          "AuditSeverity",
          "get",
          "AuditStatus",
          "get",
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "log_access",
        "qualified_name": "AuditLogger.log_access",
        "is_async": true,
        "lineno": 775,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "user",
          "resource",
          "action"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "log_event"
        ]
      },
      {
        "name": "log_transaction",
        "qualified_name": "AuditLogger.log_transaction",
        "is_async": true,
        "lineno": 790,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "tx_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "log_event",
          "AuditStatus",
          "get",
          "get"
        ]
      },
      {
        "name": "get_audit_trail",
        "qualified_name": "AuditLogger.get_audit_trail",
        "is_async": true,
        "lineno": 804,
        "scope": "class:AuditLogger",
        "params": [
          "self",
          "filters"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "search_events",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "asdict"
        ]
      }
    ],
    "found_classes": [
      "AuditEventType",
      "AuditSeverity",
      "AuditStatus",
      "AuditEvent",
      "AuditLogger"
    ],
    "class_bases": {
      "AuditEventType": [
        "Enum"
      ],
      "AuditSeverity": [
        "Enum"
      ],
      "AuditStatus": [
        "Enum"
      ],
      "AuditEvent": [],
      "AuditLogger": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "config/__init__.py": {
    "path": "config\\__init__.py",
    "exists": true,
    "expected": [],
    "found_methods": [],
    "found_classes": [],
    "class_bases": {},
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "config/config_manager.py": {
    "path": "config\\config_manager.py",
    "exists": true,
    "expected": [
      {
        "name": "load_config",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "env"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "validate_config",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "update_config",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "key",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_config",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Any",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "reload_config",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "validate_position_size",
        "qualified_name": "TradingConfig.validate_position_size",
        "is_async": false,
        "lineno": 78,
        "scope": "class:TradingConfig",
        "params": [
          "cls",
          "v"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ValueError"
        ]
      },
      {
        "name": "validate_rate_limit",
        "qualified_name": "SecurityConfig.validate_rate_limit",
        "is_async": false,
        "lineno": 103,
        "scope": "class:SecurityConfig",
        "params": [
          "cls",
          "v"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ValueError"
        ]
      },
      {
        "name": "validate_portfolio_risk",
        "qualified_name": "RiskManagementConfig.validate_portfolio_risk",
        "is_async": false,
        "lineno": 212,
        "scope": "class:RiskManagementConfig",
        "params": [
          "cls",
          "v"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ValueError"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "ConfigManager.__init__",
        "is_async": false,
        "lineno": 228,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_dir"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Path",
          "mkdir",
          "info"
        ]
      },
      {
        "name": "initialize",
        "qualified_name": "ConfigManager.initialize",
        "is_async": true,
        "lineno": 259,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "encryption_key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "EncryptionManager",
          "_load_all_configs",
          "_start_auto_reload",
          "info",
          "error"
        ]
      },
      {
        "name": "_load_all_configs",
        "qualified_name": "ConfigManager._load_all_configs",
        "is_async": true,
        "lineno": 280,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "_load_config",
          "error",
          "_load_default_config"
        ]
      },
      {
        "name": "_load_config",
        "qualified_name": "ConfigManager._load_config",
        "is_async": true,
        "lineno": 290,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "schema_class",
          "update",
          "dict",
          "_load_config_from_file",
          "update",
          "_load_config_from_env",
          "update",
          "_load_config_from_database",
          "update",
          "_decrypt_sensitive_values",
          "schema_class",
          "info",
          "error",
          "warning"
        ]
      },
      {
        "name": "_load_config_from_file",
        "qualified_name": "ConfigManager._load_config_from_file",
        "is_async": true,
        "lineno": 331,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "exists",
          "exists",
          "open",
          "read",
          "stat",
          "str",
          "safe_load",
          "loads",
          "error"
        ]
      },
      {
        "name": "_load_config_from_env",
        "qualified_name": "ConfigManager._load_config_from_env",
        "is_async": false,
        "lineno": 358,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "upper",
          "items",
          "startswith",
          "lower",
          "len",
          "lower",
          "lower",
          "isdigit",
          "int",
          "_is_float",
          "float"
        ]
      },
      {
        "name": "_is_float",
        "qualified_name": "ConfigManager._is_float",
        "is_async": false,
        "lineno": 379,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "float"
        ]
      },
      {
        "name": "_load_config_from_database",
        "qualified_name": "ConfigManager._load_config_from_database",
        "is_async": true,
        "lineno": 387,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict]",
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "_decrypt_sensitive_values",
        "qualified_name": "ConfigManager._decrypt_sensitive_values",
        "is_async": false,
        "lineno": 393,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "isinstance",
          "items",
          "any",
          "lower",
          "isinstance",
          "startswith",
          "decrypt_sensitive_data",
          "warning",
          "decrypt_recursive",
          "isinstance",
          "decrypt_recursive",
          "decrypt_recursive",
          "copy"
        ]
      },
      {
        "name": "decrypt_recursive",
        "qualified_name": "ConfigManager.decrypt_recursive",
        "is_async": false,
        "lineno": 400,
        "scope": "class:ConfigManager",
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "items",
          "any",
          "lower",
          "isinstance",
          "startswith",
          "decrypt_sensitive_data",
          "warning",
          "decrypt_recursive",
          "isinstance",
          "decrypt_recursive"
        ]
      },
      {
        "name": "_load_default_config",
        "qualified_name": "ConfigManager._load_default_config",
        "is_async": true,
        "lineno": 417,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "schema_class",
          "info"
        ]
      },
      {
        "name": "_start_auto_reload",
        "qualified_name": "ConfigManager._start_auto_reload",
        "is_async": true,
        "lineno": 424,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "create_task",
          "_auto_reload_loop"
        ]
      },
      {
        "name": "_auto_reload_loop",
        "qualified_name": "ConfigManager._auto_reload_loop",
        "is_async": true,
        "lineno": 428,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "sleep",
          "_check_for_changes",
          "error"
        ]
      },
      {
        "name": "_check_for_changes",
        "qualified_name": "ConfigManager._check_for_changes",
        "is_async": true,
        "lineno": 440,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "items",
          "stat",
          "Path",
          "info",
          "Path",
          "_reload_config",
          "warning",
          "error"
        ]
      },
      {
        "name": "_reload_config",
        "qualified_name": "ConfigManager._reload_config",
        "is_async": true,
        "lineno": 469,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "_load_config",
          "get",
          "_track_config_changes",
          "_notify_config_watchers",
          "info",
          "error"
        ]
      },
      {
        "name": "_track_config_changes",
        "qualified_name": "ConfigManager._track_config_changes",
        "is_async": true,
        "lineno": 488,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type",
          "old_config",
          "new_config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "dict",
          "dict",
          "set",
          "keys",
          "set",
          "keys",
          "get",
          "get",
          "ConfigChange",
          "utcnow",
          "append",
          "info"
        ]
      },
      {
        "name": "_notify_config_watchers",
        "qualified_name": "ConfigManager._notify_config_watchers",
        "is_async": true,
        "lineno": 512,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type",
          "new_config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "iscoroutinefunction",
          "watcher",
          "watcher",
          "error"
        ]
      },
      {
        "name": "load_config",
        "qualified_name": "ConfigManager.load_config",
        "is_async": false,
        "lineno": 527,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "env"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "run",
          "_load_all_configs",
          "items",
          "hasattr",
          "dict"
        ]
      },
      {
        "name": "reload_config",
        "qualified_name": "ConfigManager.reload_config",
        "is_async": true,
        "lineno": 548,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "clear",
          "_load_all_configs",
          "items",
          "_notify_config_watchers"
        ]
      },
      {
        "name": "validate_config",
        "qualified_name": "ConfigManager.validate_config",
        "is_async": false,
        "lineno": 563,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "get",
          "schema_class"
        ]
      },
      {
        "name": "update_config",
        "qualified_name": "ConfigManager.update_config",
        "is_async": false,
        "lineno": 599,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "key",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "split",
          "len",
          "ValueError",
          "join",
          "ValueError",
          "run",
          "update_config_internal"
        ]
      },
      {
        "name": "get_config",
        "qualified_name": "ConfigManager.get_config",
        "is_async": false,
        "lineno": 632,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Any",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "split",
          "len",
          "ValueError",
          "len",
          "get",
          "dict",
          "get",
          "hasattr",
          "dict",
          "isinstance",
          "get"
        ]
      },
      {
        "name": "get_config_internal",
        "qualified_name": "ConfigManager.get_config_internal",
        "is_async": false,
        "lineno": 680,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[BaseModel]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "get_trading_config",
        "qualified_name": "ConfigManager.get_trading_config",
        "is_async": false,
        "lineno": 684,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "TradingConfig",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "TradingConfig"
        ]
      },
      {
        "name": "get_security_config",
        "qualified_name": "ConfigManager.get_security_config",
        "is_async": false,
        "lineno": 688,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "SecurityConfig",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "SecurityConfig"
        ]
      },
      {
        "name": "get_database_config",
        "qualified_name": "ConfigManager.get_database_config",
        "is_async": false,
        "lineno": 692,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "DatabaseConfig",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "DatabaseConfig"
        ]
      },
      {
        "name": "get_api_config",
        "qualified_name": "ConfigManager.get_api_config",
        "is_async": false,
        "lineno": 696,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "APIConfig",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "APIConfig"
        ]
      },
      {
        "name": "get_monitoring_config",
        "qualified_name": "ConfigManager.get_monitoring_config",
        "is_async": false,
        "lineno": 700,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "MonitoringConfig",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "MonitoringConfig"
        ]
      },
      {
        "name": "get_ml_models_config",
        "qualified_name": "ConfigManager.get_ml_models_config",
        "is_async": false,
        "lineno": 704,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "MLModelsConfig",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "MLModelsConfig"
        ]
      },
      {
        "name": "get_risk_management_config",
        "qualified_name": "ConfigManager.get_risk_management_config",
        "is_async": false,
        "lineno": 708,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "RiskManagementConfig",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "RiskManagementConfig"
        ]
      },
      {
        "name": "update_config_internal",
        "qualified_name": "ConfigManager.update_config_internal",
        "is_async": true,
        "lineno": 712,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type",
          "updates",
          "user",
          "reason",
          "persist"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "error",
          "dict",
          "items",
          "get",
          "append",
          "ConfigChange",
          "utcnow",
          "update",
          "get",
          "schema_class",
          "error",
          "error",
          "extend",
          "_persist_config",
          "_notify_config_watchers",
          "info",
          "len",
          "error"
        ]
      },
      {
        "name": "_persist_config",
        "qualified_name": "ConfigManager._persist_config",
        "is_async": true,
        "lineno": 779,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "dict",
          "_encrypt_sensitive_values",
          "open",
          "write",
          "dump",
          "stat",
          "str",
          "info",
          "error"
        ]
      },
      {
        "name": "_encrypt_sensitive_values",
        "qualified_name": "ConfigManager._encrypt_sensitive_values",
        "is_async": false,
        "lineno": 801,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "isinstance",
          "items",
          "any",
          "lower",
          "isinstance",
          "startswith",
          "encrypt_sensitive_data",
          "warning",
          "encrypt_recursive",
          "isinstance",
          "encrypt_recursive",
          "encrypt_recursive",
          "copy"
        ]
      },
      {
        "name": "encrypt_recursive",
        "qualified_name": "ConfigManager.encrypt_recursive",
        "is_async": false,
        "lineno": 808,
        "scope": "class:ConfigManager",
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "items",
          "any",
          "lower",
          "isinstance",
          "startswith",
          "encrypt_sensitive_data",
          "warning",
          "encrypt_recursive",
          "isinstance",
          "encrypt_recursive"
        ]
      },
      {
        "name": "register_watcher",
        "qualified_name": "ConfigManager.register_watcher",
        "is_async": false,
        "lineno": 825,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append",
          "info"
        ]
      },
      {
        "name": "unregister_watcher",
        "qualified_name": "ConfigManager.unregister_watcher",
        "is_async": false,
        "lineno": 833,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type",
          "callback"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "remove",
          "info"
        ]
      },
      {
        "name": "get_change_history",
        "qualified_name": "ConfigManager.get_change_history",
        "is_async": false,
        "lineno": 840,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type",
          "limit"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[ConfigChange]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "sorted"
        ]
      },
      {
        "name": "backup_configs",
        "qualified_name": "ConfigManager.backup_configs",
        "is_async": true,
        "lineno": 853,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "backup_path"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Path",
          "mkdir",
          "strftime",
          "utcnow",
          "items",
          "open",
          "write",
          "dump",
          "dict",
          "info",
          "error"
        ]
      },
      {
        "name": "restore_configs",
        "qualified_name": "ConfigManager.restore_configs",
        "is_async": true,
        "lineno": 874,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "backup_path"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Path",
          "exists",
          "error",
          "list",
          "glob",
          "max",
          "stat",
          "open",
          "read",
          "safe_load",
          "get",
          "schema_class",
          "info",
          "error",
          "error"
        ]
      },
      {
        "name": "validate_config_internal",
        "qualified_name": "ConfigManager.validate_config_internal",
        "is_async": false,
        "lineno": 912,
        "scope": "class:ConfigManager",
        "params": [
          "self",
          "config_type",
          "config_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[bool, Optional[str]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "schema_class",
          "str"
        ]
      },
      {
        "name": "get_config_status",
        "qualified_name": "ConfigManager.get_config_status",
        "is_async": false,
        "lineno": 925,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "list",
          "keys",
          "len",
          "len",
          "len",
          "items"
        ]
      },
      {
        "name": "cleanup",
        "qualified_name": "ConfigManager.cleanup",
        "is_async": true,
        "lineno": 938,
        "scope": "class:ConfigManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "cancel",
          "clear",
          "clear",
          "clear",
          "info",
          "error"
        ]
      }
    ],
    "found_classes": [
      "ConfigType",
      "ConfigSource",
      "ConfigChange",
      "TradingConfig",
      "SecurityConfig",
      "DatabaseConfig",
      "APIConfig",
      "MonitoringConfig",
      "MLModelsConfig",
      "RiskManagementConfig",
      "ConfigManager"
    ],
    "class_bases": {
      "ConfigType": [
        "Enum"
      ],
      "ConfigSource": [
        "Enum"
      ],
      "ConfigChange": [],
      "TradingConfig": [
        "BaseModel"
      ],
      "SecurityConfig": [
        "BaseModel"
      ],
      "DatabaseConfig": [
        "BaseModel"
      ],
      "APIConfig": [
        "BaseModel"
      ],
      "MonitoringConfig": [
        "BaseModel"
      ],
      "MLModelsConfig": [
        "BaseModel"
      ],
      "RiskManagementConfig": [
        "BaseModel"
      ],
      "ConfigManager": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "config/settings.py": {
    "path": "config\\settings.py",
    "exists": true,
    "expected": [
      {
        "name": "Settings",
        "kind": "class",
        "is_async": null,
        "visibility": null,
        "params": null,
        "has_varargs": null,
        "has_varkw": null,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_database_url",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_redis_url",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_chain_config",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "ChainConfig.__init__",
        "is_async": false,
        "lineno": 21,
        "scope": "class:ChainConfig",
        "params": [
          "self",
          "name",
          "chain_id",
          "rpc_url",
          "explorer_url",
          "native_token",
          "is_testnet"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "get_current_features",
        "qualified_name": "Settings.get_current_features",
        "is_async": false,
        "lineno": 408,
        "scope": "class:Settings",
        "params": [
          "cls"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, bool]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "is_feature_enabled",
        "qualified_name": "Settings.is_feature_enabled",
        "is_async": false,
        "lineno": 413,
        "scope": "class:Settings",
        "params": [
          "cls",
          "feature"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_current_features",
          "get"
        ]
      },
      {
        "name": "get_chain_config_exMethod",
        "qualified_name": "Settings.get_chain_config_exMethod",
        "is_async": false,
        "lineno": 419,
        "scope": "class:Settings",
        "params": [
          "cls",
          "chain_name"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[ChainConfig]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "get_chain_config",
        "qualified_name": "Settings.get_chain_config",
        "is_async": false,
        "lineno": 426,
        "scope": "class:Settings",
        "params": [
          "cls",
          "chain"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[ChainConfig]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_chain_config"
        ]
      },
      {
        "name": "get_dex_config",
        "qualified_name": "Settings.get_dex_config",
        "is_async": false,
        "lineno": 449,
        "scope": "class:Settings",
        "params": [
          "cls",
          "dex_name"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Dict[str, Any]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get"
        ]
      },
      {
        "name": "get_gas_config",
        "qualified_name": "Settings.get_gas_config",
        "is_async": false,
        "lineno": 454,
        "scope": "class:Settings",
        "params": [
          "cls",
          "chain_name",
          "speed"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "get"
        ]
      },
      {
        "name": "is_token_blacklisted",
        "qualified_name": "Settings.is_token_blacklisted",
        "is_async": false,
        "lineno": 460,
        "scope": "class:Settings",
        "params": [
          "cls",
          "token_address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "lower",
          "lower"
        ]
      },
      {
        "name": "get_stablecoin_address",
        "qualified_name": "Settings.get_stablecoin_address",
        "is_async": false,
        "lineno": 465,
        "scope": "class:Settings",
        "params": [
          "cls",
          "chain",
          "symbol"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get",
          "get"
        ]
      },
      {
        "name": "validate_environment",
        "qualified_name": "Settings.validate_environment",
        "is_async": false,
        "lineno": 470,
        "scope": "class:Settings",
        "params": [
          "cls"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "getenv",
          "ValueError"
        ]
      },
      {
        "name": "get_environment_info",
        "qualified_name": "Settings.get_environment_info",
        "is_async": false,
        "lineno": 492,
        "scope": "class:Settings",
        "params": [
          "cls"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "list",
          "keys",
          "list",
          "keys",
          "get_current_features",
          "str",
          "str",
          "str",
          "str",
          "str",
          "str"
        ]
      },
      {
        "name": "get_database_url",
        "qualified_name": "Settings.get_database_url",
        "is_async": false,
        "lineno": 513,
        "scope": "class:Settings",
        "params": [
          "cls"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "get_redis_url",
        "qualified_name": "Settings.get_redis_url",
        "is_async": false,
        "lineno": 518,
        "scope": "class:Settings",
        "params": [
          "cls"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": []
      }
    ],
    "found_classes": [
      "Environment",
      "ChainConfig",
      "Settings"
    ],
    "class_bases": {
      "Environment": [
        "Enum"
      ],
      "ChainConfig": [],
      "Settings": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "config/validation.py": {
    "path": "config\\validation.py",
    "exists": true,
    "expected": [
      {
        "name": "validate_trading_config",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "validate_security_config",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "validate_api_keys",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "keys"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "check_required_fields",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "ValidationResult.__init__",
        "is_async": false,
        "lineno": 23,
        "scope": "class:ValidationResult",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "add_error",
        "qualified_name": "ValidationResult.add_error",
        "is_async": false,
        "lineno": 29,
        "scope": "class:ValidationResult",
        "params": [
          "self",
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append"
        ]
      },
      {
        "name": "add_warning",
        "qualified_name": "ValidationResult.add_warning",
        "is_async": false,
        "lineno": 34,
        "scope": "class:ValidationResult",
        "params": [
          "self",
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append"
        ]
      },
      {
        "name": "add_recommendation",
        "qualified_name": "ValidationResult.add_recommendation",
        "is_async": false,
        "lineno": 38,
        "scope": "class:ValidationResult",
        "params": [
          "self",
          "message"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append"
        ]
      },
      {
        "name": "merge",
        "qualified_name": "ValidationResult.merge",
        "is_async": false,
        "lineno": 42,
        "scope": "class:ValidationResult",
        "params": [
          "self",
          "other"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "extend",
          "extend",
          "extend"
        ]
      },
      {
        "name": "to_dict",
        "qualified_name": "ValidationResult.to_dict",
        "is_async": false,
        "lineno": 50,
        "scope": "class:ValidationResult",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "__init__",
        "qualified_name": "ConfigValidator.__init__",
        "is_async": false,
        "lineno": 70,
        "scope": "class:ConfigValidator",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "validate_config",
        "qualified_name": "ConfigValidator.validate_config",
        "is_async": false,
        "lineno": 81,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "config_type",
          "config_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "ValidationResult",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ValidationResult",
          "get",
          "add_error",
          "validator_func",
          "_validate_cross_config",
          "add_error",
          "str"
        ]
      },
      {
        "name": "_validate_trading_config",
        "qualified_name": "ConfigValidator._validate_trading_config",
        "is_async": false,
        "lineno": 104,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "config",
          "result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "add_recommendation",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_error",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_error",
          "get",
          "add_error"
        ]
      },
      {
        "name": "_validate_security_config",
        "qualified_name": "ConfigValidator._validate_security_config",
        "is_async": false,
        "lineno": 172,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "config",
          "result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_recommendation",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "get",
          "isinstance",
          "add_error",
          "add_warning"
        ]
      },
      {
        "name": "_validate_database_config",
        "qualified_name": "ConfigValidator._validate_database_config",
        "is_async": false,
        "lineno": 231,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "config",
          "result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "add_error",
          "_is_valid_hostname",
          "add_error",
          "get",
          "isinstance",
          "add_error",
          "get",
          "add_error",
          "match",
          "add_error",
          "get",
          "add_error",
          "get",
          "add_error",
          "len",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "get",
          "isinstance",
          "add_error",
          "add_warning"
        ]
      },
      {
        "name": "_validate_api_config",
        "qualified_name": "ConfigValidator._validate_api_config",
        "is_async": false,
        "lineno": 284,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "config",
          "result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "add_error",
          "_is_valid_ip",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "len",
          "add_warning",
          "add_warning",
          "get",
          "add_error",
          "len",
          "add_error",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "get",
          "isinstance",
          "add_error"
        ]
      },
      {
        "name": "_validate_monitoring_config",
        "qualified_name": "ConfigValidator._validate_monitoring_config",
        "is_async": false,
        "lineno": 342,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "config",
          "result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "isinstance",
          "add_error",
          "get",
          "isinstance",
          "add_error",
          "get",
          "add_error",
          "get",
          "add_error",
          "get",
          "match",
          "add_error",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "match",
          "add_error",
          "get",
          "match",
          "str",
          "add_error",
          "get",
          "_is_valid_url",
          "add_error",
          "add_warning",
          "get",
          "_is_valid_hostname",
          "add_error",
          "get",
          "_is_valid_email",
          "add_error"
        ]
      },
      {
        "name": "_validate_ml_models_config",
        "qualified_name": "ConfigValidator._validate_ml_models_config",
        "is_async": false,
        "lineno": 408,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "config",
          "result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "get",
          "isinstance",
          "add_error",
          "get",
          "isinstance",
          "add_error",
          "get",
          "isinstance",
          "add_error",
          "get",
          "isinstance",
          "add_error"
        ]
      },
      {
        "name": "_validate_risk_management_config",
        "qualified_name": "ConfigValidator._validate_risk_management_config",
        "is_async": false,
        "lineno": 459,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "config",
          "result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "add_error",
          "get",
          "isinstance",
          "add_error",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "add_warning",
          "get",
          "isinstance",
          "add_error",
          "add_warning",
          "add_warning"
        ]
      },
      {
        "name": "_validate_cross_config",
        "qualified_name": "ConfigValidator._validate_cross_config",
        "is_async": false,
        "lineno": 519,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "config_type",
          "config",
          "result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "None",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "get",
          "get",
          "add_warning",
          "get",
          "get",
          "add_warning",
          "get",
          "get",
          "get",
          "add_warning",
          "sum",
          "get",
          "get",
          "get",
          "get",
          "add_warning"
        ]
      },
      {
        "name": "_is_valid_hostname",
        "qualified_name": "ConfigValidator._is_valid_hostname",
        "is_async": false,
        "lineno": 556,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "hostname"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "len",
          "endswith",
          "split",
          "len",
          "match"
        ]
      },
      {
        "name": "_is_valid_ip",
        "qualified_name": "ConfigValidator._is_valid_ip",
        "is_async": false,
        "lineno": 575,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "ip"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "ip_address"
        ]
      },
      {
        "name": "_is_valid_url",
        "qualified_name": "ConfigValidator._is_valid_url",
        "is_async": false,
        "lineno": 583,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "url"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "urlparse",
          "all"
        ]
      },
      {
        "name": "_is_valid_email",
        "qualified_name": "ConfigValidator._is_valid_email",
        "is_async": false,
        "lineno": 591,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "email"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "private",
        "decorators": [],
        "calls": [
          "match"
        ]
      },
      {
        "name": "validate_ethereum_address",
        "qualified_name": "ConfigValidator.validate_ethereum_address",
        "is_async": false,
        "lineno": 597,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "match",
          "is_address"
        ]
      },
      {
        "name": "validate_private_key",
        "qualified_name": "ConfigValidator.validate_private_key",
        "is_async": false,
        "lineno": 612,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "private_key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "startswith",
          "match"
        ]
      },
      {
        "name": "validate_percentage",
        "qualified_name": "ConfigValidator.validate_percentage",
        "is_async": false,
        "lineno": 624,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "value",
          "min_val",
          "max_val"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "endswith",
          "float",
          "float",
          "isinstance",
          "float"
        ]
      },
      {
        "name": "validate_decimal_string",
        "qualified_name": "ConfigValidator.validate_decimal_string",
        "is_async": false,
        "lineno": 641,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal"
        ]
      },
      {
        "name": "validate_json_config",
        "qualified_name": "ConfigValidator.validate_json_config",
        "is_async": false,
        "lineno": 649,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "config_str"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[bool, Optional[Dict], Optional[str]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "loads",
          "isinstance",
          "str",
          "str"
        ]
      },
      {
        "name": "validate_yaml_config",
        "qualified_name": "ConfigValidator.validate_yaml_config",
        "is_async": false,
        "lineno": 662,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "config_str"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Tuple[bool, Optional[Dict], Optional[str]]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "safe_load",
          "isinstance",
          "str",
          "str"
        ]
      },
      {
        "name": "generate_validation_report",
        "qualified_name": "ConfigValidator.generate_validation_report",
        "is_async": false,
        "lineno": 675,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "configs"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isoformat",
          "utcnow",
          "len",
          "items",
          "validate_config",
          "to_dict",
          "extend",
          "extend",
          "extend"
        ]
      },
      {
        "name": "validate_api_keys",
        "qualified_name": "ConfigValidator.validate_api_keys",
        "is_async": false,
        "lineno": 710,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "keys"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "len"
        ]
      },
      {
        "name": "check_required_fields",
        "qualified_name": "ConfigValidator.check_required_fields",
        "is_async": false,
        "lineno": 724,
        "scope": "class:ConfigValidator",
        "params": [
          "self",
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[str]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "items",
          "get",
          "append"
        ]
      },
      {
        "name": "validate_trading_config",
        "qualified_name": "validate_trading_config",
        "is_async": false,
        "lineno": 747,
        "scope": "module",
        "params": [
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ConfigValidator",
          "_validate_trading_config",
          "ValidationResult",
          "hasattr"
        ]
      },
      {
        "name": "validate_security_config",
        "qualified_name": "validate_security_config",
        "is_async": false,
        "lineno": 762,
        "scope": "module",
        "params": [
          "config"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ConfigValidator",
          "_validate_security_config",
          "ValidationResult",
          "hasattr"
        ]
      }
    ],
    "found_classes": [
      "ValidationResult",
      "ConfigValidator"
    ],
    "class_bases": {
      "ValidationResult": [],
      "ConfigValidator": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "utils/__init__.py": {
    "path": "utils\\__init__.py",
    "exists": true,
    "expected": [],
    "found_methods": [],
    "found_classes": [],
    "class_bases": {},
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "utils/helpers.py": {
    "path": "utils\\helpers.py",
    "exists": true,
    "expected": [
      {
        "name": "retry_async",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "max_retries",
          "delay",
          "exponential_backoff"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "measure_time",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "func"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "rate_limit",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "calls",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "is_valid_address",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "normalize_address",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "wei_to_ether",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "wei"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "ether_to_wei",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "ether"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "format_token_amount",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "amount",
          "decimals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_percentage_change",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "old_value",
          "new_value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_slippage",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "expected_price",
          "actual_price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_profit_loss",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "entry_price",
          "exit_price",
          "amount",
          "fees"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_moving_average",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "values",
          "window"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "calculate_ema",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "values",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "get_timestamp",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "format_timestamp",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "timestamp",
          "fmt"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "parse_timeframe",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "timeframe"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "timedelta",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "is_market_hours",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "timezone_str"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "fetch_json",
        "kind": "function",
        "is_async": true,
        "visibility": null,
        "params": [
          "url",
          "headers",
          "timeout"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "generate_signature",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "message",
          "secret"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "hash_data",
        "kind": "function",
        "is_async": false,
        "visibility": null,
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "TTLCache",
        "kind": "class",
        "is_async": null,
        "visibility": null,
        "params": null,
        "has_varargs": null,
        "has_varkw": null,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [
      {
        "name": "retry_async",
        "qualified_name": "retry_async",
        "is_async": false,
        "lineno": 25,
        "scope": "module",
        "params": [
          "max_retries",
          "delay",
          "exponential_backoff"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "range",
          "func",
          "warning",
          "sleep",
          "wraps"
        ]
      },
      {
        "name": "decorator",
        "qualified_name": "retry_async.decorator",
        "is_async": false,
        "lineno": 27,
        "scope": "func:retry_async",
        "params": [
          "func"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "range",
          "func",
          "warning",
          "sleep",
          "wraps"
        ]
      },
      {
        "name": "async_wrapper",
        "qualified_name": "decorator.async_wrapper",
        "is_async": true,
        "lineno": 29,
        "scope": "func:decorator",
        "params": [],
        "has_varargs": true,
        "has_varkw": true,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "range",
          "func",
          "warning",
          "sleep"
        ]
      },
      {
        "name": "measure_time",
        "qualified_name": "measure_time",
        "is_async": false,
        "lineno": 43,
        "scope": "module",
        "params": [
          "func"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "perf_counter",
          "func",
          "perf_counter",
          "debug",
          "wraps",
          "perf_counter",
          "func",
          "perf_counter",
          "debug",
          "wraps",
          "iscoroutinefunction"
        ]
      },
      {
        "name": "async_wrapper",
        "qualified_name": "measure_time.async_wrapper",
        "is_async": true,
        "lineno": 46,
        "scope": "func:measure_time",
        "params": [],
        "has_varargs": true,
        "has_varkw": true,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "perf_counter",
          "func",
          "perf_counter",
          "debug"
        ]
      },
      {
        "name": "sync_wrapper",
        "qualified_name": "measure_time.sync_wrapper",
        "is_async": false,
        "lineno": 56,
        "scope": "func:measure_time",
        "params": [],
        "has_varargs": true,
        "has_varkw": true,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "perf_counter",
          "func",
          "perf_counter",
          "debug"
        ]
      },
      {
        "name": "rate_limit",
        "qualified_name": "rate_limit",
        "is_async": false,
        "lineno": 67,
        "scope": "module",
        "params": [
          "calls",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "time",
          "len",
          "sleep",
          "append",
          "time",
          "func",
          "wraps"
        ]
      },
      {
        "name": "decorator",
        "qualified_name": "rate_limit.decorator",
        "is_async": false,
        "lineno": 69,
        "scope": "func:rate_limit",
        "params": [
          "func"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "time",
          "len",
          "sleep",
          "append",
          "time",
          "func",
          "wraps"
        ]
      },
      {
        "name": "wrapper",
        "qualified_name": "decorator.wrapper",
        "is_async": true,
        "lineno": 73,
        "scope": "func:decorator",
        "params": [],
        "has_varargs": true,
        "has_varkw": true,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "time",
          "len",
          "sleep",
          "append",
          "time",
          "func"
        ]
      },
      {
        "name": "is_valid_address",
        "qualified_name": "is_valid_address",
        "is_async": false,
        "lineno": 92,
        "scope": "module",
        "params": [
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "to_checksum_address"
        ]
      },
      {
        "name": "normalize_address",
        "qualified_name": "normalize_address",
        "is_async": false,
        "lineno": 100,
        "scope": "module",
        "params": [
          "address"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "to_checksum_address",
          "lower"
        ]
      },
      {
        "name": "wei_to_ether",
        "qualified_name": "wei_to_ether",
        "is_async": false,
        "lineno": 107,
        "scope": "module",
        "params": [
          "wei"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "Decimal"
        ]
      },
      {
        "name": "ether_to_wei",
        "qualified_name": "ether_to_wei",
        "is_async": false,
        "lineno": 111,
        "scope": "module",
        "params": [
          "ether"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "int",
          "Decimal",
          "str",
          "Decimal"
        ]
      },
      {
        "name": "format_token_amount",
        "qualified_name": "format_token_amount",
        "is_async": false,
        "lineno": 115,
        "scope": "module",
        "params": [
          "amount",
          "decimals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "str",
          "Decimal"
        ]
      },
      {
        "name": "to_base_unit",
        "qualified_name": "to_base_unit",
        "is_async": false,
        "lineno": 119,
        "scope": "module",
        "params": [
          "amount",
          "decimals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "int",
          "Decimal",
          "str",
          "Decimal"
        ]
      },
      {
        "name": "calculate_percentage_change",
        "qualified_name": "calculate_percentage_change",
        "is_async": false,
        "lineno": 125,
        "scope": "module",
        "params": [
          "old_value",
          "new_value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal"
        ]
      },
      {
        "name": "calculate_slippage",
        "qualified_name": "calculate_slippage",
        "is_async": false,
        "lineno": 131,
        "scope": "module",
        "params": [
          "expected_price",
          "actual_price"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "abs"
        ]
      },
      {
        "name": "round_to_significant_digits",
        "qualified_name": "round_to_significant_digits",
        "is_async": false,
        "lineno": 137,
        "scope": "module",
        "params": [
          "value",
          "sig_digits"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Decimal",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "int",
          "floor",
          "log10",
          "abs",
          "float",
          "quantize",
          "Decimal"
        ]
      },
      {
        "name": "calculate_profit_loss",
        "qualified_name": "calculate_profit_loss",
        "is_async": false,
        "lineno": 146,
        "scope": "module",
        "params": [
          "entry_price",
          "exit_price",
          "amount",
          "fees"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict[str, Decimal]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "calculate_percentage_change"
        ]
      },
      {
        "name": "calculate_moving_average",
        "qualified_name": "calculate_moving_average",
        "is_async": false,
        "lineno": 162,
        "scope": "module",
        "params": [
          "values",
          "window"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "float",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "float",
          "mean",
          "float",
          "mean"
        ]
      },
      {
        "name": "calculate_ema",
        "qualified_name": "calculate_ema",
        "is_async": false,
        "lineno": 168,
        "scope": "module",
        "params": [
          "values",
          "period"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[float]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "append",
          "sum",
          "append",
          "sum",
          "len",
          "range",
          "len",
          "append",
          "sum",
          "append"
        ]
      },
      {
        "name": "get_timestamp",
        "qualified_name": "get_timestamp",
        "is_async": false,
        "lineno": 193,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "int",
          "time"
        ]
      },
      {
        "name": "get_timestamp_ms",
        "qualified_name": "get_timestamp_ms",
        "is_async": false,
        "lineno": 197,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "int",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "int",
          "time"
        ]
      },
      {
        "name": "format_timestamp",
        "qualified_name": "format_timestamp",
        "is_async": false,
        "lineno": 201,
        "scope": "module",
        "params": [
          "timestamp",
          "fmt"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "strftime",
          "fromtimestamp"
        ]
      },
      {
        "name": "parse_timeframe",
        "qualified_name": "parse_timeframe",
        "is_async": false,
        "lineno": 205,
        "scope": "module",
        "params": [
          "timeframe"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "timedelta",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "timedelta",
          "int",
          "timedelta",
          "int",
          "timedelta",
          "int",
          "timedelta",
          "int",
          "timedelta",
          "int",
          "items",
          "match",
          "lower",
          "func",
          "group",
          "ValueError"
        ]
      },
      {
        "name": "is_market_hours",
        "qualified_name": "is_market_hours",
        "is_async": false,
        "lineno": 222,
        "scope": "module",
        "params": [
          "timezone_str"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now"
        ]
      },
      {
        "name": "format_number",
        "qualified_name": "format_number",
        "is_async": false,
        "lineno": 233,
        "scope": "module",
        "params": [
          "value",
          "decimals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "Decimal",
          "str"
        ]
      },
      {
        "name": "format_currency",
        "qualified_name": "format_currency",
        "is_async": false,
        "lineno": 241,
        "scope": "module",
        "params": [
          "value",
          "symbol",
          "decimals"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "format_number"
        ]
      },
      {
        "name": "truncate_string",
        "qualified_name": "truncate_string",
        "is_async": false,
        "lineno": 246,
        "scope": "module",
        "params": [
          "text",
          "max_length",
          "suffix"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "len"
        ]
      },
      {
        "name": "safe_json_loads",
        "qualified_name": "safe_json_loads",
        "is_async": false,
        "lineno": 252,
        "scope": "module",
        "params": [
          "json_str",
          "default"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Any",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "loads"
        ]
      },
      {
        "name": "deep_merge_dicts",
        "qualified_name": "deep_merge_dicts",
        "is_async": false,
        "lineno": 259,
        "scope": "module",
        "params": [
          "dict1",
          "dict2"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "copy",
          "items",
          "isinstance",
          "isinstance",
          "deep_merge_dicts"
        ]
      },
      {
        "name": "validate_token_symbol",
        "qualified_name": "validate_token_symbol",
        "is_async": false,
        "lineno": 273,
        "scope": "module",
        "params": [
          "symbol"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "bool",
          "match",
          "upper"
        ]
      },
      {
        "name": "validate_chain_id",
        "qualified_name": "validate_chain_id",
        "is_async": false,
        "lineno": 278,
        "scope": "module",
        "params": [
          "chain_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "int"
        ]
      },
      {
        "name": "sanitize_input",
        "qualified_name": "sanitize_input",
        "is_async": false,
        "lineno": 286,
        "scope": "module",
        "params": [
          "value",
          "max_length"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "sub"
        ]
      },
      {
        "name": "fetch_json",
        "qualified_name": "fetch_json",
        "is_async": true,
        "lineno": 296,
        "scope": "module",
        "params": [
          "url",
          "headers",
          "timeout"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ClientSession",
          "get",
          "raise_for_status",
          "json"
        ]
      },
      {
        "name": "batch_request",
        "qualified_name": "batch_request",
        "is_async": true,
        "lineno": 304,
        "scope": "module",
        "params": [
          "urls",
          "max_concurrent"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Semaphore",
          "fetch_json",
          "error",
          "gather",
          "fetch_with_semaphore"
        ]
      },
      {
        "name": "fetch_with_semaphore",
        "qualified_name": "batch_request.fetch_with_semaphore",
        "is_async": true,
        "lineno": 308,
        "scope": "func:batch_request",
        "params": [
          "url"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "fetch_json",
          "error"
        ]
      },
      {
        "name": "generate_signature",
        "qualified_name": "generate_signature",
        "is_async": false,
        "lineno": 321,
        "scope": "module",
        "params": [
          "message",
          "secret"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "hexdigest",
          "new",
          "encode",
          "encode"
        ]
      },
      {
        "name": "hash_data",
        "qualified_name": "hash_data",
        "is_async": false,
        "lineno": 329,
        "scope": "module",
        "params": [
          "data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "hexdigest",
          "sha256",
          "encode"
        ]
      },
      {
        "name": "mask_sensitive_data",
        "qualified_name": "mask_sensitive_data",
        "is_async": false,
        "lineno": 333,
        "scope": "module",
        "params": [
          "data",
          "visible_chars"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "len",
          "len",
          "len"
        ]
      },
      {
        "name": "chunk_list",
        "qualified_name": "chunk_list",
        "is_async": false,
        "lineno": 342,
        "scope": "module",
        "params": [
          "lst",
          "chunk_size"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[List]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "range",
          "len"
        ]
      },
      {
        "name": "process_in_chunks",
        "qualified_name": "process_in_chunks",
        "is_async": true,
        "lineno": 346,
        "scope": "module",
        "params": [
          "items",
          "processor",
          "chunk_size"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "chunk_list",
          "gather",
          "processor",
          "extend"
        ]
      },
      {
        "name": "__init__",
        "qualified_name": "TTLCache.__init__",
        "is_async": false,
        "lineno": 359,
        "scope": "class:TTLCache",
        "params": [
          "self",
          "ttl"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": []
      },
      {
        "name": "get",
        "qualified_name": "TTLCache.get",
        "is_async": false,
        "lineno": 364,
        "scope": "class:TTLCache",
        "params": [
          "self",
          "key"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Optional[Any]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "time"
        ]
      },
      {
        "name": "set",
        "qualified_name": "TTLCache.set",
        "is_async": false,
        "lineno": 374,
        "scope": "class:TTLCache",
        "params": [
          "self",
          "key",
          "value"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "time"
        ]
      },
      {
        "name": "clear",
        "qualified_name": "TTLCache.clear",
        "is_async": false,
        "lineno": 379,
        "scope": "class:TTLCache",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "clear",
          "clear"
        ]
      }
    ],
    "found_classes": [
      "TTLCache"
    ],
    "class_bases": {
      "TTLCache": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "utils/constants.py": {
    "path": "utils\\constants.py",
    "exists": true,
    "expected": [
      {
        "name": "Chain",
        "kind": "class",
        "is_async": null,
        "visibility": null,
        "params": null,
        "has_varargs": null,
        "has_varkw": null,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "DEX",
        "kind": "class",
        "is_async": null,
        "visibility": null,
        "params": null,
        "has_varargs": null,
        "has_varkw": null,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      },
      {
        "name": "TradingMode",
        "kind": "class",
        "is_async": null,
        "visibility": null,
        "params": null,
        "has_varargs": null,
        "has_varkw": null,
        "returns": null,
        "wrapper_for": null,
        "decorators": null
      }
    ],
    "found_methods": [],
    "found_classes": [
      "Chain",
      "DEX",
      "TradingMode",
      "SignalStrength",
      "MarketCondition",
      "OrderType",
      "OrderStatus"
    ],
    "class_bases": {
      "Chain": [
        "IntEnum"
      ],
      "DEX": [
        "Enum"
      ],
      "TradingMode": [
        "Enum"
      ],
      "SignalStrength": [
        "Enum"
      ],
      "MarketCondition": [
        "Enum"
      ],
      "OrderType": [
        "Enum"
      ],
      "OrderStatus": [
        "Enum"
      ]
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "tests/conftest.py": {
    "path": "tests\\conftest.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "event_loop",
        "qualified_name": "event_loop",
        "is_async": false,
        "lineno": 51,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "new_event_loop",
          "get_event_loop_policy",
          "close"
        ]
      },
      {
        "name": "db_manager",
        "qualified_name": "db_manager",
        "is_async": true,
        "lineno": 58,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DatabaseManager",
          "connect",
          "acquire",
          "execute",
          "disconnect"
        ]
      },
      {
        "name": "cache_manager",
        "qualified_name": "cache_manager",
        "is_async": true,
        "lineno": 71,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "CacheManager",
          "connect",
          "flushdb",
          "disconnect"
        ]
      },
      {
        "name": "config_manager",
        "qualified_name": "config_manager",
        "is_async": true,
        "lineno": 83,
        "scope": "module",
        "params": [
          "tmp_path"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "mkdir",
          "ConfigManager",
          "str",
          "initialize"
        ]
      },
      {
        "name": "risk_manager",
        "qualified_name": "risk_manager",
        "is_async": false,
        "lineno": 97,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "RiskManager"
        ]
      },
      {
        "name": "wallet_security",
        "qualified_name": "wallet_security",
        "is_async": true,
        "lineno": 102,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "WalletSecurityManager",
          "initialize"
        ]
      },
      {
        "name": "audit_logger",
        "qualified_name": "audit_logger",
        "is_async": true,
        "lineno": 109,
        "scope": "module",
        "params": [
          "tmp_path"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "mkdir",
          "AuditLogger",
          "str",
          "initialize"
        ]
      },
      {
        "name": "mock_dex_api",
        "qualified_name": "mock_dex_api",
        "is_async": false,
        "lineno": 122,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "mock_market_data",
        "qualified_name": "mock_market_data",
        "is_async": false,
        "lineno": 151,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "now",
          "timedelta",
          "Decimal",
          "range",
          "now",
          "timedelta",
          "Decimal",
          "Decimal",
          "range"
        ]
      },
      {
        "name": "sample_trading_opportunity",
        "qualified_name": "sample_trading_opportunity",
        "is_async": false,
        "lineno": 178,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "sample_position",
        "qualified_name": "sample_position",
        "is_async": false,
        "lineno": 199,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal",
          "Decimal",
          "now",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "mock_web3",
        "qualified_name": "mock_web3",
        "is_async": true,
        "lineno": 218,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "AsyncMock",
          "AsyncMock",
          "AsyncMock"
        ]
      },
      {
        "name": "mock_dex_client",
        "qualified_name": "mock_dex_client",
        "is_async": true,
        "lineno": 227,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "AsyncMock",
          "AsyncMock",
          "Decimal",
          "AsyncMock"
        ]
      },
      {
        "name": "benchmark_data",
        "qualified_name": "benchmark_data",
        "is_async": false,
        "lineno": 239,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "timedelta",
          "Decimal",
          "range",
          "range",
          "Decimal",
          "Decimal",
          "range"
        ]
      },
      {
        "name": "create_mock_token",
        "qualified_name": "create_mock_token",
        "is_async": false,
        "lineno": 262,
        "scope": "module",
        "params": [
          "address"
        ],
        "has_varargs": false,
        "has_varkw": true,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "update"
        ]
      },
      {
        "name": "create_mock_trade",
        "qualified_name": "create_mock_trade",
        "is_async": false,
        "lineno": 278,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": true,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal",
          "Decimal",
          "now",
          "update"
        ]
      },
      {
        "name": "populate_test_database",
        "qualified_name": "populate_test_database",
        "is_async": true,
        "lineno": 294,
        "scope": "module",
        "params": [
          "db_manager",
          "num_records"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "range",
          "save_trade",
          "create_mock_trade",
          "save_position",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "cleanup",
        "qualified_name": "cleanup",
        "is_async": true,
        "lineno": 310,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": []
      }
    ],
    "found_classes": [],
    "class_bases": {},
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "tests/unit/test_engine.py": {
    "path": "tests\\unit\\test_engine.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "engine",
        "qualified_name": "TestTradingBotEngine.engine",
        "is_async": false,
        "lineno": 20,
        "scope": "class:TestTradingBotEngine",
        "params": [
          "self",
          "risk_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "TradingBotEngine",
          "AsyncMock",
          "AsyncMock",
          "AsyncMock",
          "AsyncMock",
          "AsyncMock"
        ]
      },
      {
        "name": "test_engine_initialization",
        "qualified_name": "TestTradingBotEngine.test_engine_initialization",
        "is_async": true,
        "lineno": 32,
        "scope": "class:TestTradingBotEngine",
        "params": [
          "self",
          "engine"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": []
      },
      {
        "name": "test_start_stop",
        "qualified_name": "TestTradingBotEngine.test_start_stop",
        "is_async": true,
        "lineno": 40,
        "scope": "class:TestTradingBotEngine",
        "params": [
          "self",
          "engine"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "AsyncMock",
          "create_task",
          "start",
          "sleep",
          "len",
          "stop"
        ]
      },
      {
        "name": "test_analyze_opportunity",
        "qualified_name": "TestTradingBotEngine.test_analyze_opportunity",
        "is_async": true,
        "lineno": 58,
        "scope": "class:TestTradingBotEngine",
        "params": [
          "self",
          "engine",
          "mock_dex_api"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "Decimal",
          "Decimal",
          "AsyncMock",
          "AsyncMock",
          "Decimal",
          "AsyncMock",
          "_analyze_opportunity"
        ]
      },
      {
        "name": "test_execute_opportunity",
        "qualified_name": "TestTradingBotEngine.test_execute_opportunity",
        "is_async": true,
        "lineno": 99,
        "scope": "class:TestTradingBotEngine",
        "params": [
          "self",
          "engine",
          "sample_trading_opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "Decimal",
          "AsyncMock",
          "AsyncMock",
          "AsyncMock",
          "_execute_opportunity",
          "assert_called_once",
          "assert_called_once",
          "assert_called_once"
        ]
      },
      {
        "name": "test_monitor_positions",
        "qualified_name": "TestTradingBotEngine.test_monitor_positions",
        "is_async": true,
        "lineno": 121,
        "scope": "class:TestTradingBotEngine",
        "params": [
          "self",
          "engine",
          "sample_position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "AsyncMock",
          "Decimal",
          "Decimal",
          "AsyncMock",
          "AsyncMock",
          "AsyncMock",
          "_monitor_existing_positions",
          "assert_called_once_with"
        ]
      },
      {
        "name": "test_safety_checks",
        "qualified_name": "TestTradingBotEngine.test_safety_checks",
        "is_async": true,
        "lineno": 145,
        "scope": "class:TestTradingBotEngine",
        "params": [
          "self",
          "engine",
          "sample_trading_opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "AsyncMock",
          "AsyncMock",
          "_final_safety_checks",
          "AsyncMock",
          "_final_safety_checks"
        ]
      },
      {
        "name": "test_close_position",
        "qualified_name": "TestTradingBotEngine.test_close_position",
        "is_async": true,
        "lineno": 161,
        "scope": "class:TestTradingBotEngine",
        "params": [
          "self",
          "engine",
          "sample_position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "AsyncMock",
          "AsyncMock",
          "Decimal",
          "AsyncMock",
          "_close_position",
          "assert_called_once",
          "assert_called_once",
          "assert_called_once"
        ]
      },
      {
        "name": "test_error_handling",
        "qualified_name": "TestTradingBotEngine.test_error_handling",
        "is_async": true,
        "lineno": 177,
        "scope": "class:TestTradingBotEngine",
        "params": [
          "self",
          "engine"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "Exception",
          "AsyncMock",
          "create_task",
          "start",
          "sleep",
          "assert_called",
          "stop"
        ]
      }
    ],
    "found_classes": [
      "TestTradingBotEngine"
    ],
    "class_bases": {
      "TestTradingBotEngine": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "tests/unit/test_risk_manager.py": {
    "path": "tests\\unit\\test_risk_manager.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "risk_manager",
        "qualified_name": "TestRiskManager.risk_manager",
        "is_async": false,
        "lineno": 17,
        "scope": "class:TestRiskManager",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "RiskManager"
        ]
      },
      {
        "name": "test_check_position_limit",
        "qualified_name": "TestRiskManager.test_check_position_limit",
        "is_async": true,
        "lineno": 30,
        "scope": "class:TestRiskManager",
        "params": [
          "self",
          "risk_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "Decimal",
          "Decimal",
          "Decimal",
          "check_position_limit",
          "Decimal",
          "check_position_limit"
        ]
      },
      {
        "name": "test_calculate_position_size",
        "qualified_name": "TestRiskManager.test_calculate_position_size",
        "is_async": true,
        "lineno": 51,
        "scope": "class:TestRiskManager",
        "params": [
          "self",
          "risk_manager",
          "sample_trading_opportunity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "AsyncMock",
          "calculate_position_size"
        ]
      },
      {
        "name": "test_set_stop_loss",
        "qualified_name": "TestRiskManager.test_set_stop_loss",
        "is_async": true,
        "lineno": 64,
        "scope": "class:TestRiskManager",
        "params": [
          "self",
          "risk_manager",
          "sample_position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "Decimal",
          "set_stop_loss",
          "AsyncMock",
          "Decimal",
          "set_stop_loss"
        ]
      },
      {
        "name": "test_calculate_var",
        "qualified_name": "TestRiskManager.test_calculate_var",
        "is_async": true,
        "lineno": 82,
        "scope": "class:TestRiskManager",
        "params": [
          "self",
          "risk_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "calculate_var"
        ]
      },
      {
        "name": "test_check_correlation_limit",
        "qualified_name": "TestRiskManager.test_check_correlation_limit",
        "is_async": true,
        "lineno": 98,
        "scope": "class:TestRiskManager",
        "params": [
          "self",
          "risk_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "AsyncMock",
          "Decimal",
          "check_correlation_limit",
          "AsyncMock",
          "Decimal",
          "check_correlation_limit"
        ]
      },
      {
        "name": "test_emergency_stop",
        "qualified_name": "TestRiskManager.test_emergency_stop",
        "is_async": true,
        "lineno": 117,
        "scope": "class:TestRiskManager",
        "params": [
          "self",
          "risk_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "AsyncMock",
          "Decimal",
          "Decimal",
          "emergency_stop_check",
          "AsyncMock",
          "Decimal",
          "emergency_stop_check"
        ]
      },
      {
        "name": "test_portfolio_exposure",
        "qualified_name": "TestRiskManager.test_portfolio_exposure",
        "is_async": true,
        "lineno": 135,
        "scope": "class:TestRiskManager",
        "params": [
          "self",
          "risk_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "check_portfolio_exposure",
          "Decimal",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "test_risk_adjusted_returns",
        "qualified_name": "TestRiskManager.test_risk_adjusted_returns",
        "is_async": true,
        "lineno": 154,
        "scope": "class:TestRiskManager",
        "params": [
          "self",
          "risk_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "AsyncMock",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "calculate_sharpe_ratio",
          "isinstance",
          "calculate_sortino_ratio",
          "isinstance"
        ]
      }
    ],
    "found_classes": [
      "TestRiskManager"
    ],
    "class_bases": {
      "TestRiskManager": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "tests/integration/test_data_integration.py": {
    "path": "tests\\integration\\test_data_integration.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "test_dexscreener_to_database",
        "qualified_name": "TestDataIntegration.test_dexscreener_to_database",
        "is_async": true,
        "lineno": 24,
        "scope": "class:TestDataIntegration",
        "params": [
          "self",
          "db_manager",
          "mock_dex_api"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DexScreenerCollector",
          "patch",
          "AsyncMock",
          "AsyncMock",
          "get_new_pairs",
          "save_market_data",
          "now",
          "get_historical_data",
          "len"
        ]
      },
      {
        "name": "test_honeypot_checker_caching",
        "qualified_name": "TestDataIntegration.test_honeypot_checker_caching",
        "is_async": true,
        "lineno": 57,
        "scope": "class:TestDataIntegration",
        "params": [
          "self",
          "cache_manager",
          "mock_dex_api"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "HoneypotChecker",
          "patch",
          "AsyncMock",
          "AsyncMock",
          "check_token",
          "check_token"
        ]
      },
      {
        "name": "test_whale_tracker_integration",
        "qualified_name": "TestDataIntegration.test_whale_tracker_integration",
        "is_async": true,
        "lineno": 84,
        "scope": "class:TestDataIntegration",
        "params": [
          "self",
          "db_manager",
          "cache_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "WhaleTracker",
          "Decimal",
          "now",
          "Decimal",
          "now",
          "object",
          "track_whale_movements",
          "save_whale_activity",
          "set",
          "get"
        ]
      },
      {
        "name": "test_data_aggregation_pipeline",
        "qualified_name": "TestDataIntegration.test_data_aggregation_pipeline",
        "is_async": true,
        "lineno": 136,
        "scope": "class:TestDataIntegration",
        "params": [
          "self",
          "db_manager",
          "cache_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "DataAggregator",
          "save_market_data",
          "Decimal",
          "Decimal",
          "now",
          "set",
          "set",
          "aggregate_token_data"
        ]
      },
      {
        "name": "test_batch_processing",
        "qualified_name": "TestDataIntegration.test_batch_processing",
        "is_async": true,
        "lineno": 174,
        "scope": "class:TestDataIntegration",
        "params": [
          "self",
          "db_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "range",
          "append",
          "Decimal",
          "Decimal",
          "timedelta",
          "now",
          "save_market_data_batch",
          "total_seconds",
          "now",
          "get_historical_data",
          "len"
        ]
      }
    ],
    "found_classes": [
      "TestDataIntegration"
    ],
    "class_bases": {
      "TestDataIntegration": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "tests/integration/test_ml_integration.py": {
    "path": "tests\\integration\\test_ml_integration.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "training_data",
        "qualified_name": "TestMLIntegration.training_data",
        "is_async": true,
        "lineno": 22,
        "scope": "class:TestMLIntegration",
        "params": [
          "self",
          "db_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "range",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "append",
          "save_token_analysis",
          "now",
          "DataFrame"
        ]
      },
      {
        "name": "test_rug_classifier_training",
        "qualified_name": "TestMLIntegration.test_rug_classifier_training",
        "is_async": true,
        "lineno": 50,
        "scope": "class:TestMLIntegration",
        "params": [
          "self",
          "training_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "RugClassifier",
          "drop",
          "astype",
          "train",
          "predict"
        ]
      },
      {
        "name": "test_pump_predictor_training",
        "qualified_name": "TestMLIntegration.test_pump_predictor_training",
        "is_async": true,
        "lineno": 79,
        "scope": "class:TestMLIntegration",
        "params": [
          "self",
          "db_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "PumpPredictor",
          "Decimal",
          "now",
          "timedelta",
          "range",
          "Decimal",
          "Decimal",
          "normal",
          "append",
          "timedelta",
          "float",
          "float",
          "Decimal",
          "abs",
          "normal",
          "DataFrame",
          "train",
          "tail",
          "predict_pump_probability"
        ]
      },
      {
        "name": "test_ensemble_model",
        "qualified_name": "TestMLIntegration.test_ensemble_model",
        "is_async": true,
        "lineno": 118,
        "scope": "class:TestMLIntegration",
        "params": [
          "self",
          "training_data",
          "db_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "EnsembleModel",
          "RugClassifier",
          "PumpPredictor",
          "object",
          "object",
          "predict"
        ]
      }
    ],
    "found_classes": [
      "TestMLIntegration"
    ],
    "class_bases": {
      "TestMLIntegration": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "tests/integration/test_trading_integration.py": {
    "path": "tests\\integration\\test_trading_integration.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "test_order_execution_flow",
        "qualified_name": "TestTradingIntegration.test_order_execution_flow",
        "is_async": true,
        "lineno": 20,
        "scope": "class:TestTradingIntegration",
        "params": [
          "self",
          "db_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "OrderManager",
          "PositionTracker",
          "AsyncMock",
          "AsyncMock",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "create_order",
          "execute_order",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "open_position",
          "get_position"
        ]
      },
      {
        "name": "test_strategy_signal_execution",
        "qualified_name": "TestTradingIntegration.test_strategy_signal_execution",
        "is_async": true,
        "lineno": 74,
        "scope": "class:TestTradingIntegration",
        "params": [
          "self",
          "db_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "MomentumStrategy",
          "OrderManager",
          "AsyncMock",
          "Decimal",
          "Decimal",
          "Decimal",
          "analyze",
          "create_order"
        ]
      },
      {
        "name": "test_position_monitoring_and_exit",
        "qualified_name": "TestTradingIntegration.test_position_monitoring_and_exit",
        "is_async": true,
        "lineno": 109,
        "scope": "class:TestTradingIntegration",
        "params": [
          "self",
          "db_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "PositionTracker",
          "OrderManager",
          "Decimal",
          "Decimal",
          "Decimal",
          "Decimal",
          "now",
          "open_position",
          "update_position",
          "Decimal",
          "check_take_profit",
          "get_position",
          "close_position"
        ]
      }
    ],
    "found_classes": [
      "TestTradingIntegration"
    ],
    "class_bases": {
      "TestTradingIntegration": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "tests/performance/test_performance.py": {
    "path": "tests\\performance\\test_performance.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "test_database_write_performance",
        "qualified_name": "TestPerformance.test_database_write_performance",
        "is_async": true,
        "lineno": 24,
        "scope": "class:TestPerformance",
        "params": [
          "self",
          "db_manager",
          "benchmark_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "time",
          "save_market_data_batch",
          "time",
          "print"
        ]
      },
      {
        "name": "test_cache_performance",
        "qualified_name": "TestPerformance.test_cache_performance",
        "is_async": true,
        "lineno": 42,
        "scope": "class:TestPerformance",
        "params": [
          "self",
          "cache_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "time",
          "range",
          "set",
          "time",
          "print",
          "time",
          "range",
          "get",
          "time",
          "print"
        ]
      },
      {
        "name": "test_ml_model_performance",
        "qualified_name": "TestPerformance.test_ml_model_performance",
        "is_async": true,
        "lineno": 69,
        "scope": "class:TestPerformance",
        "params": [
          "self",
          "benchmark_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "RugClassifier",
          "range",
          "append",
          "Decimal",
          "Decimal",
          "Decimal",
          "time",
          "predict",
          "append",
          "time",
          "print"
        ]
      },
      {
        "name": "test_concurrent_request_handling",
        "qualified_name": "TestPerformance.test_concurrent_request_handling",
        "is_async": true,
        "lineno": 99,
        "scope": "class:TestPerformance",
        "params": [
          "self",
          "db_manager",
          "cache_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "save_market_data",
          "Decimal",
          "Decimal",
          "now",
          "set",
          "time",
          "range",
          "append",
          "process_request",
          "gather",
          "time",
          "print",
          "len"
        ]
      },
      {
        "name": "process_request",
        "qualified_name": "TestPerformance.process_request",
        "is_async": true,
        "lineno": 101,
        "scope": "class:TestPerformance",
        "params": [
          "token_id"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "save_market_data",
          "Decimal",
          "Decimal",
          "now",
          "set"
        ]
      },
      {
        "name": "test_memory_usage",
        "qualified_name": "TestPerformance.test_memory_usage",
        "is_async": true,
        "lineno": 134,
        "scope": "class:TestPerformance",
        "params": [
          "self",
          "benchmark_data"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Process",
          "getpid",
          "memory_info",
          "range",
          "append",
          "Decimal",
          "Decimal",
          "now",
          "append",
          "memory_info",
          "print"
        ]
      },
      {
        "name": "test_order_execution_latency",
        "qualified_name": "TestPerformance.test_order_execution_latency",
        "is_async": true,
        "lineno": 167,
        "scope": "class:TestPerformance",
        "params": [
          "self",
          "benchmark"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "OrderManager",
          "AsyncMock",
          "AsyncMock",
          "Decimal",
          "Decimal",
          "create_order",
          "execute_order",
          "benchmark"
        ]
      },
      {
        "name": "execute_order",
        "qualified_name": "TestPerformance.execute_order",
        "is_async": true,
        "lineno": 185,
        "scope": "class:TestPerformance",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "create_order",
          "execute_order"
        ]
      }
    ],
    "found_classes": [
      "TestPerformance"
    ],
    "class_bases": {
      "TestPerformance": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "tests/security/test_security.py": {
    "path": "tests\\security\\test_security.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "test_encryption_manager",
        "qualified_name": "TestSecurity.test_encryption_manager",
        "is_async": true,
        "lineno": 23,
        "scope": "class:TestSecurity",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "EncryptionManager",
          "generate_key",
          "len",
          "encrypt",
          "decrypt",
          "encrypt",
          "decrypt"
        ]
      },
      {
        "name": "test_api_security_rate_limiting",
        "qualified_name": "TestSecurity.test_api_security_rate_limiting",
        "is_async": true,
        "lineno": 47,
        "scope": "class:TestSecurity",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "APISecurityManager",
          "initialize",
          "range",
          "check_rate_limit",
          "check_rate_limit",
          "sleep"
        ]
      },
      {
        "name": "test_api_authentication",
        "qualified_name": "TestSecurity.test_api_authentication",
        "is_async": true,
        "lineno": 71,
        "scope": "class:TestSecurity",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "APISecurityManager",
          "initialize",
          "generate_token",
          "validate_token",
          "validate_token"
        ]
      },
      {
        "name": "test_wallet_security",
        "qualified_name": "TestSecurity.test_wallet_security",
        "is_async": true,
        "lineno": 93,
        "scope": "class:TestSecurity",
        "params": [
          "self",
          "wallet_security"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "create_wallet",
          "sign_transaction",
          "rotate_keys",
          "emergency_stop",
          "get_wallet_status"
        ]
      },
      {
        "name": "test_audit_logging",
        "qualified_name": "TestSecurity.test_audit_logging",
        "is_async": true,
        "lineno": 131,
        "scope": "class:TestSecurity",
        "params": [
          "self",
          "audit_logger"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "log_event",
          "search_events",
          "now",
          "timedelta",
          "now",
          "len",
          "_compute_checksum",
          "_compute_checksum"
        ]
      },
      {
        "name": "test_sql_injection_protection",
        "qualified_name": "TestSecurity.test_sql_injection_protection",
        "is_async": true,
        "lineno": 167,
        "scope": "class:TestSecurity",
        "params": [
          "self",
          "db_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_token_data",
          "get_tables",
          "len"
        ]
      },
      {
        "name": "test_input_validation",
        "qualified_name": "TestSecurity.test_input_validation",
        "is_async": true,
        "lineno": 183,
        "scope": "class:TestSecurity",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ConfigValidator",
          "validate_ethereum_address",
          "validate_ethereum_address"
        ]
      },
      {
        "name": "test_private_key_protection",
        "qualified_name": "TestSecurity.test_private_key_protection",
        "is_async": true,
        "lineno": 205,
        "scope": "class:TestSecurity",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "WalletSecurityManager",
          "initialize",
          "raises",
          "sign_transaction",
          "str",
          "lower",
          "lower"
        ]
      },
      {
        "name": "test_secure_random_generation",
        "qualified_name": "TestSecurity.test_secure_random_generation",
        "is_async": true,
        "lineno": 223,
        "scope": "class:TestSecurity",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "token_bytes",
          "len",
          "set",
          "range",
          "add",
          "token_hex",
          "len"
        ]
      }
    ],
    "found_classes": [
      "TestSecurity"
    ],
    "class_bases": {
      "TestSecurity": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "tests/smoke/test_smoke.py": {
    "path": "tests\\smoke\\test_smoke.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "test_database_connection",
        "qualified_name": "TestSmoke.test_database_connection",
        "is_async": true,
        "lineno": 15,
        "scope": "class:TestSmoke",
        "params": [
          "self",
          "db_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "execute",
          "Decimal",
          "Decimal",
          "now",
          "save_trade"
        ]
      },
      {
        "name": "test_cache_connection",
        "qualified_name": "TestSmoke.test_cache_connection",
        "is_async": true,
        "lineno": 33,
        "scope": "class:TestSmoke",
        "params": [
          "self",
          "cache_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "set",
          "get"
        ]
      },
      {
        "name": "test_config_loading",
        "qualified_name": "TestSmoke.test_config_loading",
        "is_async": true,
        "lineno": 41,
        "scope": "class:TestSmoke",
        "params": [
          "self",
          "config_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "get_trading_config",
          "get_security_config"
        ]
      },
      {
        "name": "test_ml_model_loading",
        "qualified_name": "TestSmoke.test_ml_model_loading",
        "is_async": true,
        "lineno": 52,
        "scope": "class:TestSmoke",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "RugClassifier",
          "predict"
        ]
      },
      {
        "name": "test_api_endpoints_available",
        "qualified_name": "TestSmoke.test_api_endpoints_available",
        "is_async": true,
        "lineno": 72,
        "scope": "class:TestSmoke",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ClientSession",
          "get",
          "skip"
        ]
      },
      {
        "name": "test_engine_startup",
        "qualified_name": "TestSmoke.test_engine_startup",
        "is_async": true,
        "lineno": 90,
        "scope": "class:TestSmoke",
        "params": [
          "self",
          "risk_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "TradingBotEngine",
          "AsyncMock",
          "AsyncMock",
          "AsyncMock",
          "AsyncMock",
          "create_task",
          "start",
          "sleep",
          "stop"
        ]
      }
    ],
    "found_classes": [
      "TestSmoke"
    ],
    "class_bases": {
      "TestSmoke": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "tests/fixtures/mock_data.py": {
    "path": "tests\\fixtures\\mock_data.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "generate_token_address",
        "qualified_name": "MockDataGenerator.generate_token_address",
        "is_async": false,
        "lineno": 15,
        "scope": "class:MockDataGenerator",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "str",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "join",
          "choices"
        ]
      },
      {
        "name": "generate_token",
        "qualified_name": "MockDataGenerator.generate_token",
        "is_async": false,
        "lineno": 20,
        "scope": "class:MockDataGenerator",
        "params": [
          "is_rug",
          "is_honeypot",
          "liquidity"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "generate_token_address",
          "Decimal",
          "randint",
          "randint",
          "join",
          "choices",
          "str",
          "randint",
          "str",
          "str",
          "Decimal",
          "uniform",
          "str",
          "Decimal",
          "uniform",
          "randint",
          "randint",
          "randint",
          "randint"
        ]
      },
      {
        "name": "generate_price_history",
        "qualified_name": "MockDataGenerator.generate_price_history",
        "is_async": false,
        "lineno": 51,
        "scope": "class:MockDataGenerator",
        "params": [
          "days",
          "interval",
          "include_pump"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Decimal",
          "now",
          "timedelta",
          "timedelta",
          "timedelta",
          "timedelta",
          "timedelta",
          "timedelta",
          "get",
          "timedelta",
          "int",
          "timedelta",
          "range",
          "Decimal",
          "Decimal",
          "uniform",
          "Decimal",
          "randint",
          "append",
          "Decimal",
          "Decimal",
          "Decimal"
        ]
      },
      {
        "name": "generate_trades",
        "qualified_name": "MockDataGenerator.generate_trades",
        "is_async": false,
        "lineno": 96,
        "scope": "class:MockDataGenerator",
        "params": [
          "count"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "List[Dict]",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "range",
          "append",
          "timedelta",
          "choice",
          "generate_token_address",
          "Decimal",
          "randint",
          "Decimal",
          "uniform",
          "randint",
          "randint",
          "join",
          "choices"
        ]
      },
      {
        "name": "generate_whale_movement",
        "qualified_name": "MockDataGenerator.generate_whale_movement",
        "is_async": false,
        "lineno": 118,
        "scope": "class:MockDataGenerator",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "join",
          "choices",
          "generate_token_address",
          "choice",
          "Decimal",
          "randint",
          "now",
          "choice",
          "choice"
        ]
      },
      {
        "name": "generate_market_conditions",
        "qualified_name": "MockDataGenerator.generate_market_conditions",
        "is_async": false,
        "lineno": 131,
        "scope": "class:MockDataGenerator",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "choice",
          "choice",
          "choice",
          "randint",
          "Decimal",
          "uniform",
          "randint"
        ]
      }
    ],
    "found_classes": [
      "MockDataGenerator"
    ],
    "class_bases": {
      "MockDataGenerator": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "tests/fixtures/test_helpers.py": {
    "path": "tests\\fixtures\\test_helpers.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "wait_for_condition",
        "qualified_name": "TestHelpers.wait_for_condition",
        "is_async": true,
        "lineno": 15,
        "scope": "class:TestHelpers",
        "params": [
          "condition_func",
          "timeout",
          "interval"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "now",
          "total_seconds",
          "now",
          "condition_func",
          "sleep"
        ]
      },
      {
        "name": "create_mock_web3_contract",
        "qualified_name": "TestHelpers.create_mock_web3_contract",
        "is_async": false,
        "lineno": 31,
        "scope": "class:TestHelpers",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "MagicMock",
          "MagicMock",
          "balanceOf",
          "AsyncMock",
          "MagicMock",
          "totalSupply",
          "AsyncMock",
          "MagicMock",
          "decimals",
          "AsyncMock",
          "MagicMock",
          "symbol",
          "AsyncMock",
          "MagicMock",
          "name",
          "AsyncMock"
        ]
      },
      {
        "name": "assert_trade_valid",
        "qualified_name": "TestHelpers.assert_trade_valid",
        "is_async": false,
        "lineno": 54,
        "scope": "class:TestHelpers",
        "params": [
          "trade"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "isinstance",
          "isinstance"
        ]
      },
      {
        "name": "assert_position_valid",
        "qualified_name": "TestHelpers.assert_position_valid",
        "is_async": false,
        "lineno": 69,
        "scope": "class:TestHelpers",
        "params": [
          "position"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isinstance",
          "isinstance"
        ]
      },
      {
        "name": "cleanup_test_data",
        "qualified_name": "TestHelpers.cleanup_test_data",
        "is_async": true,
        "lineno": 82,
        "scope": "class:TestHelpers",
        "params": [
          "db_manager",
          "cache_manager"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "acquire",
          "execute",
          "flushdb"
        ]
      },
      {
        "name": "compare_decimals",
        "qualified_name": "TestHelpers.compare_decimals",
        "is_async": false,
        "lineno": 94,
        "scope": "class:TestHelpers",
        "params": [
          "a",
          "b",
          "tolerance"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "abs"
        ]
      },
      {
        "name": "generate_mock_config",
        "qualified_name": "TestHelpers.generate_mock_config",
        "is_async": false,
        "lineno": 99,
        "scope": "class:TestHelpers",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "Dict",
        "visibility": "public",
        "decorators": [],
        "calls": []
      }
    ],
    "found_classes": [
      "TestHelpers"
    ],
    "class_bases": {
      "TestHelpers": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "scripts/setup_database.py": {
    "path": "scripts\\setup_database.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "setup_database",
        "qualified_name": "setup_database",
        "is_async": true,
        "lineno": 13,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "getenv",
          "int",
          "getenv",
          "getenv",
          "getenv",
          "getenv",
          "connect",
          "print",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "execute",
          "print",
          "print",
          "close"
        ]
      }
    ],
    "found_classes": [],
    "class_bases": {},
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "scripts/init_config.py": {
    "path": "scripts\\init_config.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "init_config",
        "qualified_name": "init_config",
        "is_async": false,
        "lineno": 11,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Path",
          "mkdir",
          "items",
          "open",
          "dump",
          "print",
          "generate_key",
          "open",
          "write",
          "chmod",
          "print",
          "open",
          "write",
          "strip",
          "print",
          "print",
          "print",
          "print"
        ]
      }
    ],
    "found_classes": [],
    "class_bases": {},
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "scripts/health_check.py": {
    "path": "scripts\\health_check.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "check_health",
        "qualified_name": "check_health",
        "is_async": true,
        "lineno": 12,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "isoformat",
          "now",
          "ClientSession",
          "get",
          "str",
          "connect",
          "fetchval",
          "close",
          "str",
          "from_url",
          "ping",
          "close",
          "str"
        ]
      },
      {
        "name": "main",
        "qualified_name": "main",
        "is_async": true,
        "lineno": 58,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "check_health",
          "print",
          "items",
          "print",
          "exit"
        ]
      }
    ],
    "found_classes": [],
    "class_bases": {},
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  },
  "scripts/run_tests.py": {
    "path": "scripts\\run_tests.py",
    "exists": true,
    "expected": [],
    "found_methods": [
      {
        "name": "__init__",
        "qualified_name": "TestRunner.__init__",
        "is_async": false,
        "lineno": 17,
        "scope": "class:TestRunner",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "private",
        "decorators": [],
        "calls": [
          "Path"
        ]
      },
      {
        "name": "setup_environment",
        "qualified_name": "TestRunner.setup_environment",
        "is_async": false,
        "lineno": 21,
        "scope": "class:TestRunner",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "print",
          "insert",
          "str",
          "check_test_database",
          "create_test_database",
          "check_redis",
          "print",
          "start_redis"
        ]
      },
      {
        "name": "check_test_database",
        "qualified_name": "TestRunner.check_test_database",
        "is_async": false,
        "lineno": 37,
        "scope": "class:TestRunner",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "connect",
          "close"
        ]
      },
      {
        "name": "create_test_database",
        "qualified_name": "TestRunner.create_test_database",
        "is_async": false,
        "lineno": 52,
        "scope": "class:TestRunner",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "print",
          "run"
        ]
      },
      {
        "name": "check_redis",
        "qualified_name": "TestRunner.check_redis",
        "is_async": false,
        "lineno": 60,
        "scope": "class:TestRunner",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": "bool",
        "visibility": "public",
        "decorators": [],
        "calls": [
          "Redis",
          "ping"
        ]
      },
      {
        "name": "start_redis",
        "qualified_name": "TestRunner.start_redis",
        "is_async": false,
        "lineno": 70,
        "scope": "class:TestRunner",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "run",
          "sleep"
        ]
      },
      {
        "name": "run_tests",
        "qualified_name": "TestRunner.run_tests",
        "is_async": false,
        "lineno": 78,
        "scope": "class:TestRunner",
        "params": [
          "self",
          "test_type",
          "coverage",
          "parallel",
          "verbose",
          "markers"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "append",
          "extend",
          "extend",
          "extend",
          "append",
          "append",
          "extend",
          "append",
          "extend",
          "append",
          "extend",
          "print",
          "print",
          "join",
          "run",
          "parse_results"
        ]
      },
      {
        "name": "parse_results",
        "qualified_name": "TestRunner.parse_results",
        "is_async": false,
        "lineno": 145,
        "scope": "class:TestRunner",
        "params": [
          "self",
          "result"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "exists",
          "open",
          "load",
          "split",
          "split",
          "enumerate",
          "int",
          "int"
        ]
      },
      {
        "name": "generate_report",
        "qualified_name": "TestRunner.generate_report",
        "is_async": false,
        "lineno": 166,
        "scope": "class:TestRunner",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "print",
          "print",
          "print",
          "print",
          "get",
          "print",
          "get",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print"
        ]
      },
      {
        "name": "cleanup",
        "qualified_name": "TestRunner.cleanup",
        "is_async": false,
        "lineno": 193,
        "scope": "class:TestRunner",
        "params": [
          "self"
        ],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "print",
          "run",
          "run"
        ]
      },
      {
        "name": "main",
        "qualified_name": "main",
        "is_async": false,
        "lineno": 201,
        "scope": "module",
        "params": [],
        "has_varargs": false,
        "has_varkw": false,
        "returns": null,
        "visibility": "public",
        "decorators": [],
        "calls": [
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "TestRunner",
          "setup_environment",
          "run_tests",
          "generate_report",
          "cleanup"
        ]
      }
    ],
    "found_classes": [
      "TestRunner"
    ],
    "class_bases": {
      "TestRunner": []
    },
    "missing": [],
    "async_mismatches": [],
    "signature_mismatches": [],
    "visibility_mismatches": [],
    "wrapper_mismatches": [],
    "duplicates_in_file": [],
    "extras": []
  }
}